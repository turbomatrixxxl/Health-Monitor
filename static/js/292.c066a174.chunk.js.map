{"version":3,"file":"static/js/292.c066a174.chunk.js","mappings":"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","sources":["Utils/calculateIntervalSleeptHours.js","Utils/getRegistrationsForAWeek.js","webpack://health-monitor/./src/components/WeeklyChart/WeeklyChart.module.css?6b49","components/WeeklyChart/index.js","components/WeeklyChart/WeeklyChart.jsx","Utils/convertActivityToSteps.js","webpack://health-monitor/./src/components/ActivitySelect/ActivitySelect.module.css?1197","components/ActivitySelect/ActivitySelect.jsx","components/ActivitySelect/index.js","webpack://health-monitor/./src/pages/PsyhicalActivityPage/PsyhicalActivityPage.module.css?855d","pages/PsyhicalActivityPage/index.js","pages/PsyhicalActivityPage/PsyhicalActivityPage.jsx","Utils/calculateMinimumDailyActivity.js","Utils/formatDate.js","Utils/calculateDailySteps.js"],"sourcesContent":["export default function calculateIntervalSleeptHours(\n  fromHour,\n  fromMinute,\n  fromAmPm,\n  toHour,\n  toMinute,\n  toAmPm\n) {\n  // normalize input (string -> number, trim)\n  const fH = Number(String(fromHour).trim());\n  //   console.log(\"fH :\", fH);\n\n  const fM = Number(String(fromMinute).trim());\n  const tH = Number(String(toHour).trim());\n  const tM = Number(String(toMinute).trim());\n  const fAP = String(fromAmPm || \"\")\n    .trim()\n    .toUpperCase();\n  //   console.log(\"fAP :\", fAP);\n\n  const tAP = String(toAmPm || \"\")\n    .trim()\n    .toUpperCase();\n\n  // validate\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\n\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\n  // 12 AM -> 0, 12 PM -> 12\n  let fromH24 = fH % 12;\n  if (fAP === \"PM\") fromH24 += 12;\n\n  let toH24 = tH % 12;\n  if (tAP === \"PM\") toH24 += 12;\n\n  const fromTotalMin = fromH24 * 60 + fM;\n  const toTotalMin = toH24 * 60 + tM;\n\n  let minutesSlept = toTotalMin - fromTotalMin;\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\n\n  const hours = minutesSlept / 60;\n  // return Number cu o zecimală\n  return parseFloat(hours.toFixed(1));\n}\n","import calculateIntervalSleeptHours from \"./calculateIntervalSleeptHours\";\n\nexport default function getRegistrationsForAWeek(userData, param) {\n  const date = new Date();\n  const day = date.getDay(); // 0 = Duminică, 1 = Luni, ..., 6 = Sâmbătă\n  const diffToMonday = day === 0 ? -6 : 1 - day;\n\n  const startOfTheWeek = new Date(date);\n  startOfTheWeek.setDate(date.getDate() + diffToMonday);\n  // console.log(\"date.getDate() :\", date.getDate());\n  // date.getDate() : 19\n\n  startOfTheWeek.setHours(0, 0, 0, 0);\n  // console.log(\"startOfTheWeek :\", startOfTheWeek);\n  // getRegistrationsForAWeek.js:13 startOfTheWeek : Mon Sep 15 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n  const weekTotal = [];\n\n  for (let index = 0; index < 7; index++) {\n    const currentDay = new Date(startOfTheWeek);\n    currentDay.setDate(startOfTheWeek.getDate() + index);\n\n    // console.log(\"currentDay:\", currentDay);\n    // getRegistrationsForAWeek.js:20 currentDay: Fri Sep 19 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n    // console.log(\"startOfTheWeek.getDate() :\", startOfTheWeek.getDate());\n    // getRegistrationsForAWeek.js:21 startOfTheWeek.getDate() : 15\n\n    // console.log(\"currentDay.toDateString() :\", currentDay.toDateString());\n    // getRegistrationsForAWeek.js:22 currentDay.toDateString() : Thu Sep 18 2025\n\n    const dayData = userData.find(\n      (day) => new Date(day.date).toDateString() === currentDay.toDateString()\n    );\n\n    if (param === \"steps\") {\n      const totalSteps = dayData\n        ? dayData?.interval.reduce((acc, int) => acc + int.steps, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total steps\": totalSteps,\n      });\n    } else {\n      const totalSleptHours = dayData\n        ? dayData?.interval?.reduce((acc, int) => {\n            acc =\n              acc +\n              calculateIntervalSleeptHours(\n                int.fromHour,\n                int.fromMinute,\n                int.fromAmPm,\n                int.tillHour,\n                int.tillMinute,\n                int.tillAmPm\n              );\n            return acc;\n          }, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total hours\": totalSleptHours,\n      });\n    }\n  }\n\n  return weekTotal;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"barChart\":\"WeeklyChart_barChart__AHVA8\"};","import WeeklyChart from \"./WeeklyChart\";\n\nexport default WeeklyChart;\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Cell,\n} from \"recharts\";\n\nimport styles from \"./WeeklyChart.module.css\";\n\nexport default function WeeklyChart({ weeklyData, type, target }) {\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <ResponsiveContainer width=\"100%\">\n        <BarChart\n          data={weeklyData}\n          margin={{\n            top: 15,\n            right: 15,\n            left: type === \"steps\" ? -10 : -25,\n            bottom: 5,\n          }}\n          className={styles.barChart}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"day\" />\n          <YAxis />\n          <Tooltip\n            contentStyle={{ color: \"var(--brand-color)\", fontWeight: \"700\" }}\n          />\n          <Bar\n            dataKey={type === \"sleep\" ? \"Total hours\" : \"Total steps\"}\n            radius={[6, 6, 0, 0]}\n          >\n            {weeklyData.map((entry, index) => {\n              const value =\n                type === \"sleep\" ? entry[\"Total hours\"] : entry[\"Total steps\"];\n\n              const fillColor =\n                (type === \"sleep\" &&\n                  (value < target * 0.6 || value > target + 1)) ||\n                (type === \"steps\" && value < target * 0.6)\n                  ? \"red\"\n                  : type === \"steps\" &&\n                    value >= target * 0.6 &&\n                    value <= target * 0.8\n                  ? \"var(--brand-color)\"\n                  : \"#4cafef\";\n              return <Cell key={`cell-${index}`} fill={fillColor} />;\n            })}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","export default function convertActivityToSteps(\n  activity,\n  minutes,\n  age,\n  weight,\n  height,\n  intensity\n) {\n  if (!activity) {\n    return \"please input your exercise type\";\n  }\n\n  if (!age || !weight || !height) {\n    return 0;\n  }\n\n  const minutesNum = Number(minutes) || 0;\n\n  const activityMET = {\n    football: 8,\n    tennis: 7.3,\n    basketball: 6.5,\n    gym: 5,\n    fitness: 6,\n    cycling: 6,\n    running: 9.8,\n    jogging: 7,\n    swimming: 8,\n    hockey: 7,\n    rugby: 8,\n    volley: 5,\n    yoga: 3,\n    walking: 3.5,\n    dancing: 5.5,\n    skiing: 7,\n    snowboarding: 6.8,\n    surfing: 5,\n    boxing: 7.8,\n    climbing: 8,\n  };\n\n  const met = activityMET[activity.toLowerCase()] || 4;\n\n  let caloriesPerMin = 0.0175 * met * weight;\n\n  if (intensity === \"min\") {\n    caloriesPerMin *= 0.8;\n  } else if (intensity === \"max\") {\n    caloriesPerMin *= 1.2;\n  }\n\n  const totalCalories = caloriesPerMin * minutesNum;\n\n  const ageFactor = age < 30 ? 1.1 : age < 50 ? 1.0 : 0.9;\n\n  const adjustedCalories = totalCalories * ageFactor;\n\n  const steps = Math.round(adjustedCalories * 25);\n\n  return steps;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"selector\":\"ActivitySelect_selector__ZJWTA\",\"button\":\"ActivitySelect_button__GMBQU\",\"span\":\"ActivitySelect_span__kC5Bd\",\"spanDark\":\"ActivitySelect_spanDark__-UfcE\",\"svg\":\"ActivitySelect_svg__fg-DH\",\"svgDark\":\"ActivitySelect_svgDark__RiTlv\",\"options\":\"ActivitySelect_options__tQAam\",\"optionsDark\":\"ActivitySelect_optionsDark__zrVLA\",\"optionsViolet\":\"ActivitySelect_optionsViolet__3fpmK\",\"option\":\"ActivitySelect_option__fHjzJ\",\"optionDark\":\"ActivitySelect_optionDark__PpHpC\",\"activeOption\":\"ActivitySelect_activeOption__p+L7e\",\"activeOptionViolet\":\"ActivitySelect_activeOptionViolet__vg8ap\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { HiChevronDown, HiChevronUp } from \"react-icons/hi\";\nimport styles from \"./ActivitySelect.module.css\";\n\nconst activities = [\n  \"football\",\n  \"tennis\",\n  \"basketball\",\n  \"gym\",\n  \"fitness\",\n  \"cycling\",\n  \"running\",\n  \"jogging\",\n  \"swimming\",\n  \"hockey\",\n  \"rugby\",\n  \"volley\",\n  \"yoga\",\n  \"walking\",\n  \"dancing\",\n  \"skiing\",\n  \"snowboarding\",\n  \"surfing\",\n  \"boxing\",\n  \"climbing\",\n  \"other\",\n];\n\nexport default function ActivitySelect({ theme, value, onChange }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  const handleSelect = (selectedActivity) => {\n    onChange(selectedActivity);\n    setIsOpen(false);\n  };\n\n  // închide dropdown dacă dai click în afară\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className={styles.selector} ref={dropdownRef}>\n      <button className={styles.button} onClick={() => setIsOpen((p) => !p)}>\n        <span\n          className={clsx(\n            styles.span,\n            theme === \"dark\" || theme === \"violet\"\n              ? styles.spanDark\n              : styles.span\n          )}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </span>\n        {!isOpen ? (\n          <HiChevronDown\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        ) : (\n          <HiChevronUp\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        )}\n      </button>\n\n      {isOpen && (\n        <ul\n          className={clsx(\n            styles.options,\n            theme === \"dark\" ? styles.optionsDark : styles.options,\n            theme === \"violet\" ? styles.optionsViolet : styles.options\n          )}\n        >\n          {activities.map((option) => (\n            <li\n              key={option}\n              className={clsx(\n                styles.option,\n                theme === \"dark\" ? styles.optionDark : styles.option,\n                option === value &&\n                  (theme === \"violet\"\n                    ? styles.activeOptionViolet\n                    : styles.activeOption)\n              )}\n              onClick={() => handleSelect(option)}\n            >\n              {option.charAt(0).toUpperCase() + option.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nActivitySelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  theme: PropTypes.string,\n};\n","import ActivitySelect from \"./ActivitySelect\";\n\nexport default ActivitySelect;\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"PsyhicalActivityPage_cont__ekuRl\",\"leftSideCont\":\"PsyhicalActivityPage_leftSideCont__jrCmT\",\"rightSideCont\":\"PsyhicalActivityPage_rightSideCont__8zjDj\",\"rightSideUpCont\":\"PsyhicalActivityPage_rightSideUpCont__rw3Zv\",\"title\":\"PsyhicalActivityPage_title__4rJnJ\",\"graphCont\":\"PsyhicalActivityPage_graphCont__xeaV6\",\"rightSideContTitle\":\"PsyhicalActivityPage_rightSideContTitle__hIexH\",\"rightSideDate\":\"PsyhicalActivityPage_rightSideDate__DxwxO\",\"dateWrapper\":\"PsyhicalActivityPage_dateWrapper__G+IhJ\",\"paramInput\":\"PsyhicalActivityPage_paramInput__1LpJm\",\"fromToCont\":\"PsyhicalActivityPage_fromToCont__XYjNb\",\"fromToTitle\":\"PsyhicalActivityPage_fromToTitle__lQxpq\",\"fromExercise\":\"PsyhicalActivityPage_fromExercise__NMQmA\",\"from\":\"PsyhicalActivityPage_from__ngOis\",\"rem\":\"PsyhicalActivityPage_rem__prLsZ\",\"lineRowCont\":\"PsyhicalActivityPage_lineRowCont__AvVL4\",\"lineRow\":\"PsyhicalActivityPage_lineRow__xs+87\",\"activitySelect\":\"PsyhicalActivityPage_activitySelect__dy5Y+\",\"minutes\":\"PsyhicalActivityPage_minutes__BwmUC\",\"minMax\":\"PsyhicalActivityPage_minMax__g65Li\",\"timeInput\":\"PsyhicalActivityPage_timeInput__hrNzA\",\"removeBtn\":\"PsyhicalActivityPage_removeBtn__3kjpN\",\"dash\":\"PsyhicalActivityPage_dash__ZotMg\",\"twoDots\":\"PsyhicalActivityPage_twoDots__5hAHi\",\"ampmSelect\":\"PsyhicalActivityPage_ampmSelect__gdw+x\",\"addSleepCont\":\"PsyhicalActivityPage_addSleepCont__ADZwY\",\"addBtn\":\"PsyhicalActivityPage_addBtn__dPfpi\",\"saveBtn\":\"PsyhicalActivityPage_saveBtn__u+nWb\",\"adviceCont\":\"PsyhicalActivityPage_adviceCont__D7BTL\",\"navBtn\":\"PsyhicalActivityPage_navBtn__hUp5q\"};","import PsyhicalActivityPage from \"./PsyhicalActivityPage\";\n\nexport default PsyhicalActivityPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { setTotalStepsForToday } from \"../../redux/private/privateSlice\";\nimport { setTotalSteps } from \"../../redux/private/operationsPrivate\";\n\nimport convertActivityToSteps from \"../../Utils/convertActivityToSteps\";\nimport calculateMinimumDailyActivity from \"../../Utils/calculateMinimumDailyActivity\";\nimport formatDate from \"../../Utils/formatDate\";\n\nimport clsx from \"clsx\";\n\nimport ActivitySelect from \"../../components/ActivitySelect\";\n\nimport styles from \"./PsyhicalActivityPage.module.css\";\nimport getRegistrationsForAWeek from \"../../Utils/getRegistrationsForAWeek\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport WeeklyChart from \"../../components/WeeklyChart\";\n\nexport default function PsyhicalActivityPage() {\n  const navigate = useNavigate();\n\n  const { user, privateDispatch } = usePrivate();\n  // console.log(\"user psyhical :\", user);\n\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n\n  const steps = useMemo(() => user?.steps || [], [user?.steps]);\n\n  const minDailyActivitySteps = calculateMinimumDailyActivity(\n    age,\n    height,\n    weight,\n    desiredWeight\n  );\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n  // console.log(\"filterDate :\", filterDate);\n\n  const now = useMemo(() => new Date(), []);\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\n\n  const isTodaycondition = filterDate === today;\n  // console.log(\"isTodaycondition :\", isTodaycondition);\n\n  const lines = useMemo(\n    () =>\n      steps.length > 0\n        ? [...steps]\n        : [\n            {\n              date: now,\n              interval: [\n                {\n                  exerciseType: \"walking\",\n                  minutes: \"00\",\n                  intensity: \"min\",\n                  steps: 0,\n                },\n              ],\n            },\n          ],\n    [steps, now]\n  );\n\n  const filteredSteps = steps.find(\n    (step) => new Date(step.date).toISOString().split(\"T\")[0] === filterDate\n  );\n\n  const [interval, setInterval] = useState([\n    {\n      date: now,\n      interval: [\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ],\n    },\n  ]);\n  // console.log(\"interval :\", interval);\n\n  useEffect(() => {\n    if (filteredSteps) {\n      const sortedIntervals = [...filteredSteps.interval];\n      setInterval(sortedIntervals);\n    }\n  }, [filteredSteps]);\n\n  useEffect(() => {\n    const dayExercises = lines.find(\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n    );\n\n    if (dayExercises) {\n      const sortedIntervals = [...dayExercises.interval];\n      setInterval(sortedIntervals);\n    } else {\n      setInterval([\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ]);\n    }\n  }, [filterDate, lines, now, steps]);\n\n  const totalSteps = interval.reduce((acc, int) => {\n    const stepsVal = Number(int.steps) || 0;\n    return acc + stepsVal;\n  }, 0);\n\n  // console.log(\"totalSteps :\", totalSteps);\n\n  useEffect(() => {\n    privateDispatch(setTotalStepsForToday(totalSteps));\n  }, [privateDispatch, totalSteps]);\n\n  const lastInterval = interval[interval.length - 1];\n\n  const emptyLineCondition = (line) =>\n    Number(String(line.minutes).trim()) === 0;\n\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\n\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\n    const newInterval = interval.map((int, idx) =>\n      idx === intervalIdx\n        ? {\n            ...int,\n            [field]: value,\n            steps: convertActivityToSteps(\n              field === \"exerciseType\" ? value : int.exerciseType,\n              field === \"minutes\"\n                ? Math.max(0, parseInt(value, 10) || 0)\n                : parseInt(int.minutes, 10) || 0,\n              age,\n              weight,\n              height,\n              field === \"intensity\" ? value : int.intensity\n            ),\n          }\n        : { ...int }\n    );\n\n    setInterval(newInterval);\n  };\n\n  const addFilteredLineNewInterval = () => {\n    const newInterval = [...interval] || [];\n    newInterval.push({\n      exerciseType: \"walking\",\n      minutes: \"00\",\n      intensity: \"min\",\n      steps: 0,\n    });\n    setInterval(newInterval);\n  };\n\n  const removeFilteredLineInterval = (index) => {\n    const newInterval = interval.filter((_, i) => i !== index);\n    setInterval(newInterval);\n  };\n\n  const resetFilteredLinesInterval = () => {\n    setInterval([\n      {\n        exerciseType: \"walking\",\n        date: filterDate,\n        minutes: \"00\",\n        intensity: \"min\",\n        steps: 0,\n      },\n    ]);\n  };\n\n  const formatNumber = (num) => String(num).replace(/^0+(?=\\d)/, \"\");\n\n  function handleSave() {\n    const lastIntervalIndex = interval.length - 1;\n    const intervalToSave = emptyLastIntervalLineCondition\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\n      : [...interval];\n\n    // console.log(\"intervalToSave :\", intervalToSave);\n\n    privateDispatch(\n      setTotalSteps({ date: filterDate, interval: intervalToSave })\n    );\n  }\n\n  const weeklySteps = getRegistrationsForAWeek(steps, \"steps\");\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Physical Activity</h1>\n          <div className={styles.graphCont}>\n            {\" \"}\n            <WeeklyChart\n              target={neededSteps}\n              weeklyData={weeklySteps}\n              type={\"steps\"}\n            />\n          </div>\n        </div>\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Steps Equivalent of Exercises </h2>\n          {totalSteps !== 0 ? (\n            <p\n              style={{\n                fontSize: \"clamp(11px, 1.5vw, 12px)\",\n                color: totalSteps < totalSteps * 0.6 ? \"red\" : undefined,\n              }}\n              className={styles.advicep}\n            >\n              <span style={{ marginRight: \"2px\" }}>\n                Total Steps for{\" \"}\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}:{\" \"}\n              </span>{\" \"}\n              <span>{totalSteps} steps</span>\n            </p>\n          ) : (\n            <p style={{ color: \"red\" }} className={styles.advicep}>\n              No Physical Activities records for{\" \"}\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Add exercise activities</h1>\n          {/* data */}\n          <div className={styles.rightSideDate}>\n            <div className={styles.dateWrapper}>\n              <input\n                max={today}\n                type=\"date\"\n                value={filterDate ?? today}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className={styles.paramInput}\n              />\n            </div>\n            <p className={styles.rightSideDateP}>Choose date</p>\n          </div>\n          <div className={styles.fromToCont}>\n            <div className={styles.fromToTitle}>\n              <p className={styles.fromExercise}>Exercise Type</p>\n              <p className={styles.from}>Minutes</p>\n              <p className={styles.from}>Intensity</p>\n              <p className={styles.rem}>\n                {interval.length > 1 ? \"Delete\" : \"Reset\"}\n              </p>\n            </div>\n            <div className={styles.lineRowCont}>\n              {interval.map((line, idx) => (\n                <div key={`physical-${idx}`} className={styles.lineRow}>\n                  <ActivitySelect\n                    value={line?.exerciseType ?? \"walking\"}\n                    onChange={(val) =>\n                      updateFilteredLineInterval(idx, \"exerciseType\", val)\n                    }\n                    theme=\"light\"\n                  />\n                  <div className={styles.minutes}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"1\"\n                      value={formatNumber(line?.minutes)}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"minutes\",\n                          e.target.value.replace(/^0+(?=\\d)/, \"\") || \"0\" // eliminăm 0 la început\n                        )\n                      }\n                      className={clsx(styles.timeInput)}\n                    />\n                  </div>\n                  <div className={styles.minMax}>\n                    <select\n                      style={\n                        line?.intensity === \"min\"\n                          ? { color: \"green\", fontWeight: \"bold\" }\n                          : { color: \"var(--brand-color)\", fontWeight: \"bold\" }\n                      }\n                      value={line?.intensity}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"intensity\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option\n                        style={{ color: \"green\", fontWeight: \"bold\" }}\n                        value=\"min\"\n                      >\n                        Min\n                      </option>\n                      <option\n                        style={{\n                          color: \"var(--brand-color)\",\n                          fontWeight: \"bold\",\n                        }}\n                        value=\"max\"\n                      >\n                        Max\n                      </option>\n                    </select>\n                  </div>\n                  {/* buton remove */}\n                  {interval.length > 1 ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFilteredLineInterval(idx)}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={() => resetFilteredLinesInterval()}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* add line */}\n          <div className={styles.addSleepCont}>\n            <p>Add exercise</p>\n            <button\n              onClick={() => {\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\n              }}\n              type=\"button\"\n              className={styles.addBtn}\n            >\n              Add +\n            </button>\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\n              interval.length > 1) && (\n              <button\n                onClick={handleSave}\n                type=\"button\"\n                className={styles.saveBtn}\n              >\n                Save\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {minDailyActivitySteps !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {minDailyActivitySteps} minutes of activity\n              everyday.\n            </p>\n          ) : (\n            <p\n              style={{\n                color: \"red\",\n                background: \"var(--Gray5)\",\n                textAlign: \"left\",\n                flexWrap: \"wrap\",\n                gap: \"3px\",\n                justifyContent: \"flex-start\",\n                height: \"fit-content\",\n              }}\n              className={styles.advicep}\n            >\n              Personal info missing. Please click\n              <button\n                className={styles.navBtn}\n                onClick={() => navigate(\"/\")}\n                type=\"button\"\n              >\n                Diet Calculator\n              </button>{\" \"}\n              to update !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * Calculeaza activitatea fizica minima zilnica in minute\n * pentru mentinerea sanatatii si atingerea obiectivului.\n *\n * @param {number} age - varsta utilizatorului (ani)\n * @param {number} height - inaltimea utilizatorului (cm)\n * @param {number} weight - greutatea actuala (kg)\n * @param {number} desiredWeight - greutatea dorita (kg)\n * @returns {number} activitate minima zilnica in minute\n */\nexport default function calculateMinimumDailyActivity(\n  age,\n  height,\n  weight,\n  desiredWeight\n) {\n  if (!age || !height || !weight || !desiredWeight) return 0;\n\n  const heightM = height / 100;\n  const bmiCurrent = weight / (heightM * heightM);\n  const bmiDesired = desiredWeight / (heightM * heightM);\n\n  // Activitate de baza pentru sanatate\n  let baseActivity = 30; // 30 min/zi minim\n\n  // Ajustare dupa varsta\n  if (age < 30) baseActivity *= 1;\n  else if (age < 50) baseActivity *= 1.1;\n  else baseActivity *= 1.2;\n\n  // Ajustare dupa obiectiv si diferenta BMI\n  const bmiDiff = bmiCurrent - bmiDesired;\n\n  let goalFactor = 1; // mentinere\n  if (bmiDiff > 0.5) {\n    // trebuie sa slabeasca\n    goalFactor = 1 + Math.min(bmiDiff / 5, 1); // creste activitatea pana la 100% in functie de diferenta\n  } else if (bmiDiff < -0.5) {\n    // trebuie sa se ingrase\n    goalFactor = 0.8; // mai putina activitate\n  }\n\n  const dailyActivityMinutes = baseActivity * goalFactor;\n\n  return Math.round(dailyActivityMinutes);\n}\n\n// Exemple\n// console.log(calculateMinimumDailyActivity(25, 175, 70, 65)); // slabire\n// console.log(calculateMinimumDailyActivity(35, 180, 80, 80)); // mentinere\n// console.log(calculateMinimumDailyActivity(50, 165, 60, 65)); // ingrasare\n// console.log(calculateMinimumDailyActivity(null, 165, 60, 65)); // lipseste age => 0\n","export default function formatDate(inputDate) {\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\n\n  const dateObj = new Date(year, month - 1, day);\n\n  const dayName = days[dateObj.getDay()];\n  const monthName = months[month - 1];\n\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps = Math.round((baseSteps + adjustment) * ageFactor);\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n"],"names":["calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","getRegistrationsForAWeek","userData","param","date","Date","day","getDay","diffToMonday","startOfTheWeek","setDate","getDate","setHours","weekTotal","index","currentDay","dayData","find","toDateString","totalSteps","interval","reduce","acc","int","steps","push","toLocaleDateString","weekday","_dayData$interval","totalSleptHours","tillHour","tillMinute","tillAmPm","_ref","weeklyData","type","target","_jsx","style","width","height","children","ResponsiveContainer","_jsxs","BarChart","data","margin","top","right","left","bottom","className","styles","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","contentStyle","color","fontWeight","Bar","radius","map","entry","value","fillColor","Cell","fill","concat","convertActivityToSteps","activity","minutes","age","weight","intensity","minutesNum","caloriesPerMin","football","tennis","basketball","gym","fitness","cycling","running","jogging","swimming","hockey","rugby","volley","yoga","walking","dancing","skiing","snowboarding","surfing","boxing","climbing","toLowerCase","adjustedCalories","Math","round","activities","theme","onChange","isOpen","setIsOpen","useState","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","ref","onClick","p","clsx","charAt","slice","HiChevronUp","HiChevronDown","option","_user$age","_user$height","_user$weight","_user$desiredWeight","navigate","useNavigate","user","privateDispatch","usePrivate","desiredWeight","useMemo","minDailyActivitySteps","heightM","baseActivity","bmiDiff","goalFactor","min","dailyActivityMinutes","calculateMinimumDailyActivity","filterDate","setFilterDate","toISOString","split","now","today","getFullYear","getMonth","padStart","isTodaycondition","lines","length","exerciseType","filteredSteps","step","setInterval","sortedIntervals","dayExercises","line","setTotalStepsForToday","lastInterval","emptyLastIntervalLineCondition","updateFilteredLineInterval","intervalIdx","field","newInterval","idx","_objectSpread","max","parseInt","weeklySteps","neededSteps","calculateDailySteps","cont","leftSideCont","rightSideUpCont","title","graphCont","WeeklyChart","adviceCont","adviceTitle","fontSize","undefined","advicep","marginRight","formatDate","rightSideCont","rightSideDate","dateWrapper","e","paramInput","rightSideDateP","fromToCont","fromToTitle","fromExercise","from","rem","lineRowCont","_line$exerciseType","num","lineRow","ActivitySelect","val","replace","timeInput","minMax","ampmSelect","filter","_","i","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","addBtn","lastIntervalIndex","intervalToSave","setTotalSteps","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","inputDate","year","month","dayName","monthName","currentWeight","ageFactor","adjustment","baseSteps","weightDiff","abs","dailySteps"],"sourceRoot":""}