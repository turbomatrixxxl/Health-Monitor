{"version":3,"file":"static/js/31.903a3aaa.chunk.js","mappings":"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","sources":["Utils/calculateSleepHours.js","Utils/calculateIntervalSleeptHours.js","Utils/getRegistrationsForAWeek.js","webpack://health-monitor/./src/pages/SleepPage/SleepPage.module.css?0cd1","pages/SleepPage/index.js","pages/SleepPage/SleepPage.jsx","Utils/formatDate.js","webpack://health-monitor/./src/components/WeeklyChart/WeeklyChart.module.css?6b49","components/WeeklyChart/index.js","components/WeeklyChart/WeeklyChart.jsx"],"sourcesContent":["export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11];\n  } else if (age <= 17) {\n    sleepRange = [8, 10];\n  } else if (age <= 64) {\n    sleepRange = [7, 9];\n  } else {\n    sleepRange = [7, 8];\n  }\n\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n","export default function calculateIntervalSleeptHours(\n  fromHour,\n  fromMinute,\n  fromAmPm,\n  toHour,\n  toMinute,\n  toAmPm\n) {\n  // normalize input (string -> number, trim)\n  const fH = Number(String(fromHour).trim());\n  //   console.log(\"fH :\", fH);\n\n  const fM = Number(String(fromMinute).trim());\n  const tH = Number(String(toHour).trim());\n  const tM = Number(String(toMinute).trim());\n  const fAP = String(fromAmPm || \"\")\n    .trim()\n    .toUpperCase();\n  //   console.log(\"fAP :\", fAP);\n\n  const tAP = String(toAmPm || \"\")\n    .trim()\n    .toUpperCase();\n\n  // validate\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\n\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\n  // 12 AM -> 0, 12 PM -> 12\n  let fromH24 = fH % 12;\n  if (fAP === \"PM\") fromH24 += 12;\n\n  let toH24 = tH % 12;\n  if (tAP === \"PM\") toH24 += 12;\n\n  const fromTotalMin = fromH24 * 60 + fM;\n  const toTotalMin = toH24 * 60 + tM;\n\n  let minutesSlept = toTotalMin - fromTotalMin;\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\n\n  const hours = minutesSlept / 60;\n  // return Number cu o zecimală\n  return parseFloat(hours.toFixed(1));\n}\n","import calculateIntervalSleeptHours from \"./calculateIntervalSleeptHours\";\n\nexport default function getRegistrationsForAWeek(userData, param) {\n  const date = new Date();\n  const day = date.getDay(); // 0 = Duminică, 1 = Luni, ..., 6 = Sâmbătă\n  const diffToMonday = day === 0 ? -6 : 1 - day;\n\n  const startOfTheWeek = new Date(date);\n  startOfTheWeek.setDate(date.getDate() + diffToMonday);\n  // console.log(\"date.getDate() :\", date.getDate());\n  // date.getDate() : 19\n\n  startOfTheWeek.setHours(0, 0, 0, 0);\n  // console.log(\"startOfTheWeek :\", startOfTheWeek);\n  // getRegistrationsForAWeek.js:13 startOfTheWeek : Mon Sep 15 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n  const weekTotal = [];\n\n  for (let index = 0; index < 7; index++) {\n    const currentDay = new Date(startOfTheWeek);\n    currentDay.setDate(startOfTheWeek.getDate() + index);\n\n    // console.log(\"currentDay:\", currentDay);\n    // getRegistrationsForAWeek.js:20 currentDay: Fri Sep 19 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n    // console.log(\"startOfTheWeek.getDate() :\", startOfTheWeek.getDate());\n    // getRegistrationsForAWeek.js:21 startOfTheWeek.getDate() : 15\n\n    // console.log(\"currentDay.toDateString() :\", currentDay.toDateString());\n    // getRegistrationsForAWeek.js:22 currentDay.toDateString() : Thu Sep 18 2025\n\n    const dayData = userData.find(\n      (day) => new Date(day.date).toDateString() === currentDay.toDateString()\n    );\n\n    if (param === \"steps\") {\n      const totalSteps = dayData\n        ? dayData?.interval.reduce((acc, int) => acc + int.steps, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total steps\": totalSteps,\n      });\n    } else {\n      const totalSleptHours = dayData\n        ? dayData?.interval?.reduce((acc, int) => {\n            acc =\n              acc +\n              calculateIntervalSleeptHours(\n                int.fromHour,\n                int.fromMinute,\n                int.fromAmPm,\n                int.tillHour,\n                int.tillMinute,\n                int.tillAmPm\n              );\n            return acc;\n          }, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total hours\": totalSleptHours,\n      });\n    }\n  }\n\n  return weekTotal;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"SleepPage_cont__oT8Gs\",\"leftSideCont\":\"SleepPage_leftSideCont__Q3HmQ\",\"rightSideCont\":\"SleepPage_rightSideCont__ykrwn\",\"rightSideUpCont\":\"SleepPage_rightSideUpCont__nUzva\",\"title\":\"SleepPage_title__K9yPp\",\"graphCont\":\"SleepPage_graphCont__zsvaV\",\"rightSideContTitle\":\"SleepPage_rightSideContTitle__U5w9+\",\"rightSideDate\":\"SleepPage_rightSideDate__IODHw\",\"dateWrapper\":\"SleepPage_dateWrapper__dHRbg\",\"paramInput\":\"SleepPage_paramInput__iX7O3\",\"fromToCont\":\"SleepPage_fromToCont__IbmMk\",\"fromToTitle\":\"SleepPage_fromToTitle__q+7uz\",\"from\":\"SleepPage_from__oIAUQ\",\"to\":\"SleepPage_to__4PxPX\",\"rem\":\"SleepPage_rem__8xRTe\",\"lineRowCont\":\"SleepPage_lineRowCont__I0Gdh\",\"lineRow\":\"SleepPage_lineRow__1PnEF\",\"timeInputGroup\":\"SleepPage_timeInputGroup__JaH6e\",\"removeBtn\":\"SleepPage_removeBtn__apcvC\",\"dash\":\"SleepPage_dash__NFLyC\",\"timeInput\":\"SleepPage_timeInput__p9RMX\",\"twoDots\":\"SleepPage_twoDots__wLyFl\",\"ampmSelect\":\"SleepPage_ampmSelect__mwOC4\",\"addSleepCont\":\"SleepPage_addSleepCont__iDnBy\",\"addBtn\":\"SleepPage_addBtn__3yzVd\",\"saveBtn\":\"SleepPage_saveBtn__WPyMK\",\"adviceCont\":\"SleepPage_adviceCont__JvZ8D\",\"navBtn\":\"SleepPage_navBtn__y6p-p\"};","import SleepPage from \"./SleepPage\";\n\nexport default SleepPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport calculateIntervalSleeptHours from \"../../Utils/calculateIntervalSleeptHours\";\nimport formatDate from \"../../Utils/formatDate\";\nimport getRegistrationsForAWeek from \"../../Utils/getRegistrationsForAWeek\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { setSleepDailyRegistrations } from \"../../redux/private/operationsPrivate\";\n\nimport WeeklyChart from \"../../components/WeeklyChart\";\n\nimport styles from \"./SleepPage.module.css\";\n\nexport default function SleepPage() {\n  const navigate = useNavigate();\n\n  const { user, privateDispatch } = usePrivate();\n\n  const userConditions =\n    user?.age !== 0 &&\n    user?.height !== 0 &&\n    user?.weight !== 0 &&\n    user?.desiredWeight !== 0;\n\n  const age = user?.age ?? 0;\n\n  const sleep = useMemo(() => user?.sleep || [], [user?.sleep]);\n\n  const sleepHours = userConditions ? calculateSleepHours(age) : 0;\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  const now = useMemo(() => new Date(), []);\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\n\n  const isTodaycondition = filterDate === today;\n\n  const lines = useMemo(\n    () =>\n      sleep.length > 0\n        ? [...sleep]\n        : [\n            {\n              date: now,\n              interval: [\n                {\n                  fromHour: \"00\",\n                  fromMinute: \"00\",\n                  fromAmPm: \"AM\",\n                  tillHour: \"00\",\n                  tillMinute: \"00\",\n                  tillAmPm: \"AM\",\n                },\n              ],\n            },\n          ],\n    [sleep, now]\n  );\n\n  const filteredLine = lines.find(\n    (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n  );\n\n  const [interval, setInterval] = useState([\n    {\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    },\n  ]);\n\n  useEffect(() => {\n    if (filteredLine) {\n      const sorted = [...filteredLine.interval].sort(\n        (a, b) =>\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\n      );\n      setInterval(sorted);\n    }\n  }, [filteredLine]);\n\n  useEffect(() => {\n    const line = lines.find(\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n    );\n\n    if (line) {\n      const sorted = [...line.interval].sort(\n        (a, b) =>\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\n      );\n      setInterval(sorted);\n    } else {\n      setInterval([\n        {\n          fromHour: \"00\",\n          fromMinute: \"00\",\n          fromAmPm: \"AM\",\n          tillHour: \"00\",\n          tillMinute: \"00\",\n          tillAmPm: \"AM\",\n        },\n      ]);\n    }\n  }, [filterDate, sleep, lines]);\n\n  const totalSleptHours = interval?.reduce((acc, int) => {\n    acc =\n      acc +\n      calculateIntervalSleeptHours(\n        int.fromHour,\n        int.fromMinute,\n        int.fromAmPm,\n        int.tillHour,\n        int.tillMinute,\n        int.tillAmPm\n      );\n    return acc;\n  }, 0);\n\n  const lastInterval = interval[interval.length - 1];\n\n  const emptyLineCondition = (line) =>\n    Number(String(line.fromHour).trim()) +\n      Number(String(line.fromMinute).trim()) +\n      Number(String(line.tillHour).trim()) +\n      Number(String(line.tillMinute).trim()) ===\n      0 &&\n    String(line.fromAmPm).trim().toUpperCase() === \"AM\" &&\n    String(line.tillAmPm).trim().toUpperCase() === \"AM\";\n\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\n\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\n\n  function toMinutes(hour, minute, ampm) {\n    let h = parseInt(hour, 10) % 12;\n    if (ampm === \"PM\") h += 12;\n    return h * 60 + parseInt(minute, 10);\n  }\n\n  function overlaps(newInt, allIntervals, idx) {\n    const newFrom = toMinutes(\n      newInt.fromHour,\n      newInt.fromMinute,\n      newInt.fromAmPm\n    );\n    const newTill = toMinutes(\n      newInt.tillHour,\n      newInt.tillMinute,\n      newInt.tillAmPm\n    );\n\n    for (let i = 0; i < allIntervals.length; i++) {\n      if (i === idx) continue;\n      const int = allIntervals[i];\n      const from = toMinutes(int.fromHour, int.fromMinute, int.fromAmPm);\n      const till = toMinutes(int.tillHour, int.tillMinute, int.tillAmPm);\n\n      if (newFrom < till && newTill > from) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\n    let val = parseInt(value, 10);\n\n    if ([\"fromHour\", \"tillHour\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 11) val = 11;\n      value = formatNumber(val);\n    }\n\n    if ([\"fromMinute\", \"tillMinute\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 59) val = 59;\n      value = formatNumber(val);\n    }\n\n    const newInterval = [...interval];\n    const updated = { ...newInterval[intervalIdx], [field]: value };\n\n    // verificăm dacă se suprapun intervalele de somn\n    if (overlaps(updated, newInterval, intervalIdx)) {\n      toast.error(\"Intervalele de somn nu trebuie să se suprapună!\");\n      return;\n    }\n\n    newInterval[intervalIdx] = updated;\n    setInterval(newInterval);\n  };\n\n  const addFilteredLineNewInterval = () => {\n    const newInterval = [...interval] || [];\n    newInterval.push({\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    });\n    setInterval(newInterval);\n  };\n\n  const removeFilteredLineInterval = (intervalIdx) => {\n    const newInterval = interval.filter((_, i) => i !== intervalIdx);\n    setInterval(newInterval);\n  };\n\n  const resetFilteredLinesInterval = () => {\n    setInterval([\n      {\n        fromHour: \"00\",\n        fromMinute: \"00\",\n        fromAmPm: \"AM\",\n        tillHour: \"00\",\n        tillMinute: \"00\",\n        tillAmPm: \"AM\",\n      },\n    ]);\n  };\n\n  function handleSave() {\n    const lastIntervalIndex = interval.length - 1;\n    const intervalToSave = emptyLastIntervalLineCondition\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\n      : [...interval];\n    privateDispatch(\n      setSleepDailyRegistrations({ date: filterDate, interval: intervalToSave })\n    );\n  }\n\n  const weeklySleep = getRegistrationsForAWeek(sleep, \"sleep\");\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Sleep statistics</h1>\n          <div className={styles.graphCont}>\n            <WeeklyChart\n              target={sleepHours}\n              weeklyData={weeklySleep}\n              type={\"sleep\"}\n            />\n          </div>\n        </div>\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Total sleep hours</h2>\n          {totalSleptHours !== 0 ? (\n            <p\n              style={{\n                fontSize: \"clamp(11px, 1.5vw, 14px)\",\n                color:\n                  totalSleptHours < sleepHours * 0.6 ||\n                  totalSleptHours > sleepHours * 1.2\n                    ? \"red\"\n                    : undefined,\n              }}\n              className={styles.advicep}\n            >\n              <span>\n                You have {totalSleptHours}{\" \"}\n                {totalSleptHours === 1 ? \"hour\" : \"hours\"} of sleep for{\" \"}\n              </span>{\" \"}\n              <span style={{ marginLeft: \"2px\" }}>\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}\n              </span>\n            </p>\n          ) : (\n            <p style={{ color: \"red\" }} className={styles.advicep}>\n              No sleep records for{\" \"}\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Add sleep</h1>\n          {/* data */}\n          <div className={styles.rightSideDate}>\n            <div className={styles.dateWrapper}>\n              <input\n                max={today}\n                type=\"date\"\n                value={filterDate ?? today}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className={styles.paramInput}\n              />\n            </div>\n            <p className={styles.rightSideDateP}>Choose date</p>\n          </div>\n\n          <div className={styles.fromToCont}>\n            <div className={styles.fromToTitle}>\n              <p className={styles.from}>From</p>\n              <p className={styles.rem}>\n                {lines.length > 1 ? \"Delete\" : \"Reset\"}\n              </p>\n              <p className={styles.to}>Till</p>\n            </div>\n            <div className={styles.lineRowCont}>\n              {interval.map((line, idx) => (\n                <div key={`line-${idx}`} className={styles.lineRow}>\n                  <div className={styles.timeInputGroup}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"11\"\n                      step=\"1\"\n                      value={line.fromHour}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromHour\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <span className={styles.twoDots}>:</span>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"55\"\n                      step=\"1\"\n                      value={line.fromMinute}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromMinute\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <select\n                      value={line.fromAmPm}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromAmPm\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option value=\"AM\">AM</option>\n                      <option value=\"PM\">PM</option>\n                    </select>\n                  </div>\n                  {interval.length > 1 ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFilteredLineInterval(idx)}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={() => resetFilteredLinesInterval()}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  )}\n                  <div className={styles.timeInputGroup}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"11\"\n                      step=\"1\"\n                      value={line.tillHour}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillHour\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <span className={styles.twoDots}>:</span>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"55\"\n                      step=\"1\"\n                      value={line.tillMinute}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillMinute\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <select\n                      value={line.tillAmPm}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillAmPm\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option value=\"AM\">AM</option>\n                      <option value=\"PM\">PM</option>\n                    </select>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className={styles.addSleepCont}>\n            <p>Add sleep period</p>\n            <button\n              onClick={() => {\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\n              }}\n              type=\"button\"\n              className={styles.addBtn}\n            >\n              Add +\n            </button>\n\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\n              interval.length > 1) && (\n              <button\n                onClick={handleSave}\n                type=\"button\"\n                className={styles.saveBtn}\n              >\n                Save\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {age !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {sleepHours} hours of sleep .\n            </p>\n          ) : (\n            <p\n              style={{\n                color: \"red\",\n                background: \"var(--Gray5)\",\n                textAlign: \"left\",\n                flexWrap: \"wrap\",\n                gap: \"3px\",\n                justifyContent: \"flex-start\",\n                height: \"fit-content\",\n                fontSize: \"clamp(11px, 2.5vw, 12px)\",\n              }}\n              className={styles.advicep}\n            >\n              Personal info missing. Please click\n              <button\n                className={styles.navBtn}\n                onClick={() => navigate(\"/\")}\n                type=\"button\"\n              >\n                Diet Calculator\n              </button>{\" \"}\n              to update !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default function formatDate(inputDate) {\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\n\n  const dateObj = new Date(year, month - 1, day);\n\n  const dayName = days[dateObj.getDay()];\n  const monthName = months[month - 1];\n\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"barChart\":\"WeeklyChart_barChart__AHVA8\"};","import WeeklyChart from \"./WeeklyChart\";\n\nexport default WeeklyChart;\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Cell,\n} from \"recharts\";\n\nimport styles from \"./WeeklyChart.module.css\";\n\nexport default function WeeklyChart({ weeklyData, type, target }) {\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <ResponsiveContainer width=\"100%\">\n        <BarChart\n          data={weeklyData}\n          margin={{\n            top: 15,\n            right: 15,\n            left: type === \"steps\" ? -10 : -25,\n            bottom: 5,\n          }}\n          className={styles.barChart}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"day\" />\n          <YAxis />\n          <Tooltip\n            contentStyle={{ color: \"var(--brand-color)\", fontWeight: \"700\" }}\n          />\n          <Bar\n            dataKey={type === \"sleep\" ? \"Total hours\" : \"Total steps\"}\n            radius={[6, 6, 0, 0]}\n          >\n            {weeklyData.map((entry, index) => {\n              const value =\n                type === \"sleep\" ? entry[\"Total hours\"] : entry[\"Total steps\"];\n\n              const fillColor =\n                (type === \"sleep\" &&\n                  (value < target * 0.6 || value > target + 1)) ||\n                (type === \"steps\" && value < target * 0.6)\n                  ? \"red\"\n                  : type === \"steps\" &&\n                    value >= target * 0.6 &&\n                    value <= target * 0.8\n                  ? \"var(--brand-color)\"\n                  : \"#4cafef\";\n              return <Cell key={`cell-${index}`} fill={fillColor} />;\n            })}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n"],"names":["calculateSleepHours","age","sleepRange","arguments","length","undefined","min","calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","getRegistrationsForAWeek","userData","param","date","Date","day","getDay","diffToMonday","startOfTheWeek","setDate","getDate","setHours","weekTotal","index","currentDay","dayData","find","toDateString","totalSteps","interval","reduce","acc","int","steps","push","toLocaleDateString","weekday","_dayData$interval","totalSleptHours","tillHour","tillMinute","tillAmPm","_user$age","navigate","useNavigate","user","privateDispatch","usePrivate","userConditions","height","weight","desiredWeight","sleep","useMemo","sleepHours","filterDate","setFilterDate","useState","toISOString","split","now","today","concat","getFullYear","getMonth","padStart","isTodaycondition","lines","filteredLine","line","setInterval","useEffect","sorted","sort","a","b","toMinutes","lastInterval","emptyLastIntervalLineCondition","formatNumber","num","hour","minute","ampm","h","parseInt","updateFilteredLineInterval","intervalIdx","field","value","val","includes","newInterval","updated","_objectSpread","newInt","allIntervals","idx","newFrom","newTill","i","from","overlaps","toast","error","weeklySleep","_jsxs","className","styles","cont","children","leftSideCont","rightSideUpCont","_jsx","title","graphCont","WeeklyChart","target","weeklyData","type","adviceCont","adviceTitle","style","fontSize","color","advicep","marginLeft","formatDate","rightSideCont","rightSideDate","dateWrapper","max","onChange","e","paramInput","rightSideDateP","fromToCont","fromToTitle","rem","to","lineRowCont","map","lineRow","timeInputGroup","step","timeInput","twoDots","ampmSelect","onClick","filter","_","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","addBtn","lastIntervalIndex","intervalToSave","setSleepDailyRegistrations","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","inputDate","year","month","dayName","monthName","_ref","width","ResponsiveContainer","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","contentStyle","fontWeight","Bar","radius","entry","fillColor","Cell","fill"],"sourceRoot":""}