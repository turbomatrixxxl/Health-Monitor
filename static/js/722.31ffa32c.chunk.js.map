{"version":3,"file":"static/js/722.31ffa32c.chunk.js","mappings":"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","sources":["Utils/getFormattedDate.js","Utils/calculateNominalBPAndPulse.js","Utils/formatTimeTo12h.js","webpack://health-monitor/./src/components/Chart/Chart.module.css?6073","components/Chart/index.js","components/Chart/Chart.jsx","webpack://health-monitor/./src/pages/DailyProgressPage/DailyProgressPage.module.css?310a","pages/DailyProgressPage/index.js","pages/DailyProgressPage/DailyProgressPage.jsx","Utils/calculateDailySteps.js","Utils/calculateSleepHours.js"],"sourcesContent":["export default function getFormattedDate() {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Add leading zero if needed\n  const day = String(today.getDate()).padStart(2, \"0\"); // Add leading zero if needed\n  return `${year}-${month}-${day}`; // Return in YYYY-MM-DD format\n}\n","/**\n * Calculate nominal heart rate and blood pressure with age- and weight-adjusted limits\n * @param {number} age - age in years\n * @param {number} weight - weight in kg\n * @returns {object} - { heartRate, heartRateMin, heartRateMax, systolic, systolicMin, systolicMax, diastolic, diastolicMin, diastolicMax }\n */\nexport default function calculateNominalBPAndPulse(age, weight) {\n  if (!age) {\n    return 0;\n  }\n\n  // Puls nominal: 70 ± 10, ajustat cu varsta\n  const heartRate = Math.round(70 + (age - 30) * 0.3);\n  const heartRateMin = Math.round(heartRate - 10);\n  const heartRateMax = Math.round(heartRate + 10);\n\n  // Tensiune arterială nominală: sistolic 110 ± 10, diastolic 70 ± 5, ajustate cu vârsta\n  const systolic = Math.round(110 + age * 0.5);\n  const systolicMin = Math.round(systolic - 10);\n  const systolicMax = Math.round(systolic + 10);\n\n  const diastolic = Math.round(70 + age * 0.2);\n  const diastolicMin = Math.round(diastolic - 5);\n  const diastolicMax = Math.round(diastolic + 5);\n\n  // Ajustare ușoară în funcție de greutate\n  let hr = heartRate,\n    hrMin = heartRateMin,\n    hrMax = heartRateMax;\n  let sys = systolic,\n    sysMin = systolicMin,\n    sysMax = systolicMax;\n  let dia = diastolic,\n    diaMin = diastolicMin,\n    diaMax = diastolicMax;\n\n  if (weight) {\n    if (weight > 80) {\n      hr += 2;\n      hrMin += 2;\n      hrMax += 2;\n      sys += 3;\n      sysMin += 3;\n      sysMax += 3;\n      dia += 2;\n      diaMin += 2;\n      diaMax += 2;\n    } else if (weight < 60) {\n      hr -= 2;\n      hrMin -= 2;\n      hrMax -= 2;\n      sys -= 3;\n      sysMin -= 3;\n      sysMax -= 3;\n      dia -= 2;\n      diaMin -= 2;\n      diaMax -= 2;\n    }\n  }\n\n  return {\n    heartRate: hr,\n    heartRateMin: hrMin,\n    heartRateMax: hrMax,\n    systolic: sys,\n    systolicMin: sysMin,\n    systolicMax: sysMax,\n    diastolic: dia,\n    diastolicMin: diaMin,\n    diastolicMax: diaMax,\n  };\n}\n\n// const noAge = calculateBPAndPulse();\n// console.log(\"noAge :\", noAge);\n","export default function formatTimeTo12h(time24) {\n  // așteaptă time24 în format \"HH.mm\"\n  const [hourStr, minuteStr] = time24.split(\":\");\n  let hour = parseInt(hourStr, 10);\n  const minute = parseInt(minuteStr, 10);\n\n  const ampm = hour >= 12 ? \"PM\" : \"AM\";\n  hour = hour % 12;\n  if (hour === 0) hour = 12; // cazul 0 -> 12 AM\n\n  const formattedHour = hour.toString().padStart(2, \"0\");\n  const formattedMinute = minute.toString().padStart(2, \"0\");\n\n  return `${formattedHour}:${formattedMinute} ${ampm}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"chartContainer\":\"Chart_chartContainer__tWEJk\",\"chartCont\":\"Chart_chartCont__37H2i\",\"chartBalance\":\"Chart_chartBalance__mrmEK\",\"light\":\"Chart_light__5FNhq\",\"violet\":\"Chart_violet__sPvdB\",\"chart\":\"Chart_chart__KWi2v\",\"tooltipContainer\":\"Chart_tooltipContainer__WubHN\",\"tooltipNameContainer\":\"Chart_tooltipNameContainer__WWBhZ\",\"tooltipSumContainer\":\"Chart_tooltipSumContainer__YTjgt\"};","import Chart from \"./Chart\";\n\nexport default Chart;\n","\"use client\";\n\nimport React from \"react\";\nimport { PieChart, Pie, Tooltip, Cell, ResponsiveContainer } from \"recharts\";\nimport \"animate.css\";\n\n// import \"chart.js/auto\";\n\nimport clsx from \"clsx\";\n\nimport styles from \"./Chart.module.css\";\n\nexport default function Chart({ calories, steps, sleep, free, totalPercent }) {\n  const theme = \"dark\";\n\n  const balance = totalPercent;\n\n  let cal = calories || 0;\n  let st = steps || 0;\n  let sl = sleep || 0;\n  let fre = free || 0;\n\n  if (cal >= 100) {\n    cal = 100;\n  }\n\n  if (st >= 100) {\n    st = 100;\n  }\n\n  if (sl >= 100) {\n    sl = 100;\n  }\n\n  if (fre >= 100) {\n    fre = 100;\n  }\n\n  //  data\n  const data = [\n    cal > 0 && {\n      name: \"Daily Cal\",\n      value: cal,\n      backgroundColor: calories > 100 ? \"orangered\" : \"orange\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    st > 0 && {\n      name: \"Steps\",\n      value: st,\n      backgroundColor: \"#37e673\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    sl > 0 && {\n      name: \"Sleep\",\n      value: sl,\n      backgroundColor: sleep < 50 || sleep > 100 ? \"darkred\" : \"blue\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    fre > 0 && {\n      name: \"Free\",\n      value: fre,\n      backgroundColor: \"var(--Gray-5)\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    {\n      name: \"There are no inputs for this period !\",\n      value: 0.0000000001,\n      backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n  ];\n\n  const sortedData = data.sort((a, b) => {\n    let ap = Number(a.value);\n    // console.log(ap);\n\n    let bp = Number(b.value);\n    // console.log(b);\n\n    return ap - bp;\n  });\n\n  //   console.log(sortedData);\n\n  const tooltipCondition = (name) => {\n    return name === \"Daily Cal\"\n      ? Number(calories)\n      : name === \"Steps\"\n      ? Number(steps)\n      : name === \"Sleep\"\n      ? Number(sleep)\n      : name === \"Free\"\n      ? Number(free)\n      : Number(0);\n  };\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      //   console.log(payload[0].payload.fill);\n\n      return (\n        <div\n          className={clsx(\n            styles.tooltipContainer,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <p style={{ color: \"white\" }} className={styles.tooltipNameContainer}>\n            {payload[0].name}\n          </p>\n          <div className={styles.tooltipSumContainer}>\n            <div\n              style={{\n                background: `${payload[0].payload.fill}`,\n                borderRadius: \"2.5px\",\n              }}\n            ></div>\n            <span style={{ color: \"white\" }}>\n              {tooltipCondition(payload[0].name)} %\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const textAnimationClasses =\n    \"animate__animated  animate__zoomIn animate__slow\";\n\n  return (\n    <div className={styles.chartContainer}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart fill=\"rgba(255, 255, 255, 0.6)\">\n          <Tooltip cursor={{ cursor: \"pointer\" }} content={CustomTooltip} />\n          <Pie\n            startOffset={0}\n            className={styles.chart}\n            data={sortedData}\n            dataKey=\"value\"\n            outerRadius={105}\n            innerRadius={85}\n            // paddingAngle={5}\n            fill=\"rgba(255, 255, 255, 0.6)\"\n          >\n            {data.map((entry, index) => {\n              //   console.log(entry.backgroundColor);\n              // console.log(entry.name);\n\n              return <Cell key={index} fill={entry.backgroundColor} />;\n            })}\n          </Pie>\n        </PieChart>\n      </ResponsiveContainer>\n\n      <div className={clsx(styles.chartCont, textAnimationClasses)}>\n        <p\n          style={\n            calories > 100 || calories < 50\n              ? { color: \"orangered\" }\n              : { color: \"orange\" }\n          }\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Calories</span>\n          {balance ? Number(calories) : Number(0)}\n          <span>%</span>\n        </p>\n        <p\n          style={{ color: \"green\" }}\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Steps</span>\n          {balance ? Number(steps) : Number(0)}\n          <span>%</span>\n        </p>{\" \"}\n        <p\n          style={\n            sleep > 100 || sleep < 50 ? { color: \"darkred\" } : { color: \"blue\" }\n          }\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Sleep</span>\n          {balance ? Number(sl) : Number(0)}\n          <span>%</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"DailyProgressPage_cont__qU3n8\",\"leftSideCont\":\"DailyProgressPage_leftSideCont__9j7vU\",\"rightSideCont\":\"DailyProgressPage_rightSideCont__JQ0AJ\",\"title\":\"DailyProgressPage_title__hqKcS\",\"graphCont\":\"DailyProgressPage_graphCont__kRD30\",\"graphicResult\":\"DailyProgressPage_graphicResult__GRR6B\",\"needed\":\"DailyProgressPage_needed__g38cj\",\"badResult\":\"DailyProgressPage_badResult__qJTQr\",\"mediumResult\":\"DailyProgressPage_mediumResult__J-76v\",\"goodResult\":\"DailyProgressPage_goodResult__rzxYK\",\"metrixCont\":\"DailyProgressPage_metrixCont__liScv\",\"alerts\":\"DailyProgressPage_alerts__5AHjJ\",\"remindersList\":\"DailyProgressPage_remindersList__BQ6Ch\",\"metrixTitle\":\"DailyProgressPage_metrixTitle__yNyIH\",\"metrixTitleContent\":\"DailyProgressPage_metrixTitleContent__9OTAl\",\"doneBtn\":\"DailyProgressPage_doneBtn__z7T61\"};","import DailyProgressPage from \"./DailyProgressPage\";\n\nexport default DailyProgressPage;\n","import React, { useEffect } from \"react\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\n\nimport {\n  addEditReminder,\n  fetchConsumedProductsForSpecificDay,\n  refreshDoneReminders,\n} from \"../../redux/private/operationsPrivate\";\n\nimport getFormattedDate from \"../../Utils/getFormattedDate\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport calculateNominalBPAndPulse from \"../../Utils/calculateNominalBPAndPulse\";\nimport formatTimeTo12h from \"../../Utils/formatTimeTo12h\";\n\nimport clsx from \"clsx\";\n\nimport Chart from \"../../components/Chart\";\n\nimport styles from \"./DailyProgressPage.module.css\";\n\nexport default function DailyProgressPage() {\n  const { dailyCalorieSummary, privateDispatch, totalSteps, user } =\n    usePrivate();\n  //   console.log(\"dailyCalorieSummary :\", dailyCalorieSummary);\n\n  const reminders = user?.reminders || [];\n  const updatedReminders = reminders.filter(\n    (reminder) => !reminder.done && reminder.frequency === \"daily\"\n  );\n  const sortedReminders = updatedReminders.sort((a, b) => {\n    const [aH, aM] = a.time.split(\":\").map(Number);\n    const [bH, bM] = b.time.split(\":\").map(Number);\n\n    // console.log(\"aH, aM\", aH, aM);\n\n    return aH !== bH ? aH - bH : aM - bM;\n  });\n\n  console.log(\"sortedReminders :\", sortedReminders);\n\n  const rem = [...sortedReminders];\n\n  useEffect(() => {\n    privateDispatch(refreshDoneReminders());\n  }, [privateDispatch]);\n\n  // console.log(\"updatedReminders :\", updatedReminders.length);\n\n  const name = user?.username ?? \"User\";\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n  const heartMetrix = user?.heart ?? [];\n\n  const heartMetrixCondition = heartMetrix?.length > 0;\n\n  const heartMetrixLength = heartMetrix.length;\n\n  const heartMetrixLastRecord = heartMetrixCondition\n    ? heartMetrix[heartMetrixLength - 1]\n    : [];\n\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\n  const neededSleep = calculateSleepHours(age);\n  const heartsMetrics = calculateNominalBPAndPulse(age, weight);\n  const {\n    heartRate,\n    heartRateMin,\n    heartRateMax,\n    systolic,\n    systolicMin,\n    systolicMax,\n    diastolic,\n    diastolicMin,\n    diastolicMax,\n  } = heartsMetrics;\n\n  useEffect(() => {\n    const today = getFormattedDate(); // Ensure the correct format YYYY-MM-DD\n    // console.log(\"Fetching data for date:\", today);\n\n    privateDispatch(fetchConsumedProductsForSpecificDay({ date: today })); // Pass as an object\n  }, [privateDispatch]);\n\n  function formatNumber(num) {\n    return num.toLocaleString(\"en-US\");\n  }\n\n  const condition =\n    (age || age !== 0) &&\n    (height || height !== 0) &&\n    (weight || weight !== 0) &&\n    (desiredWeight || desiredWeight !== 0);\n\n  const totalCalories = condition ? dailyCalorieSummary?.dailyCalorieIntake : 0;\n  const caloriesPer = condition\n    ? dailyCalorieSummary?.percentageCaloriesConsumed\n    : 0;\n  const caloriesLeft = condition ? dailyCalorieSummary?.remainingCalories : 0;\n\n  const stepsPer = condition ? Math.round((100 * totalSteps) / neededSteps) : 0;\n  const stepsLeft = condition ? neededSteps - totalSteps : 0;\n  //   console.log(\"stepsLeft :\", stepsLeft);\n\n  const sleep = 2;\n  const sleepPer = condition ? Math.round((100 * sleep) / neededSleep) : 0;\n  const sleepLeft = condition ? neededSleep - sleep : 0;\n  //   console.log(\"over :\", sleepPer > 100);\n\n  const total = caloriesPer + stepsPer + sleepPer;\n\n  const systolicR = heartMetrixCondition ? heartMetrixLastRecord.systolic : 0;\n  const diastolicR = heartMetrixCondition ? heartMetrixLastRecord.diastolic : 0;\n  const pulse = heartMetrixCondition ? heartMetrixLastRecord.pulse : 0;\n  const heartCondition = systolicR + diastolicR === 0 || pulse === 0;\n  // console.log(\"heartCondition :\", heartCondition);\n\n  function totalGoalsPercentage(cal, st, sl) {\n    let calories = cal ?? 0;\n    let steps = st ?? 0;\n    let sleep = sl ?? 0;\n\n    if (cal > 100) calories = 100;\n    if (sl > 100) sleep = 100;\n\n    const goalsPercentage = (calories + steps + sleep) / 3;\n\n    return Math.floor(goalsPercentage);\n  }\n\n  const globalPercentage = totalGoalsPercentage(\n    caloriesPer,\n    stepsPer,\n    sleepPer\n  );\n\n  //   console.log(\"globalPercentage :\", globalPercentage);\n\n  function handleReminderDone(id) {\n    const reminderDone = rem.find((r) => r._id === id);\n    if (!reminderDone) {\n      return;\n    }\n\n    privateDispatch(\n      addEditReminder({ ...reminderDone, id: reminderDone._id, done: true })\n    );\n  }\n\n  let free = 100 - globalPercentage;\n\n  if (free < 0) {\n    free = 0;\n  }\n\n  // console.log(\"percent :\", caloriesPer, stepsPer, sleepPer, free);\n\n  // console.log(\"sleepLeft === neededSleep :\", sleepLeft === neededSleep);\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Daily Progress</h1>\n        <div className={styles.graphCont}>\n          <Chart\n            calories={caloriesPer}\n            steps={stepsPer}\n            sleep={sleepPer}\n            free={free}\n            totalPercent={globalPercentage}\n          />\n          {total > 0 ? (\n            <p\n              className={clsx(\n                styles.graphicResult,\n                globalPercentage <= 50 && styles.badResult,\n                globalPercentage > 50 &&\n                  globalPercentage < 80 &&\n                  styles.mediumResult,\n                globalPercentage >= 80 && styles.goodResult\n              )}\n            >\n              You have reached {globalPercentage}% of your goals today\n            </p>\n          ) : (\n            <p\n              className={clsx(\n                styles.graphicResult,\n                globalPercentage <= 50 && styles.badResult,\n                globalPercentage > 50 &&\n                  globalPercentage < 80 &&\n                  styles.mediumResult,\n                globalPercentage >= 80 && styles.goodResult\n              )}\n            >\n              No entries for today ! Please, add some records !\n            </p>\n          )}\n        </div>\n        <div className={clsx(styles.metrixCont, styles.alerts)}>\n          {updatedReminders.length > 0 ? (\n            <>\n              <h3 className={styles.metrixTitle}>Daily Reminders</h3>\n              <ul className={styles.remindersList}>\n                {rem.map(\n                  (reminder) =>\n                    !reminder?.done && (\n                      <li\n                        style={{ color: \"red\" }}\n                        className={styles.metrixTitle}\n                        key={`reminder-${reminder._id}`}\n                      >\n                        <div className={styles.metrixTitleContent}>\n                          <span>{formatTimeTo12h(reminder?.time)}</span> -{\" \"}\n                          <span>{reminder?.text}</span>\n                        </div>\n                        <button\n                          className={styles.doneBtn}\n                          onClick={() => handleReminderDone(reminder._id)}\n                          type=\"button\"\n                        >\n                          Done\n                        </button>\n                      </li>\n                    )\n                )}\n              </ul>\n            </>\n          ) : (\n            <p\n              style={{ color: \"red\" }}\n              className={clsx(styles.metrixTitle, styles.alerts)}\n            >\n              No Reminders set !!!\n            </p>\n          )}\n        </div>\n      </div>\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Daily Records</h1>\n        {condition ? (\n          <>\n            {/* Calories */}\n            <div className={styles.metrixCont}>\n              {totalCalories ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Calories to consume :\n                  </span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(totalCalories)} calories\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Calories consumed :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (caloriesPer === 0 ||\n                      caloriesPer > 100 ||\n                      caloriesPer <= 50) &&\n                      styles.badResult,\n                    caloriesPer < 80 &&\n                      caloriesLeft > 50 &&\n                      styles.mediumResult,\n                    caloriesPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {caloriesPer}%\n                </span>\n              </p>\n              {caloriesPer !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining calories :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (caloriesPer > 100 || caloriesPer <= 50) &&\n                        styles.badResult,\n                      caloriesPer < 80 &&\n                        caloriesLeft > 50 &&\n                        styles.mediumResult,\n                      caloriesPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {formatNumber(caloriesLeft)} calories\n                  </span>\n                </p>\n              ) : (\n                <p style={{ color: \"red\" }} className={styles.metrixTitle}>\n                  No entry for today ! Please, input meals entries !\n                </p>\n              )}\n            </div>\n\n            {/* Steps */}\n            <div className={styles.metrixCont}>\n              {neededSteps !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Steps to do :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(neededSteps)} steps\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Steps taken :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                    stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                    stepsPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {stepsPer}%\n                </span>\n              </p>\n              {stepsPer !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining steps to do :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                      stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                      stepsPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {formatNumber(stepsLeft)} steps\n                  </span>\n                </p>\n              ) : (\n                <p style={{ color: \"red\" }} className={styles.metrixTitle}>\n                  No steps recorded for today ! Please, walk more or input\n                  record !\n                </p>\n              )}\n            </div>\n\n            {/* Sleep */}\n            <div className={styles.metrixCont}>\n              {neededSleep !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Hours to sleep :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {neededSleep.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Hours slept :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (sleepPer === 0 || sleepPer <= 50 || sleepPer > 100) &&\n                      styles.badResult,\n                    sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                    sleepPer >= 80 && sleepPer < 100 && styles.goodResult\n                  )}\n                >\n                  {sleepPer}%\n                </span>\n              </p>\n              {sleepPer === 0 ? (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  No sleep recorded yet for today ! Please, input sleep record !\n                </p>\n              ) : sleepLeft > 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining hours to sleep :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (sleepPer === 0 || sleepPer <= 50) && styles.badResult,\n                      sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                      sleepPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {sleepLeft.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems overslept {Math.abs(sleepLeft)} hr. Please sleep less\n                  !\n                </p>\n              )}\n            </div>\n\n            {/* Heart Metrics */}\n            <div className={styles.metrixCont}>\n              {heartsMetrics !== 0 ? (\n                <>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal BP :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {systolic}/{diastolic} mm/Hg\n                    </span>\n                  </p>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal Pulse :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {heartRate} bpm\n                    </span>\n                  </p>\n                </>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n\n              {heartCondition ? (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that You did not recorded heart inputs ! Please input\n                  data !\n                </p>\n              ) : (\n                <>\n                  {systolicR >= systolicMin &&\n                  systolicR <= systolicMax &&\n                  diastolicR >= diastolicMin &&\n                  diastolicR <= diastolicMax ? (\n                    <p className={styles.metrixTitle}>\n                      <span className={styles.metrixName}>{name} BP :</span>\n                      <span\n                        className={clsx(\n                          styles.metrixQuantity,\n                          styles.goodResult\n                        )}\n                      >\n                        {systolicR}/{diastolicR} mm/Hg\n                      </span>\n                    </p>\n                  ) : (\n                    <p\n                      style={{\n                        color: \"red\",\n                        background: \"var(--Gray5)\",\n                        textAlign: \"left\",\n                      }}\n                      className={styles.metrixTitle}\n                    >\n                      It seems that your blood pressure is not good ! Please\n                      consult doctor !\n                    </p>\n                  )}\n\n                  {pulse >= heartRateMin && pulse <= heartRateMax ? (\n                    <p className={styles.metrixTitle}>\n                      <span className={styles.metrixName}>{name} Pulse :</span>\n                      <span\n                        className={clsx(\n                          styles.metrixQuantity,\n                          styles.goodResult\n                        )}\n                      >\n                        {pulse} bpm\n                      </span>\n                    </p>\n                  ) : (\n                    <p\n                      style={{\n                        color: \"red\",\n                        background: \"var(--Gray5)\",\n                        textAlign: \"left\",\n                      }}\n                      className={styles.metrixTitle}\n                    >\n                      It seems that your pulse is too{\" \"}\n                      {pulse < heartRateMin\n                        ? \"low\"\n                        : pulse > heartRateMax\n                        ? \"high\"\n                        : \"\"}\n                      ! Please consult doctor !\n                    </p>\n                  )}\n                </>\n              )}\n            </div>\n          </>\n        ) : (\n          <p\n            style={{\n              color: \"red\",\n              background: \"var(--Gray5)\",\n              textAlign: \"left\",\n              border: \"1px solid red\",\n              flexWrap: \"wrap\",\n            }}\n            className={styles.metrixTitle}\n          >\n            It seems that you did not set up your personal info. Please check\n            Diet Calculator page to set things right !\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps = Math.round((baseSteps + adjustment) * ageFactor);\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n","export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11]; // children\n  } else if (age <= 17) {\n    sleepRange = [8, 10]; // teens\n  } else if (age <= 64) {\n    sleepRange = [7, 9]; // adults\n  } else {\n    sleepRange = [7, 8]; // seniors\n  }\n\n  // adjust if activity level is high\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n"],"names":["getFormattedDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","calculateNominalBPAndPulse","age","weight","heartRate","Math","round","heartRateMin","heartRateMax","systolic","systolicMin","systolicMax","diastolic","hr","hrMin","hrMax","sys","sysMin","sysMax","dia","diaMin","diaMax","diastolicMin","diastolicMax","formatTimeTo12h","time24","hourStr","minuteStr","split","hour","parseInt","minute","ampm","formattedHour","toString","formattedMinute","_ref","calories","steps","sleep","free","totalPercent","balance","cal","st","sl","fre","data","name","value","backgroundColor","borderWidth","hoverOffset","sortedData","sort","a","b","Number","_jsxs","className","styles","children","_jsx","ResponsiveContainer","width","height","PieChart","fill","Tooltip","cursor","content","_ref2","active","payload","length","clsx","theme","style","color","background","borderRadius","Pie","startOffset","dataKey","outerRadius","innerRadius","map","entry","index","Cell","_user$username","_user$age","_user$height","_user$weight","_user$desiredWeight","_user$heart","dailyCalorieSummary","privateDispatch","totalSteps","user","usePrivate","updatedReminders","reminders","filter","reminder","done","frequency","sortedReminders","aH","aM","time","bH","bM","console","log","rem","useEffect","refreshDoneReminders","username","desiredWeight","heartMetrix","heart","heartMetrixCondition","heartMetrixLength","heartMetrixLastRecord","neededSteps","currentWeight","ageFactor","adjustment","baseSteps","weightDiff","abs","dailySteps","calculateDailySteps","neededSleep","calculateSleepHours","heartsMetrics","formatNumber","num","toLocaleString","fetchConsumedProductsForSpecificDay","date","condition","totalCalories","dailyCalorieIntake","caloriesPer","percentageCaloriesConsumed","caloriesLeft","remainingCalories","stepsPer","stepsLeft","sleepPer","sleepLeft","total","systolicR","diastolicR","pulse","heartCondition","globalPercentage","goalsPercentage","floor","totalGoalsPercentage","cont","leftSideCont","title","graphCont","Chart","graphicResult","badResult","mediumResult","goodResult","metrixCont","alerts","_Fragment","metrixTitle","remindersList","metrixTitleContent","text","doneBtn","onClick","id","reminderDone","find","r","_id","addEditReminder","_objectSpread","handleReminderDone","type","rightSideCont","metrixName","metrixQuantity","needed","textAlign","toFixed","border","flexWrap","sleepRange","arguments","undefined","min"],"sourceRoot":""}