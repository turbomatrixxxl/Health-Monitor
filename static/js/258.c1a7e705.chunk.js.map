{"version":3,"file":"static/js/258.c1a7e705.chunk.js","mappings":"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","sources":["webpack://health-monitor/./src/pages/DailyProgressPage/DailyProgressPage.module.css?310a","webpack://health-monitor/./src/components/Chart/Chart.module.css?6073","components/Chart/index.js","components/Chart/Chart.jsx","pages/DailyProgressPage/index.js","pages/DailyProgressPage/DailyProgressPage.jsx","Utils/calculateDailySteps.js","Utils/calculateNominalBPAndPulse.js","Utils/getFormattedDate.js","Utils/calculateSleepHours.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"DailyProgressPage_cont__qU3n8\",\"leftSideCont\":\"DailyProgressPage_leftSideCont__9j7vU\",\"rightSideCont\":\"DailyProgressPage_rightSideCont__JQ0AJ\",\"title\":\"DailyProgressPage_title__hqKcS\",\"graphCont\":\"DailyProgressPage_graphCont__kRD30\",\"graphicResult\":\"DailyProgressPage_graphicResult__GRR6B\",\"needed\":\"DailyProgressPage_needed__g38cj\",\"badResult\":\"DailyProgressPage_badResult__qJTQr\",\"mediumResult\":\"DailyProgressPage_mediumResult__J-76v\",\"goodResult\":\"DailyProgressPage_goodResult__rzxYK\",\"metrixCont\":\"DailyProgressPage_metrixCont__liScv\",\"alerts\":\"DailyProgressPage_alerts__5AHjJ\",\"metrixTitle\":\"DailyProgressPage_metrixTitle__yNyIH\",\"remindersList\":\"DailyProgressPage_remindersList__BQ6Ch\",\"doneBtn\":\"DailyProgressPage_doneBtn__z7T61\"};","// extracted by mini-css-extract-plugin\nexport default {\"chartContainer\":\"Chart_chartContainer__tWEJk\",\"chartCont\":\"Chart_chartCont__37H2i\",\"chartBalance\":\"Chart_chartBalance__mrmEK\",\"light\":\"Chart_light__5FNhq\",\"violet\":\"Chart_violet__sPvdB\",\"chart\":\"Chart_chart__KWi2v\",\"tooltipContainer\":\"Chart_tooltipContainer__WubHN\",\"tooltipNameContainer\":\"Chart_tooltipNameContainer__WWBhZ\",\"tooltipSumContainer\":\"Chart_tooltipSumContainer__YTjgt\"};","import Chart from \"./Chart\";\n\nexport default Chart;\n","\"use client\";\n\nimport React from \"react\";\nimport { PieChart, Pie, Tooltip, Cell, ResponsiveContainer } from \"recharts\";\nimport \"animate.css\";\n\n// import \"chart.js/auto\";\n\nimport clsx from \"clsx\";\n\nimport styles from \"./Chart.module.css\";\n\nexport default function Chart({ calories, steps, sleep, free, totalPercent }) {\n  const theme = \"dark\";\n\n  const balance = totalPercent;\n\n  let cal = calories || 0;\n  let st = steps || 0;\n  let sl = sleep || 0;\n  let fre = free || 0;\n\n  if (cal >= 100) {\n    cal = 100;\n  }\n\n  if (st >= 100) {\n    st = 100;\n  }\n\n  if (sl >= 100) {\n    sl = 100;\n  }\n\n  if (fre >= 100) {\n    fre = 100;\n  }\n\n  //  data\n  const data = [\n    cal > 0 && {\n      name: \"Daily Cal\",\n      value: cal,\n      backgroundColor: \"orange\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    st > 0 && {\n      name: \"Steps\",\n      value: st,\n      backgroundColor: \"#37e673\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    sl > 0 && {\n      name: \"Sleep\",\n      value: sl,\n      backgroundColor: \"blue\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    fre > 0 && {\n      name: \"Fre\",\n      value: fre,\n      backgroundColor: \"var(--Gray-5)\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n    {\n      name: \"There are no inputs for this period !\",\n      value: 0.0000000001,\n      backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n      borderWidth: 0,\n      hoverOffset: 5,\n    },\n  ];\n\n  const sortedData = data.sort((a, b) => {\n    let ap = Number(a.value);\n    // console.log(ap);\n\n    let bp = Number(b.value);\n    // console.log(b);\n\n    return ap - bp;\n  });\n\n  //   console.log(sortedData);\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      //   console.log(payload[0].payload.fill);\n\n      return (\n        <div\n          className={clsx(\n            styles.tooltipContainer,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <p\n            style={{ color: \"white\" }}\n            className={styles.tooltipNameContainer}\n          >{`${payload[0].name}`}</p>\n          <div className={styles.tooltipSumContainer}>\n            <div\n              style={{\n                background: `${payload[0].payload.fill}`,\n                borderRadius: \"2.5px\",\n              }}\n            ></div>\n            <span style={{ color: \"white\" }}>{Number(payload[0].value)} %</span>\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const textAnimationClasses =\n    \"animate__animated  animate__zoomIn animate__slow\";\n\n  return (\n    <div className={styles.chartContainer}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart fill=\"rgba(255, 255, 255, 0.6)\">\n          <Tooltip cursor={{ cursor: \"pointer\" }} content={CustomTooltip} />\n          <Pie\n            startOffset={0}\n            className={styles.chart}\n            data={sortedData}\n            dataKey=\"value\"\n            outerRadius={105}\n            innerRadius={85}\n            // paddingAngle={5}\n            fill=\"rgba(255, 255, 255, 0.6)\"\n          >\n            {data.map((entry, index) => {\n              //   console.log(entry.backgroundColor);\n              // console.log(entry.name);\n\n              return <Cell key={index} fill={entry.backgroundColor} />;\n            })}\n          </Pie>\n        </PieChart>\n      </ResponsiveContainer>\n\n      <div className={clsx(styles.chartCont, textAnimationClasses)}>\n        <p\n          style={{ color: \"orange\" }}\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Calories</span>\n          {balance ? Number(calories) : Number(0)}\n          <span>%</span>\n        </p>\n        <p\n          style={{ color: \"green\" }}\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Steps</span>\n          {balance ? Number(steps) : Number(0)}\n          <span>%</span>\n        </p>{\" \"}\n        <p\n          style={{ color: \"blue\" }}\n          className={clsx(\n            styles.chartBalance,\n            theme === \"light\" && styles.light,\n            theme === \"violet\" && styles.violet\n          )}\n        >\n          <span>Sleep</span>\n          {balance ? Number(sl) : Number(0)}\n          <span>%</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import DailyProgressPage from \"./DailyProgressPage\";\n\nexport default DailyProgressPage;\n","import React, { useEffect, useState } from \"react\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\n// import { useAuth } from \"../../hooks/useAuth\";\n\nimport { fetchConsumedProductsForSpecificDay } from \"../../redux/private/operationsPrivate\";\n\nimport getFormattedDate from \"../../Utils/getFormattedDate\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport calculateNominalBPAndPulse from \"../../Utils/calculateNominalBPAndPulse\";\n\nimport clsx from \"clsx\";\n\nimport styles from \"./DailyProgressPage.module.css\";\nimport Chart from \"../../components/Chart\";\n\nexport default function DailyProgressPage() {\n  const { dailyCalorieSummary, privateDispatch } = usePrivate();\n  //   console.log(\"dailyCalorieSummary :\", dailyCalorieSummary);\n\n  const reminders = [\n    { id: 1, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n    { id: 2, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n    { id: 3, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n    { id: 4, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n    { id: 5, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n    { id: 6, hour: \"9:00 AM\", text: \"Drink water\", done: false },\n  ];\n\n  const [rem, setRem] = useState(...[reminders]);\n  const updatedReminders = rem.filter((reminder) => !reminder.done);\n  // console.log(\"updatedReminders :\", updatedReminders.length);\n\n  // const { user: authUser } = useAuth();\n  // console.log(\"authUser:\", authUser);\n\n  const { user: privateUser } = usePrivate();\n  console.log(\"privateUser:\", privateUser);\n\n  const name = privateUser?.username ?? \"User\";\n  const age = privateUser?.age ?? 0;\n  const height = privateUser?.height ?? 0;\n  const weight = privateUser?.weight ?? 0;\n  const desiredWeight = privateUser?.desiredWeight ?? 0;\n\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\n  const neededSleep = calculateSleepHours(age);\n  const heartsMetrics = calculateNominalBPAndPulse(age, weight);\n  const {\n    heartRate,\n    heartRateMin,\n    heartRateMax,\n    systolic,\n    systolicMin,\n    systolicMax,\n    diastolic,\n    diastolicMin,\n    diastolicMax,\n  } = heartsMetrics;\n\n  useEffect(() => {\n    const today = getFormattedDate(); // Ensure the correct format YYYY-MM-DD\n    // console.log(\"Fetching data for date:\", today);\n\n    privateDispatch(fetchConsumedProductsForSpecificDay({ date: today })); // Pass as an object\n  }, [privateDispatch]);\n\n  function formatNumber(num) {\n    return num.toLocaleString(\"en-US\");\n  }\n\n  const condition =\n    (age || age !== 0) &&\n    (height || height !== 0) &&\n    (weight || weight !== 0) &&\n    (desiredWeight || desiredWeight !== 0);\n\n  const totalCalories = condition ? dailyCalorieSummary?.dailyCalorieIntake : 0;\n  // const caloriesPer = condition\n  //   ? dailyCalorieSummary?.percentageCaloriesConsumed\n  //   : 0;\n  const caloriesPer = 0;\n  const caloriesLeft = condition ? dailyCalorieSummary?.remainingCalories : 0;\n\n  const steps = 0;\n  const stepsPer = condition ? Math.round((100 * steps) / neededSteps) : 0;\n  const stepsLeft = condition ? neededSteps - steps : 0;\n  //   console.log(\"stepsLeft :\", stepsLeft);\n\n  const sleep = 0;\n  const sleepPer = condition ? Math.round((100 * sleep) / neededSleep) : 0;\n  const sleepLeft = condition ? neededSleep - sleep : 0;\n  //   console.log(\"over :\", sleepPer > 100);\n\n  const total = caloriesPer + stepsPer + sleepPer;\n\n  const systolicR = 0;\n  const diastolicR = 0;\n  const pulse = 0;\n  const heartCondition = systolicR + diastolicR === 0 || pulse === 0;\n  console.log(\"heartCondition :\", heartCondition);\n\n  function totalGoalsPercentage(cal, st, sl) {\n    let calories = cal ?? 0;\n    let steps = st ?? 0;\n    let sleep = sl ?? 0;\n\n    if (cal > 100) calories = 100;\n    if (sl > 100) sleep = 100;\n\n    const goalsPercentage = (calories + steps + sleep) / 3;\n\n    return Math.floor(goalsPercentage);\n  }\n\n  const globalPercentage = totalGoalsPercentage(\n    caloriesPer,\n    stepsPer,\n    sleepPer\n  );\n\n  //   console.log(\"globalPercentage :\", globalPercentage);\n\n  function handleReminderDone(id) {\n    // Update the reminders state to mark the reminder as done\n    const newReminders = rem.map((reminder) =>\n      reminder.id === id ? { ...reminder, done: true } : reminder\n    );\n\n    return setRem(newReminders);\n  }\n\n  let free = 100 - globalPercentage;\n\n  if (free < 0) {\n    free = 0;\n  }\n\n  // console.log(\"percent :\", caloriesPer, stepsPer, sleepPer, free);\n  console.log(\"sleepLeft === neededSleep :\", sleepLeft === neededSleep);\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Daily Progress</h1>\n        <div className={styles.graphCont}>\n          <Chart\n            calories={caloriesPer}\n            steps={stepsPer}\n            sleep={sleepPer}\n            free={free}\n            totalPercent={globalPercentage}\n          />\n          {total > 0 ? (\n            <p\n              className={clsx(\n                styles.graphicResult,\n                globalPercentage <= 50 && styles.badResult,\n                globalPercentage > 50 &&\n                  globalPercentage < 80 &&\n                  styles.mediumResult,\n                globalPercentage >= 80 && styles.goodResult\n              )}\n            >\n              You have reached {globalPercentage}% of your goals today\n            </p>\n          ) : (\n            <p\n              className={clsx(\n                styles.graphicResult,\n                globalPercentage <= 50 && styles.badResult,\n                globalPercentage > 50 &&\n                  globalPercentage < 80 &&\n                  styles.mediumResult,\n                globalPercentage >= 80 && styles.goodResult\n              )}\n            >\n              No entries for today ! Please, add some records !\n            </p>\n          )}\n        </div>\n        <div className={clsx(styles.metrixCont, styles.alerts)}>\n          {updatedReminders.length !== 0 ? (\n            <>\n              <h3 className={styles.metrixTitle}>Daily Reminders</h3>\n              <ul className={styles.remindersList}>\n                {rem.map(\n                  (reminder) =>\n                    !reminder?.done && (\n                      <li\n                        style={{ color: \"red\" }}\n                        className={styles.metrixTitle}\n                        key={`reminder-${reminder.id}`}\n                      >\n                        <span>{reminder?.hour}</span> -{\" \"}\n                        <span>{reminder?.text}</span>\n                        <button\n                          className={styles.doneBtn}\n                          onClick={() => handleReminderDone(reminder.id)}\n                          type=\"button\"\n                        >\n                          Done\n                        </button>\n                      </li>\n                    )\n                )}\n              </ul>\n            </>\n          ) : (\n            <p\n              style={{ color: \"red\" }}\n              className={clsx(styles.metrixTitle, styles.alerts)}\n            >\n              No Reminders set !!!\n            </p>\n          )}\n        </div>\n      </div>\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Daily Records</h1>\n        {condition ? (\n          <>\n            {/* Calories */}\n            <div className={styles.metrixCont}>\n              {totalCalories ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Calories to consume :\n                  </span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(totalCalories)} calories\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Calories consumed :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (caloriesPer === 0 ||\n                      caloriesPer > 100 ||\n                      caloriesPer <= 50) &&\n                      styles.badResult,\n                    caloriesPer < 80 &&\n                      caloriesLeft > 50 &&\n                      styles.mediumResult,\n                    caloriesPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {caloriesPer}%\n                </span>\n              </p>\n              {caloriesPer !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining calories :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (caloriesPer > 100 || caloriesPer <= 50) &&\n                        styles.badResult,\n                      caloriesPer < 80 &&\n                        caloriesLeft > 50 &&\n                        styles.mediumResult,\n                      caloriesPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {formatNumber(caloriesLeft)} calories\n                  </span>\n                </p>\n              ) : (\n                <p style={{ color: \"red\" }} className={styles.metrixTitle}>\n                  No entry for today ! Please, input meals entries !\n                </p>\n              )}\n            </div>\n\n            {/* Steps */}\n            <div className={styles.metrixCont}>\n              {neededSteps !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Steps to do :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(neededSteps)} steps\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Steps taken :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                    stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                    stepsPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {stepsPer}%\n                </span>\n              </p>\n              {stepsPer !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining steps to do :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                      stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                      stepsPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {formatNumber(stepsLeft)} steps\n                  </span>\n                </p>\n              ) : (\n                <p style={{ color: \"red\" }} className={styles.metrixTitle}>\n                  No steps recorded for today ! Please, walk more or input\n                  record !\n                </p>\n              )}\n            </div>\n\n            {/* Sleep */}\n            <div className={styles.metrixCont}>\n              {neededSleep !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Hours to sleep :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {neededSleep.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Hours slept :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (sleepPer === 0 || sleepPer <= 50 || sleepPer > 100) &&\n                      styles.badResult,\n                    sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                    sleepPer >= 80 && sleepPer < 100 && styles.goodResult\n                  )}\n                >\n                  {sleepPer}%\n                </span>\n              </p>\n              {sleepPer === 0 ? (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  No sleep recorded yet for today ! Please, input sleep record !\n                </p>\n              ) : sleepLeft > 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining hours to sleep :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (sleepPer === 0 || sleepPer <= 50) && styles.badResult,\n                      sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                      sleepPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {sleepLeft.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems overslept {Math.abs(sleepLeft)} hr. Please sleep less\n                  !\n                </p>\n              )}\n            </div>\n\n            {/* Heart Metrics */}\n            <div className={styles.metrixCont}>\n              {heartsMetrics !== 0 ? (\n                <>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal BP :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {systolic}/{diastolic} mm/Hg\n                    </span>\n                  </p>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal Pulse :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {heartRate} bpm\n                    </span>\n                  </p>\n                </>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n\n              {heartCondition ? (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that You did not recorded heart inputs for today !\n                  Please input datas !\n                </p>\n              ) : (\n                <>\n                  {systolicR >= systolicMin &&\n                  systolicR <= systolicMax &&\n                  diastolicR >= diastolicMin &&\n                  diastolicR <= diastolicMax ? (\n                    <p className={styles.metrixTitle}>\n                      <span className={styles.metrixName}>{name} BP :</span>\n                      <span\n                        className={clsx(\n                          styles.metrixQuantity,\n                          styles.goodResult\n                        )}\n                      >\n                        {systolicR}/{diastolicR} mm/Hg\n                      </span>\n                    </p>\n                  ) : (\n                    <p\n                      style={{\n                        color: \"red\",\n                        background: \"var(--Gray5)\",\n                        textAlign: \"left\",\n                      }}\n                      className={styles.metrixTitle}\n                    >\n                      It seems that your blood pressure is too{\" \"}\n                      {diastolicR < diastolicMin || systolicR < systolicMin\n                        ? \"low\"\n                        : diastolicR > diastolicMax || systolicR > systolicMax\n                        ? \"high\"\n                        : \"\"}\n                      ! Please consult doctor !\n                    </p>\n                  )}\n\n                  {pulse >= heartRateMin && pulse <= heartRateMax ? (\n                    <p className={styles.metrixTitle}>\n                      <span className={styles.metrixName}>{name} Pulse :</span>\n                      <span\n                        className={clsx(\n                          styles.metrixQuantity,\n                          styles.goodResult\n                        )}\n                      >\n                        {pulse} bpm\n                      </span>\n                    </p>\n                  ) : (\n                    <p\n                      style={{\n                        color: \"red\",\n                        background: \"var(--Gray5)\",\n                        textAlign: \"left\",\n                      }}\n                      className={styles.metrixTitle}\n                    >\n                      It seems that your pulse is too{\" \"}\n                      {pulse < heartRateMin\n                        ? \"low\"\n                        : pulse > heartRateMax\n                        ? \"high\"\n                        : \"\"}\n                      ! Please consult doctor !\n                    </p>\n                  )}\n                </>\n              )}\n            </div>\n          </>\n        ) : (\n          <p\n            style={{\n              color: \"red\",\n              background: \"var(--Gray5)\",\n              textAlign: \"left\",\n              border: \"1px solid red\",\n            }}\n            className={styles.metrixTitle}\n          >\n            It seems that you did not set up your personal info. Please check\n            Diet Calculator page to set things right !\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps = Math.round((baseSteps + adjustment) * ageFactor);\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n","/**\n * Calculate nominal heart rate and blood pressure with age- and weight-adjusted limits\n * @param {number} age - age in years\n * @param {number} weight - weight in kg\n * @returns {object} - { heartRate, heartRateMin, heartRateMax, systolic, systolicMin, systolicMax, diastolic, diastolicMin, diastolicMax }\n */\nexport default function calculateBPAndPulse(age, weight) {\n  if (!age) {\n    return 0;\n  }\n\n  // Puls nominal: 70 ± 10, ajustat cu varsta\n  const heartRate = Math.round(70 + (age - 30) * 0.3);\n  const heartRateMin = Math.round(heartRate - 10);\n  const heartRateMax = Math.round(heartRate + 10);\n\n  // Tensiune arterială nominală: sistolic 110 ± 10, diastolic 70 ± 5, ajustate cu vârsta\n  const systolic = Math.round(110 + age * 0.5);\n  const systolicMin = Math.round(systolic - 10);\n  const systolicMax = Math.round(systolic + 10);\n\n  const diastolic = Math.round(70 + age * 0.2);\n  const diastolicMin = Math.round(diastolic - 5);\n  const diastolicMax = Math.round(diastolic + 5);\n\n  // Ajustare ușoară în funcție de greutate\n  let hr = heartRate,\n    hrMin = heartRateMin,\n    hrMax = heartRateMax;\n  let sys = systolic,\n    sysMin = systolicMin,\n    sysMax = systolicMax;\n  let dia = diastolic,\n    diaMin = diastolicMin,\n    diaMax = diastolicMax;\n\n  if (weight) {\n    if (weight > 80) {\n      hr += 2;\n      hrMin += 2;\n      hrMax += 2;\n      sys += 3;\n      sysMin += 3;\n      sysMax += 3;\n      dia += 2;\n      diaMin += 2;\n      diaMax += 2;\n    } else if (weight < 60) {\n      hr -= 2;\n      hrMin -= 2;\n      hrMax -= 2;\n      sys -= 3;\n      sysMin -= 3;\n      sysMax -= 3;\n      dia -= 2;\n      diaMin -= 2;\n      diaMax -= 2;\n    }\n  }\n\n  return {\n    heartRate: hr,\n    heartRateMin: hrMin,\n    heartRateMax: hrMax,\n    systolic: sys,\n    systolicMin: sysMin,\n    systolicMax: sysMax,\n    diastolic: dia,\n    diastolicMin: diaMin,\n    diastolicMax: diaMax,\n  };\n}\n\n// const noAge = calculateBPAndPulse();\n// console.log(\"noAge :\", noAge);\n","export default function getFormattedDate() {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Add leading zero if needed\n  const day = String(today.getDate()).padStart(2, \"0\"); // Add leading zero if needed\n  return `${year}-${month}-${day}`; // Return in YYYY-MM-DD format\n}\n","export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11]; // children\n  } else if (age <= 17) {\n    sleepRange = [8, 10]; // teens\n  } else if (age <= 64) {\n    sleepRange = [7, 9]; // adults\n  } else {\n    sleepRange = [7, 8]; // seniors\n  }\n\n  // adjust if activity level is high\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n"],"names":["_ref","calories","steps","sleep","free","totalPercent","balance","cal","st","sl","fre","data","name","value","backgroundColor","borderWidth","hoverOffset","sortedData","sort","a","b","Number","_jsxs","className","styles","children","_jsx","ResponsiveContainer","width","height","PieChart","fill","Tooltip","cursor","content","_ref2","active","payload","length","clsx","theme","style","color","concat","background","borderRadius","Pie","startOffset","dataKey","outerRadius","innerRadius","map","entry","index","Cell","_privateUser$age","_privateUser$height","_privateUser$weight","_privateUser$desiredW","dailyCalorieSummary","privateDispatch","usePrivate","rem","setRem","useState","id","hour","text","done","updatedReminders","filter","reminder","user","privateUser","console","log","username","age","weight","desiredWeight","neededSteps","currentWeight","ageFactor","adjustment","baseSteps","weightDiff","Math","abs","dailySteps","round","calculateDailySteps","neededSleep","calculateSleepHours","heartsMetrics","heartRate","heartRateMin","heartRateMax","systolic","systolicMin","systolicMax","diastolic","hr","hrMin","hrMax","sys","sysMin","sysMax","dia","diaMin","diaMax","diastolicMin","diastolicMax","calculateNominalBPAndPulse","formatNumber","num","toLocaleString","useEffect","today","getFormattedDate","fetchConsumedProductsForSpecificDay","date","condition","totalCalories","dailyCalorieIntake","caloriesLeft","remainingCalories","stepsPer","stepsLeft","sleepPer","sleepLeft","total","heartCondition","systolicR","globalPercentage","goalsPercentage","floor","totalGoalsPercentage","cont","leftSideCont","title","graphCont","Chart","graphicResult","badResult","mediumResult","goodResult","metrixCont","alerts","_Fragment","metrixTitle","remindersList","doneBtn","onClick","newReminders","_objectSpread","handleReminderDone","type","rightSideCont","metrixName","metrixQuantity","needed","textAlign","caloriesPer","toFixed","border","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","sleepRange","arguments","undefined","min"],"sourceRoot":""}