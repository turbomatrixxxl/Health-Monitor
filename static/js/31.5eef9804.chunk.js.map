{"version":3,"file":"static/js/31.5eef9804.chunk.js","mappings":"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","sources":["webpack://health-monitor/./src/pages/SleepPage/SleepPage.module.css?0cd1","pages/SleepPage/index.js","pages/SleepPage/SleepPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"SleepPage_cont__oT8Gs\",\"leftSideCont\":\"SleepPage_leftSideCont__Q3HmQ\",\"rightSideCont\":\"SleepPage_rightSideCont__ykrwn\",\"title\":\"SleepPage_title__K9yPp\",\"graphCont\":\"SleepPage_graphCont__zsvaV\",\"rightSideContTitle\":\"SleepPage_rightSideContTitle__U5w9+\",\"rightSideDate\":\"SleepPage_rightSideDate__IODHw\",\"dateWrapper\":\"SleepPage_dateWrapper__dHRbg\",\"paramInput\":\"SleepPage_paramInput__iX7O3\",\"fromToCont\":\"SleepPage_fromToCont__IbmMk\",\"fromToTitle\":\"SleepPage_fromToTitle__q+7uz\",\"from\":\"SleepPage_from__oIAUQ\",\"to\":\"SleepPage_to__4PxPX\",\"rem\":\"SleepPage_rem__8xRTe\",\"lineRowCont\":\"SleepPage_lineRowCont__I0Gdh\",\"lineRow\":\"SleepPage_lineRow__1PnEF\",\"timeInputGroup\":\"SleepPage_timeInputGroup__JaH6e\",\"removeBtn\":\"SleepPage_removeBtn__apcvC\",\"dash\":\"SleepPage_dash__NFLyC\",\"timeInput\":\"SleepPage_timeInput__p9RMX\",\"twoDots\":\"SleepPage_twoDots__wLyFl\",\"ampmSelect\":\"SleepPage_ampmSelect__mwOC4\",\"addSleepCont\":\"SleepPage_addSleepCont__iDnBy\",\"addBtn\":\"SleepPage_addBtn__3yzVd\",\"adviceCont\":\"SleepPage_adviceCont__JvZ8D\"};","import SleepPage from \"./SleepPage\";\n\nexport default SleepPage;\n","import React, { useState } from \"react\";\nimport styles from \"./SleepPage.module.css\";\n\nexport default function SleepPage() {\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  // o linie inițială\n  const [lines, setLines] = useState([\n    {\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    },\n  ]);\n\n  // helper pt formatare 2 cifre\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\n\n  // funcție pentru actualizarea unei valori într-o linie\n  const updateLine = (index, field, value) => {\n    let val = parseInt(value, 10);\n\n    if ([\"fromHour\", \"tillHour\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 11) val = 11;\n      value = formatNumber(val);\n    }\n\n    if ([\"fromMinute\", \"tillMinute\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 55) val = 55;\n      // rotunjim la multiplu de 5\n      val = Math.round(val / 5) * 5;\n      value = formatNumber(val);\n    }\n\n    const newLines = [...lines];\n    newLines[index][field] = value;\n    setLines(newLines);\n  };\n\n  // adaugă o linie nouă\n  const addLine = () => {\n    setLines([\n      ...lines,\n      {\n        fromHour: \"00\",\n        fromMinute: \"00\",\n        fromAmPm: \"AM\",\n        tillHour: \"00\",\n        tillMinute: \"00\",\n        tillAmPm: \"AM\",\n      },\n    ]);\n  };\n\n  // șterge o linie după index\n  const removeLine = (index) => {\n    setLines(lines.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Sleep</h1>\n        <div className={styles.graphCont}>Graphic container</div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <p className={styles.rightSideContTitle}>Add sleep</p>\n\n        {/* data */}\n        <div className={styles.rightSideDate}>\n          <div className={styles.dateWrapper}>\n            <input\n              type=\"date\"\n              value={filterDate ?? new Date().toISOString().split(\"T\")[0]}\n              onChange={(e) => setFilterDate(e.target.value)}\n              className={styles.paramInput}\n            />\n          </div>\n          <p className={styles.rightSideDateP}>Choose date</p>\n        </div>\n\n        {/* from - till lines */}\n        <div className={styles.fromToCont}>\n          <div className={styles.fromToTitle}>\n            <p className={styles.from}>From</p>\n            <p className={styles.rem}>Rem</p>\n            <p className={styles.to}>Till</p>\n          </div>\n\n          <div className={styles.lineRowCont}>\n            {lines.map((line, idx) => (\n              <div key={idx} className={styles.lineRow}>\n                {/* From */}\n                <div className={styles.timeInputGroup}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"11\"\n                    step=\"1\"\n                    value={line.fromHour}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromHour\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <span className={styles.twoDots}>:</span>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"55\"\n                    step=\"5\"\n                    value={line.fromMinute}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromMinute\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <select\n                    value={line.fromAmPm}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromAmPm\", e.target.value)\n                    }\n                    className={styles.ampmSelect}\n                  >\n                    <option value=\"AM\">AM</option>\n                    <option value=\"PM\">PM</option>\n                  </select>\n                </div>\n                {/* buton remove */}\n                {lines.length > 1 ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => removeLine(idx)}\n                    className={styles.removeBtn}\n                  >\n                    ✕\n                  </button>\n                ) : (\n                  <span className={styles.dash}>–</span>\n                )}\n                {/* Till */}\n                <div className={styles.timeInputGroup}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"11\"\n                    step=\"1\"\n                    value={line.tillHour}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillHour\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <span className={styles.twoDots}>:</span>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"55\"\n                    step=\"5\"\n                    value={line.tillMinute}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillMinute\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <select\n                    value={line.tillAmPm}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillAmPm\", e.target.value)\n                    }\n                    className={styles.ampmSelect}\n                  >\n                    <option value=\"AM\">AM</option>\n                    <option value=\"PM\">PM</option>\n                  </select>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* add line */}\n        <div className={styles.addSleepCont}>\n          <p>Add period</p>\n          <button onClick={addLine} type=\"button\" className={styles.addBtn}>\n            Add +\n          </button>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          <p className={styles.advicep}>\n            Try to get at least 7 hours of sleep .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["filterDate","setFilterDate","useState","Date","toISOString","split","lines","setLines","fromHour","fromMinute","fromAmPm","tillHour","tillMinute","tillAmPm","formatNumber","num","String","padStart","updateLine","index","field","value","val","parseInt","includes","isNaN","Math","round","newLines","_jsxs","className","styles","cont","children","leftSideCont","_jsx","title","graphCont","rightSideCont","rightSideContTitle","rightSideDate","dateWrapper","type","onChange","e","target","paramInput","rightSideDateP","fromToCont","fromToTitle","from","rem","to","lineRowCont","map","line","idx","lineRow","timeInputGroup","min","max","step","timeInput","twoDots","ampmSelect","length","onClick","removeLine","filter","_","i","removeBtn","dash","addSleepCont","addLine","addBtn","adviceCont","adviceTitle","advicep"],"sourceRoot":""}