{"version":3,"file":"static/js/31.b897f5e6.chunk.js","mappings":"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","sources":["webpack://health-monitor/./src/pages/SleepPage/SleepPage.module.css?0cd1","pages/SleepPage/index.js","pages/SleepPage/SleepPage.jsx","Utils/calculateSleepHours.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"SleepPage_cont__oT8Gs\",\"leftSideCont\":\"SleepPage_leftSideCont__Q3HmQ\",\"rightSideCont\":\"SleepPage_rightSideCont__ykrwn\",\"title\":\"SleepPage_title__K9yPp\",\"graphCont\":\"SleepPage_graphCont__zsvaV\",\"rightSideContTitle\":\"SleepPage_rightSideContTitle__U5w9+\",\"rightSideDate\":\"SleepPage_rightSideDate__IODHw\",\"dateWrapper\":\"SleepPage_dateWrapper__dHRbg\",\"paramInput\":\"SleepPage_paramInput__iX7O3\",\"fromToCont\":\"SleepPage_fromToCont__IbmMk\",\"fromToTitle\":\"SleepPage_fromToTitle__q+7uz\",\"from\":\"SleepPage_from__oIAUQ\",\"to\":\"SleepPage_to__4PxPX\",\"rem\":\"SleepPage_rem__8xRTe\",\"lineRowCont\":\"SleepPage_lineRowCont__I0Gdh\",\"lineRow\":\"SleepPage_lineRow__1PnEF\",\"timeInputGroup\":\"SleepPage_timeInputGroup__JaH6e\",\"removeBtn\":\"SleepPage_removeBtn__apcvC\",\"dash\":\"SleepPage_dash__NFLyC\",\"timeInput\":\"SleepPage_timeInput__p9RMX\",\"twoDots\":\"SleepPage_twoDots__wLyFl\",\"ampmSelect\":\"SleepPage_ampmSelect__mwOC4\",\"addSleepCont\":\"SleepPage_addSleepCont__iDnBy\",\"addBtn\":\"SleepPage_addBtn__3yzVd\",\"adviceCont\":\"SleepPage_adviceCont__JvZ8D\"};","import SleepPage from \"./SleepPage\";\n\nexport default SleepPage;\n","import React, { useState } from \"react\";\n\nimport { useAuth } from \"../../hooks/useAuth\";\n\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\n\nimport styles from \"./SleepPage.module.css\";\n\nexport default function SleepPage() {\n  const { user } = useAuth();\n  const age = user?.age ?? 0;\n\n  const sleepHours = age ? calculateSleepHours(age) : 0;\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  // o linie inițială\n  const [lines, setLines] = useState([\n    {\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    },\n  ]);\n\n  // helper pt formatare 2 cifre\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\n\n  // funcție pentru actualizarea unei valori într-o linie\n  const updateLine = (index, field, value) => {\n    let val = parseInt(value, 10);\n\n    if ([\"fromHour\", \"tillHour\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 11) val = 11;\n      value = formatNumber(val);\n    }\n\n    if ([\"fromMinute\", \"tillMinute\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 59) val = 59;\n      //   // rotunjim la multiplu de 5\n      //   val = Math.ceil(val / 5) * 5;\n      value = formatNumber(val);\n    }\n\n    const newLines = [...lines];\n    newLines[index][field] = value;\n    setLines(newLines);\n  };\n\n  // adaugă o linie nouă\n  const addLine = () => {\n    setLines([\n      ...lines,\n      {\n        fromHour: \"00\",\n        fromMinute: \"00\",\n        fromAmPm: \"AM\",\n        tillHour: \"00\",\n        tillMinute: \"00\",\n        tillAmPm: \"AM\",\n      },\n    ]);\n  };\n\n  // șterge o linie după index\n  const removeLine = (index) => {\n    setLines(lines.filter((_, i) => i !== index));\n  };\n\n  const resetLines = () => {\n    setLines([\n      {\n        fromHour: \"00\",\n        fromMinute: \"00\",\n        fromAmPm: \"AM\",\n        tillHour: \"00\",\n        tillMinute: \"00\",\n        tillAmPm: \"AM\",\n      },\n    ]);\n  };\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Sleep statistics</h1>\n        <div className={styles.graphCont}>Graphic container</div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Add sleep</h1>\n\n        {/* data */}\n        <div className={styles.rightSideDate}>\n          <div className={styles.dateWrapper}>\n            <input\n              type=\"date\"\n              value={filterDate ?? new Date().toISOString().split(\"T\")[0]}\n              onChange={(e) => setFilterDate(e.target.value)}\n              className={styles.paramInput}\n            />\n          </div>\n          <p className={styles.rightSideDateP}>Choose date</p>\n        </div>\n\n        {/* from - till lines */}\n        <div className={styles.fromToCont}>\n          <div className={styles.fromToTitle}>\n            <p className={styles.from}>From</p>\n            <p className={styles.rem}>\n              {lines.length > 1 ? \"Delete\" : \"Reset\"}\n            </p>\n            <p className={styles.to}>Till</p>\n          </div>\n\n          <div className={styles.lineRowCont}>\n            {lines.map((line, idx) => (\n              <div key={`line-${idx}`} className={styles.lineRow}>\n                {/* From */}\n                <div className={styles.timeInputGroup}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"11\"\n                    step=\"1\"\n                    value={line.fromHour}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromHour\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <span className={styles.twoDots}>:</span>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"55\"\n                    step=\"1\"\n                    value={line.fromMinute}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromMinute\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <select\n                    value={line.fromAmPm}\n                    onChange={(e) =>\n                      updateLine(idx, \"fromAmPm\", e.target.value)\n                    }\n                    className={styles.ampmSelect}\n                  >\n                    <option value=\"AM\">AM</option>\n                    <option value=\"PM\">PM</option>\n                  </select>\n                </div>\n                {/* buton remove */}\n                {lines.length > 1 ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => removeLine(idx)}\n                    className={styles.removeBtn}\n                  >\n                    ✕\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={() => resetLines()}\n                    className={styles.removeBtn}\n                  >\n                    ✕\n                  </button>\n                )}\n                {/* Till */}\n                <div className={styles.timeInputGroup}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"11\"\n                    step=\"1\"\n                    value={line.tillHour}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillHour\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <span className={styles.twoDots}>:</span>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"55\"\n                    step=\"1\"\n                    value={line.tillMinute}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillMinute\", e.target.value)\n                    }\n                    className={styles.timeInput}\n                  />\n                  <select\n                    value={line.tillAmPm}\n                    onChange={(e) =>\n                      updateLine(idx, \"tillAmPm\", e.target.value)\n                    }\n                    className={styles.ampmSelect}\n                  >\n                    <option value=\"AM\">AM</option>\n                    <option value=\"PM\">PM</option>\n                  </select>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* add line */}\n        <div className={styles.addSleepCont}>\n          <p>Add period</p>\n          <button onClick={addLine} type=\"button\" className={styles.addBtn}>\n            Add +\n          </button>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {age !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {sleepHours} hours of sleep .\n            </p>\n          ) : (\n            <p\n              style={{ color: \"red\", lineHeight: \"inherit\" }}\n              className={styles.advicep}\n            >\n              It seems that you did not set up your personal info. Please check\n              Diet Calculator page to set things right !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11]; // children\n  } else if (age <= 17) {\n    sleepRange = [8, 10]; // teens\n  } else if (age <= 64) {\n    sleepRange = [7, 9]; // adults\n  } else {\n    sleepRange = [7, 8]; // seniors\n  }\n\n  // adjust if activity level is high\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n"],"names":["_user$age","user","useAuth","age","sleepHours","calculateSleepHours","filterDate","setFilterDate","useState","Date","toISOString","split","lines","setLines","fromHour","fromMinute","fromAmPm","tillHour","tillMinute","tillAmPm","formatNumber","num","String","padStart","updateLine","index","field","value","val","parseInt","includes","isNaN","newLines","_jsxs","className","styles","cont","children","leftSideCont","_jsx","title","graphCont","rightSideCont","rightSideDate","dateWrapper","type","onChange","e","target","paramInput","rightSideDateP","fromToCont","fromToTitle","from","rem","length","to","lineRowCont","map","line","idx","lineRow","timeInputGroup","min","max","step","timeInput","twoDots","ampmSelect","onClick","removeLine","filter","_","i","removeBtn","concat","addSleepCont","addLine","addBtn","adviceCont","adviceTitle","advicep","style","color","lineHeight","sleepRange","arguments","undefined"],"sourceRoot":""}