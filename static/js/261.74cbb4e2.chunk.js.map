{"version":3,"file":"static/js/261.74cbb4e2.chunk.js","mappings":"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","sources":["webpack://health-monitor/./src/pages/SleepPage/SleepPage.module.css?0cd1","pages/SleepPage/index.js","pages/SleepPage/SleepPage.jsx","Utils/calculateIntervalSleeptHours.js","Utils/calculateSleepHours.js","Utils/formatDate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"SleepPage_cont__oT8Gs\",\"leftSideCont\":\"SleepPage_leftSideCont__Q3HmQ\",\"rightSideCont\":\"SleepPage_rightSideCont__ykrwn\",\"title\":\"SleepPage_title__K9yPp\",\"graphCont\":\"SleepPage_graphCont__zsvaV\",\"rightSideUpCont\":\"SleepPage_rightSideUpCont__nUzva\",\"rightSideContTitle\":\"SleepPage_rightSideContTitle__U5w9+\",\"rightSideDate\":\"SleepPage_rightSideDate__IODHw\",\"dateWrapper\":\"SleepPage_dateWrapper__dHRbg\",\"paramInput\":\"SleepPage_paramInput__iX7O3\",\"fromToCont\":\"SleepPage_fromToCont__IbmMk\",\"fromToTitle\":\"SleepPage_fromToTitle__q+7uz\",\"from\":\"SleepPage_from__oIAUQ\",\"to\":\"SleepPage_to__4PxPX\",\"rem\":\"SleepPage_rem__8xRTe\",\"lineRowCont\":\"SleepPage_lineRowCont__I0Gdh\",\"lineRow\":\"SleepPage_lineRow__1PnEF\",\"timeInputGroup\":\"SleepPage_timeInputGroup__JaH6e\",\"removeBtn\":\"SleepPage_removeBtn__apcvC\",\"dash\":\"SleepPage_dash__NFLyC\",\"timeInput\":\"SleepPage_timeInput__p9RMX\",\"twoDots\":\"SleepPage_twoDots__wLyFl\",\"ampmSelect\":\"SleepPage_ampmSelect__mwOC4\",\"addSleepCont\":\"SleepPage_addSleepCont__iDnBy\",\"addBtn\":\"SleepPage_addBtn__3yzVd\",\"saveBtn\":\"SleepPage_saveBtn__WPyMK\",\"adviceCont\":\"SleepPage_adviceCont__JvZ8D\"};","import SleepPage from \"./SleepPage\";\n\nexport default SleepPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport calculateIntervalSleeptHours from \"../../Utils/calculateIntervalSleeptHours\";\nimport formatDate from \"../../Utils/formatDate\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { setSleepDailyRegistrations } from \"../../redux/private/operationsPrivate\";\n\nimport styles from \"./SleepPage.module.css\";\n\nexport default function SleepPage() {\n  const { user, privateDispatch } = usePrivate();\n\n  const userConditions =\n    user?.age !== 0 &&\n    user?.height !== 0 &&\n    user?.weight !== 0 &&\n    user?.desiredWeight !== 0;\n\n  const age = user?.age ?? 0;\n\n  const sleep = useMemo(() => user?.sleep || [], [user?.sleep]);\n\n  const sleepHours = userConditions ? calculateSleepHours(age) : 0;\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  const now = useMemo(() => new Date(), []);\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\n\n  const isTodaycondition = filterDate === today;\n\n  const lines = useMemo(\n    () =>\n      sleep.length > 0\n        ? [...sleep]\n        : [\n            {\n              date: now,\n              interval: [\n                {\n                  fromHour: \"00\",\n                  fromMinute: \"00\",\n                  fromAmPm: \"AM\",\n                  tillHour: \"00\",\n                  tillMinute: \"00\",\n                  tillAmPm: \"AM\",\n                },\n              ],\n            },\n          ],\n    [sleep, now]\n  );\n\n  const filteredLine = lines.find(\n    (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n  );\n\n  const [interval, setInterval] = useState([\n    {\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    },\n  ]);\n\n  useEffect(() => {\n    if (filteredLine) {\n      const sorted = [...filteredLine.interval].sort(\n        (a, b) =>\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\n      );\n      setInterval(sorted);\n    }\n  }, [filteredLine]);\n\n  useEffect(() => {\n    const line = lines.find(\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n    );\n\n    if (line) {\n      const sorted = [...line.interval].sort(\n        (a, b) =>\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\n      );\n      setInterval(sorted);\n    } else {\n      setInterval([\n        {\n          fromHour: \"00\",\n          fromMinute: \"00\",\n          fromAmPm: \"AM\",\n          tillHour: \"00\",\n          tillMinute: \"00\",\n          tillAmPm: \"AM\",\n        },\n      ]);\n    }\n  }, [filterDate, sleep, lines]);\n\n  const totalSleptHours = interval?.reduce((acc, int) => {\n    acc =\n      acc +\n      calculateIntervalSleeptHours(\n        int.fromHour,\n        int.fromMinute,\n        int.fromAmPm,\n        int.tillHour,\n        int.tillMinute,\n        int.tillAmPm\n      );\n    return acc;\n  }, 0);\n\n  const lastInterval = interval[interval.length - 1];\n\n  const emptyLineCondition = (line) =>\n    Number(String(line.fromHour).trim()) +\n      Number(String(line.fromMinute).trim()) +\n      Number(String(line.tillHour).trim()) +\n      Number(String(line.tillMinute).trim()) ===\n      0 &&\n    String(line.fromAmPm).trim().toUpperCase() === \"AM\" &&\n    String(line.tillAmPm).trim().toUpperCase() === \"AM\";\n\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\n\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\n\n  function toMinutes(hour, minute, ampm) {\n    let h = parseInt(hour, 10) % 12;\n    if (ampm === \"PM\") h += 12;\n    return h * 60 + parseInt(minute, 10);\n  }\n\n  function overlaps(newInt, allIntervals, idx) {\n    const newFrom = toMinutes(\n      newInt.fromHour,\n      newInt.fromMinute,\n      newInt.fromAmPm\n    );\n    const newTill = toMinutes(\n      newInt.tillHour,\n      newInt.tillMinute,\n      newInt.tillAmPm\n    );\n\n    for (let i = 0; i < allIntervals.length; i++) {\n      if (i === idx) continue;\n      const int = allIntervals[i];\n      const from = toMinutes(int.fromHour, int.fromMinute, int.fromAmPm);\n      const till = toMinutes(int.tillHour, int.tillMinute, int.tillAmPm);\n\n      if (newFrom < till && newTill > from) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\n    let val = parseInt(value, 10);\n\n    if ([\"fromHour\", \"tillHour\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 11) val = 11;\n      value = formatNumber(val);\n    }\n\n    if ([\"fromMinute\", \"tillMinute\"].includes(field)) {\n      if (isNaN(val) || val < 0) val = 0;\n      if (val > 59) val = 59;\n      value = formatNumber(val);\n    }\n\n    const newInterval = [...interval];\n    const updated = { ...newInterval[intervalIdx], [field]: value };\n\n    // verificăm dacă se suprapune\n    if (overlaps(updated, newInterval, intervalIdx)) {\n      toast.error(\"Intervalele de somn nu trebuie să se suprapună!\");\n      return;\n    }\n\n    newInterval[intervalIdx] = updated;\n    setInterval(newInterval);\n  };\n\n  const addFilteredLineNewInterval = () => {\n    const newInterval = [...interval] || [];\n    newInterval.push({\n      fromHour: \"00\",\n      fromMinute: \"00\",\n      fromAmPm: \"AM\",\n      tillHour: \"00\",\n      tillMinute: \"00\",\n      tillAmPm: \"AM\",\n    });\n    setInterval(newInterval);\n  };\n\n  const removeFilteredLineInterval = (intervalIdx) => {\n    const newInterval = interval.filter((_, i) => i !== intervalIdx);\n    setInterval(newInterval);\n  };\n\n  const resetFilteredLinesInterval = () => {\n    setInterval([\n      {\n        fromHour: \"00\",\n        fromMinute: \"00\",\n        fromAmPm: \"AM\",\n        tillHour: \"00\",\n        tillMinute: \"00\",\n        tillAmPm: \"AM\",\n      },\n    ]);\n  };\n\n  function handleSave() {\n    const lastIntervalIndex = interval.length - 1;\n    const intervalToSave = emptyLastIntervalLineCondition\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\n      : [...interval];\n    privateDispatch(\n      setSleepDailyRegistrations({ date: filterDate, interval: intervalToSave })\n    );\n  }\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Sleep statistics</h1>\n          <div className={styles.graphCont}>Graphic container</div>\n        </div>\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Total sleep hours</h2>\n          {totalSleptHours !== 0 ? (\n            <p\n              style={{\n                fontSize: \"clamp(11px, 1.5vw, 14px)\",\n                color:\n                  totalSleptHours < sleepHours * 0.6 ||\n                  totalSleptHours > sleepHours * 1.2\n                    ? \"red\"\n                    : undefined,\n              }}\n              className={styles.advicep}\n            >\n              <span>\n                You have {totalSleptHours}{\" \"}\n                {totalSleptHours === 1 ? \"hour\" : \"hours\"} of sleep for{\" \"}\n              </span>{\" \"}\n              <span style={{ marginLeft: \"2px\" }}>\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}\n              </span>\n            </p>\n          ) : (\n            <p style={{ color: \"red\" }} className={styles.advicep}>\n              No sleep records for{\" \"}\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Add sleep</h1>\n          {/* data */}\n          <div className={styles.rightSideDate}>\n            <div className={styles.dateWrapper}>\n              <input\n                max={today}\n                type=\"date\"\n                value={filterDate ?? today}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className={styles.paramInput}\n              />\n            </div>\n            <p className={styles.rightSideDateP}>Choose date</p>\n          </div>\n\n          <div className={styles.fromToCont}>\n            <div className={styles.fromToTitle}>\n              <p className={styles.from}>From</p>\n              <p className={styles.rem}>\n                {lines.length > 1 ? \"Delete\" : \"Reset\"}\n              </p>\n              <p className={styles.to}>Till</p>\n            </div>\n            <div className={styles.lineRowCont}>\n              {interval.map((line, idx) => (\n                <div key={`line-${idx}`} className={styles.lineRow}>\n                  <div className={styles.timeInputGroup}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"11\"\n                      step=\"1\"\n                      value={line.fromHour}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromHour\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <span className={styles.twoDots}>:</span>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"55\"\n                      step=\"1\"\n                      value={line.fromMinute}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromMinute\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <select\n                      value={line.fromAmPm}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"fromAmPm\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option value=\"AM\">AM</option>\n                      <option value=\"PM\">PM</option>\n                    </select>\n                  </div>\n                  {interval.length > 1 ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFilteredLineInterval(idx)}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={() => resetFilteredLinesInterval()}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  )}\n                  <div className={styles.timeInputGroup}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"11\"\n                      step=\"1\"\n                      value={line.tillHour}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillHour\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <span className={styles.twoDots}>:</span>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"55\"\n                      step=\"1\"\n                      value={line.tillMinute}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillMinute\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.timeInput}\n                    />\n                    <select\n                      value={line.tillAmPm}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"tillAmPm\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option value=\"AM\">AM</option>\n                      <option value=\"PM\">PM</option>\n                    </select>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className={styles.addSleepCont}>\n            <p>Add sleep period</p>\n            <button\n              onClick={() => {\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\n              }}\n              type=\"button\"\n              className={styles.addBtn}\n            >\n              Add +\n            </button>\n\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\n              interval.length > 1) && (\n              <button\n                onClick={handleSave}\n                type=\"button\"\n                className={styles.saveBtn}\n              >\n                Save\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {age !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {sleepHours} hours of sleep .\n            </p>\n          ) : (\n            <p\n              style={{ color: \"red\", lineHeight: \"inherit\" }}\n              className={styles.advicep}\n            >\n              It seems that you did not set up your personal info. Please check\n              Diet Calculator page to set things right !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default function calculateIntervalSleeptHours(\n  fromHour,\n  fromMinute,\n  fromAmPm,\n  toHour,\n  toMinute,\n  toAmPm\n) {\n  // normalize input (string -> number, trim)\n  const fH = Number(String(fromHour).trim());\n  //   console.log(\"fH :\", fH);\n\n  const fM = Number(String(fromMinute).trim());\n  const tH = Number(String(toHour).trim());\n  const tM = Number(String(toMinute).trim());\n  const fAP = String(fromAmPm || \"\")\n    .trim()\n    .toUpperCase();\n  //   console.log(\"fAP :\", fAP);\n\n  const tAP = String(toAmPm || \"\")\n    .trim()\n    .toUpperCase();\n\n  // validate\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\n\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\n  // 12 AM -> 0, 12 PM -> 12\n  let fromH24 = fH % 12;\n  if (fAP === \"PM\") fromH24 += 12;\n\n  let toH24 = tH % 12;\n  if (tAP === \"PM\") toH24 += 12;\n\n  const fromTotalMin = fromH24 * 60 + fM;\n  const toTotalMin = toH24 * 60 + tM;\n\n  let minutesSlept = toTotalMin - fromTotalMin;\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\n\n  const hours = minutesSlept / 60;\n  // return Number cu o zecimală\n  return parseFloat(hours.toFixed(1));\n}\n","export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11]; // children\n  } else if (age <= 17) {\n    sleepRange = [8, 10]; // teens\n  } else if (age <= 64) {\n    sleepRange = [7, 9]; // adults\n  } else {\n    sleepRange = [7, 8]; // seniors\n  }\n\n  // adjust if activity level is high\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n","export default function formatDate(inputDate) {\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\n\n  // creăm obiect Date (lunile sunt 0-based în JS)\n  const dateObj = new Date(year, month - 1, day);\n\n  const dayName = days[dateObj.getDay()];\n  const monthName = months[month - 1];\n\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\n}\n"],"names":["_user$age","user","privateDispatch","usePrivate","userConditions","age","height","weight","desiredWeight","sleep","useMemo","sleepHours","calculateSleepHours","filterDate","setFilterDate","useState","Date","toISOString","split","now","today","concat","getFullYear","String","getMonth","padStart","getDate","isTodaycondition","lines","length","date","interval","fromHour","fromMinute","fromAmPm","tillHour","tillMinute","tillAmPm","filteredLine","find","line","setInterval","useEffect","sorted","sort","a","b","toMinutes","totalSleptHours","reduce","acc","int","toHour","toMinute","toAmPm","fH","Number","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","calculateIntervalSleeptHours","lastInterval","emptyLastIntervalLineCondition","formatNumber","num","hour","minute","ampm","h","parseInt","updateFilteredLineInterval","intervalIdx","field","value","val","includes","newInterval","updated","_objectSpread","newInt","allIntervals","idx","newFrom","newTill","i","from","overlaps","toast","error","_jsxs","className","styles","cont","children","leftSideCont","rightSideUpCont","_jsx","title","graphCont","adviceCont","adviceTitle","style","fontSize","color","undefined","advicep","marginLeft","formatDate","rightSideCont","rightSideDate","dateWrapper","max","type","onChange","e","target","paramInput","rightSideDateP","fromToCont","fromToTitle","rem","to","lineRowCont","map","lineRow","timeInputGroup","min","step","timeInput","twoDots","ampmSelect","onClick","filter","_","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","push","addBtn","lastIntervalIndex","intervalToSave","index","setSleepDailyRegistrations","saveBtn","lineHeight","sleepRange","arguments","inputDate","year","month","day","dayName","getDay","monthName"],"sourceRoot":""}