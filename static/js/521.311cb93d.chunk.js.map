{"version":3,"file":"static/js/521.311cb93d.chunk.js","mappings":"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","sources":["Utils/createEventFromReminder.js","webpack://health-monitor/./src/components/AlertForm/AlertForm.module.css?d0cc","components/AlertForm/AlertForm.jsx","webpack://health-monitor/./src/pages/AlertsPage/AlertsPage.module.css?ad2e","pages/AlertsPage/AlertsPage.jsx","pages/AlertsPage/index.js"],"sourcesContent":["// Utils/createEventFromReminder.js\nexport default function createEventFromReminder(rem, viewStart, viewEnd) {\n  if (!rem.active) return [];\n\n  const [hour, minute] = rem.time.split(\":\").map(Number);\n  const [endHour, endMinute] = rem.end\n    ? rem.end.split(\":\").map(Number)\n    : [hour + 1, minute];\n\n  const events = [];\n  const doneDates = rem.doneDates || [];\n\n  // calculează repeatHours din string, ex: \"2 hours\" → 2\n  let repeatHours = 0;\n  if (typeof rem.repeat === \"string\" && rem.repeat !== \"noRepeat\") {\n    repeatHours = parseInt(rem.repeat, 10);\n  }\n\n  // dacă repeatHours < 1 => considerăm că nu se repetă\n  if (isNaN(repeatHours) || repeatHours < 1) repeatHours = 0;\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const current = new Date(viewStart);\n\n  while (current <= viewEnd) {\n    const day = current.getDay(); // 0=Su,1=Mo,...6=Sa\n    const dateStr = current\n      .toLocaleDateString(\"ro-RO\", {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n      })\n      .split(\".\")\n      .reverse()\n      .join(\"-\"); // format YYYY-MM-DD\n\n    // ignoră zilele trecute\n    if (current < today) {\n      current.setDate(current.getDate() + 1);\n      continue;\n    }\n\n    const pushEventsForDay = () => {\n      const startTime = new Date(current);\n      startTime.setHours(hour, minute, 0, 0);\n\n      const endTime = new Date(current);\n      endTime.setHours(endHour, endMinute, 0, 0);\n\n      if (repeatHours > 0) {\n        // repetă la interval de repeatHours între start și end\n        let tempStart = new Date(startTime);\n        while (tempStart < endTime) {\n          const tempEnd = new Date(tempStart);\n          tempEnd.setMinutes(tempEnd.getMinutes() + 1); // durata scurtă, poate fi modificată\n          events.push({\n            id: `${rem._id}-${+tempStart}`,\n            title: rem.text,\n            start: new Date(tempStart),\n            end: new Date(tempEnd),\n          });\n          tempStart.setHours(tempStart.getHours() + repeatHours);\n        }\n      } else {\n        // eveniment normal între time și end\n        events.push({\n          id: `${rem._id}-${+startTime}`,\n          title: rem.text,\n          start: startTime,\n          end: endTime,\n        });\n      }\n    };\n\n    // DAILY\n    if (rem.frequency === \"daily\" && !doneDates.includes(dateStr)) {\n      pushEventsForDay();\n    }\n\n    // WEEKLY (array de coduri zile)\n    if (\n      Array.isArray(rem.frequency) &&\n      rem.frequency.includes(dayToCode(day))\n    ) {\n      if (!doneDates.includes(dateStr)) pushEventsForDay();\n    }\n\n    // MONTHLY (ex: \"15 monthly\")\n    if (\n      typeof rem.frequency === \"string\" &&\n      rem.frequency.includes(\"monthly\")\n    ) {\n      const dayOfMonth = parseInt(rem.frequency, 10);\n      if (current.getDate() === dayOfMonth && !doneDates.includes(dateStr)) {\n        pushEventsForDay();\n      }\n    }\n\n    // FIXED DATE (ex: \"2025-09-20\")\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(rem.frequency)) {\n      const [y, m, d] = rem.frequency.split(\"-\").map(Number);\n      if (\n        current.getFullYear() === y &&\n        current.getMonth() === m - 1 &&\n        current.getDate() === d &&\n        !doneDates.includes(dateStr)\n      ) {\n        pushEventsForDay();\n      }\n    }\n\n    current.setDate(current.getDate() + 1);\n  }\n\n  return events;\n}\n\n// helper pentru a converti day numeric -> cod zi (0=Su,..)\nfunction dayToCode(dayNum) {\n  const map = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  return map[dayNum];\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formModalCont\":\"AlertForm_formModalCont__n1AHS\",\"form\":\"AlertForm_form__WOPSZ\",\"close\":\"AlertForm_close__6XhrF\",\"inputGroup\":\"AlertForm_inputGroup__C-9ve\",\"weekly\":\"AlertForm_weekly__FbPlI\",\"checkboxLabel\":\"AlertForm_checkboxLabel__V4eiP\",\"smallBtn\":\"AlertForm_smallBtn__YJ5YK\",\"buttonGroup\":\"AlertForm_buttonGroup__C9g8J\",\"saveBtn\":\"AlertForm_saveBtn__nemPP\",\"cancelBtn\":\"AlertForm_cancelBtn__+GW3d\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./AlertForm.module.css\";\n\nconst daysOfWeek = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"];\n\nconst now = new Date();\nconst today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n  2,\n  \"0\"\n)}-${String(now.getDate()).padStart(2, \"0\")}`;\n\nexport default function AlertForm({ onClose, handleSubmit, data, editId }) {\n  const modalRef = useRef();\n\n  const [freqType, setFreqType] = useState(() => {\n    if (data.frequency === \"daily\") return \"daily\";\n    if (\n      typeof data.frequency === \"string\" &&\n      data.frequency.includes(\"monthly\")\n    )\n      return \"monthly\";\n    if (\n      typeof data.frequency === \"string\" &&\n      /^\\d{4}-\\d{2}-\\d{2}$/.test(data.frequency)\n    )\n      return \"date\";\n    if (Array.isArray(data.frequency)) return \"weekly\";\n    return \"weekly\";\n  });\n\n  const [localFrequency, setLocalFrequency] = useState(\n    Array.isArray(data.frequency) ? [...data.frequency] : []\n  );\n\n  const [formData, setFormData] = useState({\n    ...data,\n    frequency: data.frequency,\n  });\n\n  const [filterDate, setFilterDate] = useState(today);\n\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n    const addCloseEvent = (event) => {\n      if (event.key === \"Escape\") onClose();\n    };\n    document.addEventListener(\"keydown\", addCloseEvent);\n    return () => {\n      document.body.style.overflow = \"auto\";\n      document.removeEventListener(\"keydown\", addCloseEvent);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    if (Array.isArray(data.frequency)) setLocalFrequency([...data.frequency]);\n  }, [data.frequency]);\n\n  const handleSet = (field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleWeeklyChange = (day) => {\n    let updated = localFrequency.includes(day)\n      ? localFrequency.filter((d) => d !== day)\n      : [...localFrequency, day];\n\n    if (updated.length === 7) {\n      setFreqType(\"daily\");\n      setLocalFrequency([]);\n      handleSet(\"frequency\", \"daily\");\n    } else {\n      setLocalFrequency(updated);\n      handleSet(\"frequency\", updated);\n    }\n  };\n\n  const handleMonthlyChange = (day) => handleSet(\"frequency\", `${day} monthly`);\n  const handleDateChange = (dateStr) => handleSet(\"frequency\", dateStr);\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    let frequencyValue;\n\n    if (freqType === \"daily\") {\n      frequencyValue = \"daily\";\n    } else if (freqType === \"weekly\") {\n      frequencyValue = localFrequency; // array cu zile\n    } else if (freqType === \"monthly\") {\n      frequencyValue = formData.frequency; // ex: \"15 monthly\"\n    } else if (freqType === \"date\") {\n      frequencyValue = filterDate; // ex: \"2025-09-13\"\n    } else {\n      frequencyValue = formData.frequency; // fallback\n    }\n\n    const submitData = {\n      ...formData,\n      frequency: frequencyValue,\n    };\n\n    handleSubmit(submitData);\n  };\n\n  const alertCondition =\n    formData.type === \"alert\" || formData.type === \"metrix\";\n\n  const closeOnClickOutside = (event) => {\n    if (event.currentTarget === event.target) onClose();\n  };\n\n  return (\n    <div\n      ref={modalRef}\n      onClick={closeOnClickOutside}\n      className={styles.formModalCont}\n    >\n      <form className={styles.form} onSubmit={handleFormSubmit}>\n        <button className={styles.close} onClick={onClose} type=\"button\">\n          x\n        </button>\n\n        {alertCondition && (\n          <div className={styles.inputGroup}>\n            <label>Reminder Text</label>\n            <input\n              type=\"text\"\n              placeholder=\"Enter reminder\"\n              value={formData.text}\n              onChange={(e) => handleSet(\"text\", e.target.value)}\n              required\n            />\n          </div>\n        )}\n\n        <div className={styles.inputGroup}>\n          <label>Time</label>\n          <input\n            type=\"time\"\n            value={formData.time}\n            onChange={(e) => handleSet(\"time\", e.target.value)}\n            required\n          />\n        </div>\n\n        {alertCondition && (\n          <>\n            <div className={styles.inputGroup}>\n              <label>Frequency</label>\n              <select\n                value={freqType}\n                onChange={(e) => {\n                  setFreqType(e.target.value);\n                  if (e.target.value === \"daily\")\n                    handleSet(\"frequency\", \"daily\");\n                  if (e.target.value === \"weekly\") handleSet(\"frequency\", []);\n                }}\n              >\n                <option value=\"daily\">Daily</option>\n                <option value=\"weekly\">Weekly (choose days)</option>\n                <option value=\"monthly\">Monthly (choose day)</option>\n                <option value=\"date\">Specific Date</option>\n              </select>\n            </div>\n\n            {freqType === \"weekly\" && (\n              <div className={styles.weekly}>\n                {daysOfWeek.map((day) => (\n                  <label key={day} className={styles.checkboxLabel}>\n                    <input\n                      type=\"checkbox\"\n                      checked={localFrequency.includes(day)}\n                      onChange={() => handleWeeklyChange(day)}\n                    />\n                    {day}\n                  </label>\n                ))}\n                <button\n                  type=\"button\"\n                  className={styles.smallBtn}\n                  onClick={() => {\n                    setFreqType(\"daily\");\n                    setLocalFrequency([]);\n                    handleSet(\"frequency\", \"daily\");\n                  }}\n                >\n                  All\n                </button>\n              </div>\n            )}\n\n            {freqType === \"monthly\" && (\n              <div className={styles.inputGroup}>\n                <label>Day of Month</label>\n                <input\n                  type=\"number\"\n                  min={1}\n                  max={31}\n                  step={1}\n                  value={parseInt(formData.frequency) || \"\"}\n                  onChange={(e) =>\n                    handleMonthlyChange(parseInt(e.target.value))\n                  }\n                />\n              </div>\n            )}\n\n            {freqType === \"date\" && (\n              <div className={styles.inputGroup}>\n                <label>Specific Date</label>\n                <input\n                  style={{ color: \"blue\", fontWeight: \"bold\" }}\n                  type=\"date\"\n                  min={today}\n                  value={\n                    /^\\d{4}-\\d{2}-\\d{2}$/.test(formData.frequency)\n                      ? formData.frequency\n                      : filterDate\n                  }\n                  onChange={(e) => {\n                    handleDateChange(e.target.value);\n                    setFilterDate(e.target.value);\n                  }}\n                />\n              </div>\n            )}\n          </>\n        )}\n\n        <div className={styles.inputGroup}>\n          <label>Repeat Interval (hours)</label>\n          <input\n            type=\"number\"\n            min={1}\n            max={12}\n            step={1}\n            value={\n              formData.repeat === \"noRepeat\"\n                ? \"\"\n                : parseInt(formData.repeat) || \"\"\n            }\n            onChange={(e) => {\n              const h = parseInt(e.target.value);\n              if (isNaN(h) || h < 1) {\n                handleSet(\"repeat\", \"noRepeat\");\n              } else {\n                handleSet(\"repeat\", h === 1 ? \"1 hour\" : `${h} hours`);\n              }\n            }}\n            placeholder=\"No Repeat\"\n          />\n        </div>\n\n        <div className={styles.buttonGroup}>\n          <button type=\"submit\" className={styles.saveBtn}>\n            {editId ? \"Update Reminder\" : \"Add Reminder\"}\n          </button>\n          <button type=\"button\" onClick={onClose} className={styles.cancelBtn}>\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nAlertForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired,\n  editId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"AlertsPage_cont__Bn-of\",\"leftSideCont\":\"AlertsPage_leftSideCont__uvpyK\",\"rightSideCont\":\"AlertsPage_rightSideCont__HCF89\",\"title\":\"AlertsPage_title__vqj0-\",\"rightSideTitle\":\"AlertsPage_rightSideTitle__uQTtz\",\"headerBox\":\"AlertsPage_headerBox__3iOMH\",\"addBtn\":\"AlertsPage_addBtn__b3wO3\",\"main\":\"AlertsPage_main__KHw-R\",\"calendarBox\":\"AlertsPage_calendarBox__iSP3z\",\"calendar\":\"AlertsPage_calendar__vOV+q\",\"rbc-today\":\"AlertsPage_rbc-today__P2l6q\",\"rbc-time-slot\":\"AlertsPage_rbc-time-slot__k-Hoo\",\"rbc-event\":\"AlertsPage_rbc-event__7F-kq\",\"remindersList\":\"AlertsPage_remindersList__BaT+d\",\"reminderItem\":\"AlertsPage_reminderItem__bQ515\",\"closeBtn\":\"AlertsPage_closeBtn__p7Nz7\",\"reminderItemDetailsCont\":\"AlertsPage_reminderItemDetailsCont__cSW7q\",\"actions\":\"AlertsPage_actions__ExvCf\",\"insideActions\":\"AlertsPage_insideActions__J7izc\",\"link\":\"AlertsPage_link__VK0R7\",\"stopBtn\":\"AlertsPage_stopBtn__J2o1J\",\"goBtn\":\"AlertsPage_goBtn__SGJ0k\",\"startBtn\":\"AlertsPage_startBtn__+8rI4\",\"doneBtn\":\"AlertsPage_doneBtn__SHS9V\",\"editBtn\":\"AlertsPage_editBtn__a6MAw\",\"doneLabel\":\"AlertsPage_doneLabel__G7cIv\"};","// AlertsPage.jsx\nimport { useState, useMemo, useEffect } from \"react\";\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport {\n  addEditReminder,\n  deleteReminder,\n} from \"../../redux/private/operationsPrivate\";\nimport { Link } from \"react-router-dom\";\nimport createEventFromReminder from \"../../Utils/createEventFromReminder\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport AlertForm from \"../../components/AlertForm/AlertForm\";\nimport clsx from \"clsx\";\nimport styles from \"./AlertsPage.module.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\nexport default function AlertsPage() {\n  const { user, privateDispatch } = usePrivate();\n  const [showForm, setShowForm] = useState(false);\n  const [editId, setEditId] = useState(null);\n\n  const [formData, setFormData] = useState({\n    text: \"\",\n    time: \"\",\n    frequency: \"daily\",\n    repeat: \"noRepeat\",\n    end: \"23:00\",\n    type: \"alert\",\n    active: false,\n    doneDates: [],\n  });\n\n  const reminders = useMemo(\n    () => [...(user.reminders || [])],\n    [user.reminders]\n  );\n  const [events, setEvents] = useState([]);\n\n  const handleAddEditReminder = (reminderData) =>\n    privateDispatch(addEditReminder(reminderData));\n\n  const handleSetData = (field, value) =>\n    setFormData((prev) => ({ ...prev, [field]: value }));\n\n  const handleCloseFormModal = () => {\n    setShowForm(false);\n    setEditId(null);\n    setFormData({\n      text: \"\",\n      time: \"\",\n      frequency: \"daily\",\n      repeat: \"noRepeat\",\n      end: \"23:00\",\n      type: \"alert\",\n      active: false,\n      doneDates: [],\n    });\n  };\n\n  const handleSubmitFormReminder = (reminderData) => {\n    if (!reminderData.text || !reminderData.time) {\n      alert(\"Please enter a reminder text and time.\");\n      return;\n    }\n    handleAddEditReminder({ ...reminderData, id: editId || undefined });\n    handleCloseFormModal();\n  };\n\n  // ==== Start / Stop ====\n  const handleActiveTrue = (id) =>\n    reminders.forEach(\n      (r) =>\n        r._id === id && handleAddEditReminder({ ...r, id: r._id, active: true })\n    );\n\n  const handleActiveFalse = (id) =>\n    reminders.forEach(\n      (r) =>\n        r._id === id &&\n        handleAddEditReminder({ ...r, id: r._id, active: false })\n    );\n\n  // ==== Done pentru ora curentă ====\n  const handleDoneForToday = (id) =>\n    reminders.forEach((r) => {\n      if (r._id === id) {\n        const doneDates = r.doneDates ? [...r.doneDates] : [];\n        const now = new Date();\n\n        const nowStr =\n          now\n            .toLocaleDateString(\"ro-RO\", {\n              year: \"numeric\",\n              month: \"2-digit\",\n              day: \"2-digit\",\n            })\n            .split(\".\")\n            .reverse()\n            .join(\"-\") +\n          ` ${String(now.getHours()).padStart(2, \"0\")}:${String(\n            now.getMinutes()\n          ).padStart(2, \"0\")}`;\n\n        if (!doneDates.includes(nowStr)) doneDates.push(nowStr);\n        handleAddEditReminder({ ...r, id: r._id, doneDates });\n      }\n    });\n\n  const handleGo = (id) =>\n    reminders.forEach((r) => (r._id === id ? handleDoneForToday(id) : null));\n\n  const handleDeleteReminder = (id) => privateDispatch(deleteReminder({ id }));\n\n  // ==== rerender automat la fiecare ora ====\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setEvents((prev) => [...prev]); // forțează rerender calendar\n      setFormData((f) => ({ ...f })); // forțează rerender lista reminders\n    }, 3600000); // 1 oră = 3600000ms\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className={styles.cont}>\n      {showForm && (\n        <AlertForm\n          onClose={handleCloseFormModal}\n          handleSubmit={handleSubmitFormReminder}\n          data={formData}\n          handleSet={handleSetData}\n          editId={editId}\n        />\n      )}\n\n      <div className={styles.leftSideCont}>\n        <div className={styles.headerBox}>\n          <h1 className={styles.title}>Calendar</h1>\n          <button onClick={() => setShowForm(true)} className={styles.addBtn}>\n            + Add Reminder\n          </button>\n        </div>\n\n        <div className={styles.calendarBox}>\n          <Calendar\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            className={styles.calendar}\n            defaultView=\"week\"\n            defaultDate={new Date()}\n            onRangeChange={(range) => {\n              let viewStart, viewEnd;\n              if (Array.isArray(range)) {\n                viewStart = range[0];\n                viewEnd = range[range.length - 1];\n              } else {\n                viewStart = range.start;\n                viewEnd = range.end;\n              }\n              const todayLocal = new Date();\n              todayLocal.setHours(0, 0, 0, 0);\n\n              const newEvents = reminders\n                .filter((r) => r.active)\n                .flatMap((r) => createEventFromReminder(r, viewStart, viewEnd))\n                .filter((event) => event.start >= todayLocal);\n              setEvents(newEvents);\n            }}\n          />\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <h1 className={clsx(styles.title, styles.rightSideTitle)}>Reminders</h1>\n        <ul className={styles.remindersList}>\n          {reminders.map((rem) => {\n            const now = new Date();\n\n            const nowStr =\n              now\n                .toLocaleDateString(\"ro-RO\", {\n                  year: \"numeric\",\n                  month: \"2-digit\",\n                  day: \"2-digit\",\n                })\n                .split(\".\")\n                .reverse()\n                .join(\"-\") +\n              ` ${String(now.getHours()).padStart(2, \"0\")}:${String(\n                now.getMinutes()\n              ).padStart(2, \"0\")}`;\n\n            // verificăm dacă reminderul a fost făcut deja la ultima execuție\n            const doneToday = rem.doneDates?.some((d) => {\n              return d.split(\" \")[0] === nowStr.split(\" \")[0];\n            });\n\n            return (\n              !doneToday && (\n                <li key={`alerts-${rem._id}`} className={styles.reminderItem}>\n                  {rem.type === \"alert\" && (\n                    <button\n                      type=\"button\"\n                      className={styles.closeBtn}\n                      onClick={() => handleDeleteReminder(rem._id)}\n                    >\n                      x\n                    </button>\n                  )}\n                  <div className={styles.reminderItemDetailsCont}>\n                    <span className={styles.text}>{rem.text} :</span>\n                    <div className={styles.timeCont}>\n                      <span className={styles.time}>{rem.time}</span>/\n                      <span className={styles.repeat}>\n                        {Array.isArray(rem.frequency)\n                          ? rem.frequency.join(\",\")\n                          : rem.frequency}\n                      </span>\n                      {rem.repeat !== \"noRepeat\" && (\n                        <span className={styles.repeat}>/{rem.repeat}</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className={styles.actions}>\n                    <div className={styles.insideActions}>\n                      <button\n                        className={clsx(\n                          rem.active ? styles.stopBtn : styles.startBtn\n                        )}\n                        onClick={() =>\n                          rem.active\n                            ? handleActiveFalse(rem._id)\n                            : handleActiveTrue(rem._id)\n                        }\n                      >\n                        {rem.active ? \"Stop\" : \"Start\"}\n                      </button>\n                      {rem.link && rem.active && !doneToday && (\n                        <Link className={styles.link} to={rem.link}>\n                          <button\n                            className={styles.goBtn}\n                            onClick={() => handleGo(rem._id)}\n                          >\n                            Go\n                          </button>\n                        </Link>\n                      )}\n                    </div>\n\n                    <div className={styles.insideActions}>\n                      {rem.active && (\n                        <button\n                          className={styles.doneBtn}\n                          onClick={() => handleDoneForToday(rem._id)}\n                        >\n                          Done\n                        </button>\n                      )}\n                      <button\n                        className={styles.editBtn}\n                        onClick={() => {\n                          setShowForm(true);\n                          setFormData({\n                            ...rem,\n                            doneDates: rem.doneDates || [],\n                          });\n                          setEditId(rem._id);\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  </div>\n                </li>\n              )\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import AlertsPage from \"./AlertsPage\";\n\nexport default AlertsPage;\n"],"names":["dayToCode","dayNum","daysOfWeek","now","Date","today","concat","getFullYear","String","getMonth","padStart","getDate","AlertForm","_ref","onClose","handleSubmit","data","editId","modalRef","useRef","freqType","setFreqType","useState","frequency","includes","test","Array","isArray","localFrequency","setLocalFrequency","formData","setFormData","_objectSpread","filterDate","setFilterDate","useEffect","document","body","style","overflow","addCloseEvent","event","key","addEventListener","removeEventListener","handleSet","field","value","prev","alertCondition","type","_jsx","ref","onClick","currentTarget","target","className","styles","children","_jsxs","onSubmit","e","frequencyValue","preventDefault","submitData","placeholder","text","onChange","required","time","_Fragment","map","day","checked","updated","filter","d","length","handleWeeklyChange","min","max","step","parseInt","handleMonthlyChange","color","fontWeight","dateStr","repeat","h","isNaN","localizer","momentLocalizer","moment","user","privateDispatch","usePrivate","showForm","setShowForm","setEditId","end","active","doneDates","reminders","useMemo","events","setEvents","handleAddEditReminder","reminderData","addEditReminder","handleCloseFormModal","handleDoneForToday","id","forEach","r","_id","nowStr","toLocaleDateString","year","month","split","reverse","join","getHours","getMinutes","push","interval","setInterval","f","clearInterval","cont","undefined","alert","handleSetData","leftSideCont","headerBox","title","addBtn","calendarBox","Calendar","startAccessor","endAccessor","calendar","defaultView","defaultDate","onRangeChange","range","viewStart","viewEnd","start","todayLocal","setHours","newEvents","flatMap","rem","hour","minute","Number","endHour","endMinute","repeatHours","current","getDay","setDate","pushEventsForDay","startTime","endTime","tempStart","tempEnd","setMinutes","dayOfMonth","y","m","createEventFromReminder","rightSideCont","clsx","rightSideTitle","remindersList","_rem$doneDates","doneToday","some","reminderItem","closeBtn","handleDeleteReminder","deleteReminder","reminderItemDetailsCont","timeCont","actions","insideActions","stopBtn","startBtn","handleActiveTrue","link","Link","to","goBtn","handleGo","doneBtn","editBtn"],"sourceRoot":""}