{"version":3,"file":"static/js/101.e374e5ed.chunk.js","mappings":"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","sources":["hooks/useFormValidation.js","webpack://health/./src/components/commonComponents/Input/Input.module.css?389e","components/commonComponents/Input/Input.jsx","hooks/useFormTouched.js","hooks/validateLogin.js","webpack://health/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://health/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useFormValidation = (initialState, validateFn) => {\r\n  const [fields, setFields] = useState(initialState);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateFields = () => {\r\n    const newErrors = validateFn(fields);\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  return {\r\n    fields,\r\n    setFields,\r\n    errors,\r\n    validateFields,\r\n  };\r\n};\r\n\r\nexport default useFormValidation;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"Input_inputContainer__lPX9U\",\"input\":\"Input_input__HRjHW\",\"inputCenter\":\"Input_inputCenter__OMKDT\",\"inputInfo\":\"Input_inputInfo__bX0XA\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\n\r\nimport styles from \"./Input.module.css\";\r\n\r\nexport default function Input({\r\n  type,\r\n  placeholder,\r\n  required,\r\n  variant = \"\",\r\n  className,\r\n  name,\r\n  handleChange,\r\n  width,\r\n  value,\r\n  paddingLeft,\r\n  autoComplete,\r\n  handleBlur,\r\n}) {\r\n  return (\r\n    <div style={{ width: width || \"auto\" }} className={styles.inputContainer}>\r\n      <input\r\n        autoComplete={autoComplete || \"off\"}\r\n        style={{ paddingLeft: paddingLeft || \"0px\" }}\r\n        onChange={handleChange}\r\n        name={name || \"\"}\r\n        className={clsx(\r\n          styles.input,\r\n          className,\r\n          variant === \"center\" ? styles.inputCenter : styles.input\r\n        )}\r\n        type={type || \"text\"}\r\n        placeholder={placeholder || \"\"}\r\n        required={required || false}\r\n        value={value || \"\"}\r\n        onBlur={handleBlur}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  paddingLeft: PropTypes.string,\r\n  autoComplete: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  name: PropTypes.string,\r\n  type: PropTypes.string,\r\n  variant: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  placeholder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n};\r\n","import { useState } from \"react\";\r\n\r\nconst useFormTouched = (initialState = {}) => {\r\n  const [touched, setTouched] = useState(\r\n    Object.keys(initialState).reduce((acc, key) => {\r\n      acc[key] = false;\r\n      return acc;\r\n    }, {})\r\n  );\r\n\r\n  const handleBlur = (field) => () => {\r\n    setTouched((prev) => ({ ...prev, [field]: true }));\r\n  };\r\n\r\n  return {\r\n    touched,\r\n    handleBlur,\r\n  };\r\n};\r\n\r\nexport default useFormTouched;\r\n","const validateLogin = (fields) => {\r\n    const errors = {};\r\n    if (!fields.email) {\r\n        errors.email = \"Email is required\";\r\n    }\r\n    if (!fields.password) {\r\n        errors.password = \"Password is required\";\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport default validateLogin;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__if6Oq\",\"inputWrapper\":\"LoginForm_inputWrapper__Wm0yI\",\"inputIcon\":\"LoginForm_inputIcon__Fp6cy\",\"inputError\":\"LoginForm_inputError__IsRnC\",\"eyeIcon\":\"LoginForm_eyeIcon__OsdrF\",\"errorCont\":\"LoginForm_errorCont__zywhB\",\"error\":\"LoginForm_error__t7T8P\",\"buttonsContainer\":\"LoginForm_buttonsContainer__Q3bLx\",\"button\":\"LoginForm_button__l79Na\",\"navLink\":\"LoginForm_navLink__-2jat\"};","import React, { useState } from \"react\";\r\nimport { logIn } from \"../../redux/auth/operationsAuth\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from \"../commonComponents/Input/Input\";\r\nimport Button from \"../commonComponents/Button\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEnvelope, faLock } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { VscEye, VscEyeClosed } from \"react-icons/vsc\";\r\nimport useToggle from \"../../hooks/useToggle\";\r\nimport useFormValidation from \"../../hooks/useFormValidation\";\r\nimport validateLogin from \"../../hooks/validateLogin\";\r\nimport useFormTouched from \"../../hooks/useFormTouched\";\r\n\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\nimport clsx from \"clsx\";\r\n\r\nimport styles from \"./LoginForm.module.css\";\r\n\r\nfunction LoginForm() {\r\n  const { fields, setFields, validateFields } = useFormValidation(\r\n    {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validateLogin\r\n  );\r\n\r\n  const { user, isLoggedIn } = useAuth();\r\n\r\n  const { touched, handleBlur } = useFormTouched(fields);\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const [type, setType] = useState(\"password\");\r\n  const [eyeVisible, toggleEyeVisible] = useToggle(true);\r\n  const [closedEyeVisible, toggleClosedEyeVisible] = useToggle(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateFields()) return;\r\n\r\n    try {\r\n      await dispatch(logIn(fields)).unwrap();\r\n    } catch (error) {\r\n      setFields((prevFields) => ({\r\n        ...prevFields,\r\n        errorMessage: setErrorMessage(\r\n          \"You have entered an invalid username or password.\"\r\n        ),\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={styles.form}>\r\n        <div className={styles.inputContainer}>\r\n          <div className={styles.inputWrapper}>\r\n            <FontAwesomeIcon icon={faEnvelope} className={styles.inputIcon} />\r\n\r\n            <Input\r\n              autoComplete=\"on\"\r\n              paddingLeft=\"53.5px\"\r\n              width=\"100%\"\r\n              type=\"email\"\r\n              value={fields.email}\r\n              handleChange={(e) => {\r\n                setFields({ ...fields, email: e.target.value });\r\n              }}\r\n              handleBlur={handleBlur(\"email\")}\r\n              placeholder=\"Email *\"\r\n              required={true}\r\n            />\r\n          </div>\r\n          {touched.email && !fields.email && (\r\n            <p className={styles.inputError}>Required</p>\r\n          )}\r\n        </div>\r\n        <div styles={styles.inputContainer}>\r\n          <div className={styles.inputWrapper}>\r\n            <FontAwesomeIcon icon={faLock} className={styles.inputIcon} />\r\n\r\n            {eyeVisible && (\r\n              <VscEye\r\n                onClick={() => {\r\n                  toggleEyeVisible();\r\n                  toggleClosedEyeVisible();\r\n                  setType(\"text\");\r\n                }}\r\n                size=\"24px\"\r\n                className={styles.eyeIcon}\r\n              />\r\n            )}\r\n\r\n            {closedEyeVisible && (\r\n              <VscEyeClosed\r\n                onClick={() => {\r\n                  toggleEyeVisible();\r\n                  toggleClosedEyeVisible();\r\n                  setType(\"password\");\r\n                }}\r\n                size=\"24px\"\r\n                className={styles.eyeIcon}\r\n              />\r\n            )}\r\n\r\n            <Input\r\n              autoComplete=\"on\"\r\n              paddingLeft=\"53.5px\"\r\n              width=\"100%\"\r\n              type={type}\r\n              value={fields.password}\r\n              handleChange={(e) => {\r\n                setFields({ ...fields, password: e.target.value });\r\n              }}\r\n              handleBlur={handleBlur(\"password\")}\r\n              placeholder=\"Password\"\r\n              required={true}\r\n            />\r\n          </div>\r\n          {touched.password && fields.password.length < 6 && (\r\n            <p className={styles.inputError}>\r\n              Password must be at least 6 characters!\r\n            </p>\r\n          )}\r\n        </div>\r\n        <div className={styles.buttonsContainer}>\r\n          <Button variant=\"colored\" type=\"submit\">\r\n            Log in\r\n          </Button>\r\n          {/* {errorMessage && <p className={styles.error}>{errorMessage}</p>} */}\r\n          <Link to=\"/register\" className={styles.navLink}>\r\n            <Button className={styles.button} type=\"button\">\r\n              Register\r\n            </Button>\r\n          </Link>{\" \"}\r\n          {errorMessage && <p className={styles.error}>{errorMessage}</p>}\r\n        </div>\r\n        {user !== null && !isLoggedIn && (\r\n          <div className={styles.errorCont}>\r\n            <p className={styles.error}>\r\n              It seems that your email is not verified! Please click the Verify\r\n              button to be redirected to verify email page !\r\n            </p>\r\n            <Button>\r\n              <Link\r\n                to=\"/verify-email\"\r\n                className={clsx(styles.navLink, styles.link)}\r\n              >\r\n                Verify\r\n              </Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"LoginPage_section__oGK0T\",\"title\":\"LoginPage_title__VPZIa\"};","import React, { useEffect } from \"react\";\r\nimport LoginForm from \"../../components/LoginForm/LoginForm\";\r\n\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport styles from \"./LoginPage.module.css\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\n\r\nexport default function LoginPage() {\r\n  const { isLoggedIn, user } = useAuth();\r\n\r\n  // Show a toast notification when login is successful\r\n  useEffect(() => {\r\n    if (isLoggedIn || user?.verify) {\r\n      toast.success(\"Login successful!\");\r\n    }\r\n  }, [isLoggedIn, user?.verify]); // Dependency array ensures the effect runs when these values change.\r\n\r\n  return (\r\n    <section className={styles.section}>\r\n      <h2 className={styles.title}>Log In</h2>\r\n      <LoginForm />\r\n      <ToastContainer />\r\n    </section>\r\n  );\r\n}\r\n"],"names":["useFormValidation","initialState","validateFn","fields","setFields","useState","errors","setErrors","validateFields","newErrors","Object","keys","length","Input","_ref","type","placeholder","required","variant","className","name","handleChange","width","value","paddingLeft","autoComplete","handleBlur","_jsx","style","styles","inputContainer","children","onChange","clsx","input","inputCenter","onBlur","arguments","undefined","touched","setTouched","reduce","acc","key","field","prev","_objectSpread","email","password","validateLogin","user","isLoggedIn","useAuth","useFormTouched","errorMessage","setErrorMessage","dispatch","useDispatch","setType","eyeVisible","toggleEyeVisible","useToggle","closedEyeVisible","toggleClosedEyeVisible","_Fragment","_jsxs","onSubmit","async","e","preventDefault","logIn","unwrap","error","prevFields","form","inputWrapper","FontAwesomeIcon","icon","faEnvelope","inputIcon","target","inputError","faLock","VscEye","onClick","size","eyeIcon","VscEyeClosed","buttonsContainer","Button","Link","to","navLink","button","errorCont","link","LoginPage","useEffect","verify","toast","success","section","title","LoginForm","ToastContainer"],"sourceRoot":""}