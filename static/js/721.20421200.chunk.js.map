{"version":3,"file":"static/js/721.20421200.chunk.js","mappings":"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","sources":["Utils/calculateSleepHours.js","Utils/calculateIntervalSleeptHours.js","Utils/calculateNominalBPAndPulse.js","Utils/calculateDailySteps.js","webpack://health-monitor/./src/pages/ExportReportsPage/ExportReportsPage.module.css?a167","assets/generateReportPdf.js","webpack://health-monitor/./src/components/ReportModal/ReportModal.module.css?c2db","components/ReportModal/ReportModal.jsx","pages/ExportReportsPage/index.js","pages/ExportReportsPage/ExportReportsPage.jsx","Utils/getDaysInterval.js"],"sourcesContent":["export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11];\n  } else if (age <= 17) {\n    sleepRange = [8, 10];\n  } else if (age <= 64) {\n    sleepRange = [7, 9];\n  } else {\n    sleepRange = [7, 8];\n  }\n\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n","export default function calculateIntervalSleeptHours(\n  fromHour,\n  fromMinute,\n  fromAmPm,\n  toHour,\n  toMinute,\n  toAmPm\n) {\n  // normalize input (string -> number, trim)\n  const fH = Number(String(fromHour).trim());\n  //   console.log(\"fH :\", fH);\n\n  const fM = Number(String(fromMinute).trim());\n  const tH = Number(String(toHour).trim());\n  const tM = Number(String(toMinute).trim());\n  const fAP = String(fromAmPm || \"\")\n    .trim()\n    .toUpperCase();\n  //   console.log(\"fAP :\", fAP);\n\n  const tAP = String(toAmPm || \"\")\n    .trim()\n    .toUpperCase();\n\n  // validate\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\n\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\n  // 12 AM -> 0, 12 PM -> 12\n  let fromH24 = fH % 12;\n  if (fAP === \"PM\") fromH24 += 12;\n\n  let toH24 = tH % 12;\n  if (tAP === \"PM\") toH24 += 12;\n\n  const fromTotalMin = fromH24 * 60 + fM;\n  const toTotalMin = toH24 * 60 + tM;\n\n  let minutesSlept = toTotalMin - fromTotalMin;\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\n\n  const hours = minutesSlept / 60;\n  // return Number cu o zecimală\n  return parseFloat(hours.toFixed(1));\n}\n","/**\n * Calculate nominal heart rate and blood pressure with age- and weight-adjusted limits\n * @param {number} age - age in years\n * @param {number} weight - weight in kg\n * @returns {object} - { heartRate, heartRateMin, heartRateMax, systolic, systolicMin, systolicMax, diastolic, diastolicMin, diastolicMax }\n */\nexport default function calculateNominalBPAndPulse(age, weight) {\n  if (!age) {\n    return 0;\n  }\n\n  // Puls nominal: 70 ± 10, ajustat cu varsta\n  const heartRate = Math.round(70 + (age - 30) * 0.3);\n  const heartRateMin = Math.round(heartRate - 10);\n  const heartRateMax = Math.round(heartRate + 10);\n\n  // Tensiune arterială nominală: sistolic 110 ± 10, diastolic 70 ± 5, ajustate cu vârsta\n  const systolic = Math.round(110 + age * 0.5);\n  const systolicMin = Math.round(systolic - 10);\n  const systolicMax = Math.round(systolic + 10);\n\n  const diastolic = Math.round(70 + age * 0.2);\n  const diastolicMin = Math.round(diastolic - 5);\n  const diastolicMax = Math.round(diastolic + 5);\n\n  // Ajustare ușoară în funcție de greutate\n  let hr = heartRate,\n    hrMin = heartRateMin,\n    hrMax = heartRateMax;\n  let sys = systolic,\n    sysMin = systolicMin,\n    sysMax = systolicMax;\n  let dia = diastolic,\n    diaMin = diastolicMin,\n    diaMax = diastolicMax;\n\n  if (weight) {\n    if (weight > 80) {\n      hr += 2;\n      hrMin += 2;\n      hrMax += 2;\n      sys += 3;\n      sysMin += 3;\n      sysMax += 3;\n      dia += 2;\n      diaMin += 2;\n      diaMax += 2;\n    } else if (weight < 60) {\n      hr -= 2;\n      hrMin -= 2;\n      hrMax -= 2;\n      sys -= 3;\n      sysMin -= 3;\n      sysMax -= 3;\n      dia -= 2;\n      diaMin -= 2;\n      diaMax -= 2;\n    }\n  }\n\n  return {\n    heartRate: hr,\n    heartRateMin: hrMin,\n    heartRateMax: hrMax,\n    systolic: sys,\n    systolicMin: sysMin,\n    systolicMax: sysMax,\n    diastolic: dia,\n    diastolicMin: diaMin,\n    diastolicMax: diaMax,\n  };\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps =\n    age && currentWeight && desiredWeight & height\n      ? Math.round((baseSteps + adjustment) * ageFactor)\n      : 0;\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"ExportReportsPage_cont__koYLr\",\"leftSideCont\":\"ExportReportsPage_leftSideCont__qCae-\",\"rightSideCont\":\"ExportReportsPage_rightSideCont__91oX2\",\"title\":\"ExportReportsPage_title__-wWhT\",\"datesCont\":\"ExportReportsPage_datesCont__jhSa3\",\"dateCont\":\"ExportReportsPage_dateCont__V5bD2\",\"date\":\"ExportReportsPage_date__Nausv\",\"generateBtn\":\"ExportReportsPage_generateBtn__QUQ5d\",\"rightSideContList\":\"ExportReportsPage_rightSideContList__jim4J\",\"rightSideContListItem\":\"ExportReportsPage_rightSideContListItem__H42Vb\",\"rightSideContListItemLeftCont\":\"ExportReportsPage_rightSideContListItemLeftCont__A6IMK\",\"btnsCont\":\"ExportReportsPage_btnsCont__CknZe\",\"openReportModalBtn\":\"ExportReportsPage_openReportModalBtn__PuZNn\",\"rightSideContListItemDatesCont\":\"ExportReportsPage_rightSideContListItemDatesCont__f1NFj\",\"downloadBtn\":\"ExportReportsPage_downloadBtn__43Jze\",\"deleteBtn\":\"ExportReportsPage_deleteBtn__vSrsu\",\"empty\":\"ExportReportsPage_empty__tASKy\"};","import jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n\nexport default function generateReportPdf(report) {\n  const doc = new jsPDF();\n\n  // --- Titlu ---\n  doc.setFontSize(16);\n  doc.text(`Health Report for ${report.name}`, 14, 20);\n\n  // --- Perioada ---\n  doc.setFontSize(12);\n  const isSingleDay = report.from === report.till;\n  const periodText = isSingleDay\n    ? `Date: ${new Date(report.from).toDateString()}`\n    : `Period: ${new Date(report.from).toDateString()} - ${new Date(\n        report.till\n      ).toDateString()}`;\n  doc.text(periodText, 14, 30);\n\n  // --- Recomandări ---\n  let y = 40;\n  doc.text(\n    \"Based on your personal info, your daily recommended values are:\",\n    14,\n    y\n  );\n  y += 8;\n  doc.text(`Calories: ${report.caloriesRecommended}`, 14, y);\n  y += 6;\n  doc.text(`Steps: ${report.stepsRecommended}`, 14, y);\n  y += 6;\n  doc.text(`Sleep: ${report.sleepRecommended}h`, 14, y);\n  y += 6;\n  doc.text(\n    `Pulse: ${report.pulseRecommended} (Range: ${report.heartRateMin} - ${report.heartRateMax})`,\n    14,\n    y\n  );\n  y += 6;\n  doc.text(\n    `Blood Pressure: ${report.systolicRecommended}/${report.diastolicRecommended} (Sys ${report.systolicMin}-${report.systolicMax}, Dia ${report.diastolicMin}-${report.diastolicMax})`,\n    14,\n    y\n  );\n  y += 12;\n\n  // --- Dacă nu există date ---\n  if (!report.dates || report.dates.length === 0) {\n    doc.setTextColor(200, 0, 0);\n    doc.text(\"No records for this period\", 14, y);\n    return doc;\n  }\n\n  // --- Tabel ---\n  const tableColumns = [\n    \"Date\",\n    \"Calories\",\n    \"Steps\",\n    \"Sleep (h)\",\n    \"Pulse\",\n    \"Blood Pressure\",\n  ];\n\n  const tableRows = report.dates.map((day) => {\n    // Date simplu\n    const dateLabel = new Date(day.date).toDateString();\n\n    // Calories\n    let caloriesText = \"No records\";\n    if (day.calories > 0) {\n      caloriesText =\n        day.calories < report.caloriesRecommended * 0.6 ||\n        day.calories > report.caloriesRecommended\n          ? `${day.calories} (!)`\n          : `${day.calories} (OK)`;\n    }\n\n    // Steps\n    let stepsText = \"No records\";\n    if (day.steps > 0) {\n      stepsText =\n        day.steps < report.stepsRecommended * 0.6\n          ? `${day.steps} (!)`\n          : `${day.steps} (OK)`;\n    }\n\n    // Sleep\n    let sleepText = \"No records\";\n    if (day.sleep > 0) {\n      const sleepValue = Number(day.sleep.toFixed(1));\n      sleepText =\n        sleepValue < report.sleepRecommended * 0.6 ||\n        sleepValue > report.sleepRecommended + 1\n          ? `${sleepValue}h (!)`\n          : `${sleepValue}h (OK)`;\n    }\n\n    // Pulse\n    const pulseText = day.pulse ? String(day.pulse) : \"-\";\n\n    // Blood Pressure\n    const bloodText =\n      day.systolic && day.diastolic ? `${day.systolic}/${day.diastolic}` : \"-\";\n\n    return [\n      dateLabel,\n      caloriesText,\n      stepsText,\n      sleepText,\n      pulseText,\n      bloodText,\n    ];\n  });\n\n  autoTable(doc, {\n    head: [tableColumns],\n    body: tableRows,\n    startY: y,\n    styles: { fontSize: 10 },\n    didParseCell: (data) => {\n      if (data.section === \"body\") {\n        const text = String(data.cell.text[0]);\n        if (text.includes(\"(!)\")) data.cell.styles.textColor = [200, 0, 0];\n        else if (text.includes(\"(OK)\"))\n          data.cell.styles.textColor = [0, 150, 0];\n        else if (text === \"No records\")\n          data.cell.styles.textColor = [200, 0, 0];\n      }\n    },\n  });\n\n  return doc;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"ReportModal_overlay__T2pPa\",\"modal\":\"ReportModal_modal__EH9QH\",\"downloadBtn\":\"ReportModal_downloadBtn__x+InD\",\"closeBtn\":\"ReportModal_closeBtn__4nhEo\"};","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport generateReportPdf from \"../../assets/generateReportPdf\"; // <-- funcția cu tabelul\nimport styles from \"./ReportModal.module.css\";\n\nexport default function ReportModal({ report, onClose }) {\n  const [pdfUrl, setPdfUrl] = useState(\"\");\n\n  const normalizedDay = (day) => new Date(day).toDateString();\n\n  useEffect(() => {\n    if (report) {\n      const doc = generateReportPdf(report);\n      const pdfBlob = doc.output(\"blob\");\n      const url = URL.createObjectURL(pdfBlob);\n      setPdfUrl(url);\n    }\n  }, [report]);\n\n  const handleDownload = () => {\n    const doc = generateReportPdf(report);\n\n    const fileName = `${report.name}_Health_Report-${normalizedDay(\n      report.from\n    )}${\n      report.from !== report.till ? \"-\" + normalizedDay(report.till) : \"\"\n    }.pdf`;\n\n    doc.save(fileName);\n  };\n\n  if (!report) return null;\n\n  return (\n    <div className={styles.overlay}>\n      <div className={styles.modal}>\n        <h2>PDF Preview</h2>\n        {pdfUrl && (\n          <iframe\n            src={pdfUrl}\n            title=\"PDF Preview\"\n            width=\"100%\"\n            height=\"400px\"\n            style={{ border: \"1px solid #ccc\" }}\n          />\n        )}\n        <div className={styles.buttons}>\n          <button onClick={handleDownload} className={styles.downloadBtn}>\n            Download\n          </button>\n          <button onClick={onClose} className={styles.closeBtn}>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nReportModal.propTypes = {\n  report: PropTypes.object,\n  onClose: PropTypes.func.isRequired,\n};\n","import ExportReportsPage from \"./ExportReportsPage\";\n\nexport default ExportReportsPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport styles from \"./ExportReportsPage.module.css\";\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport clsx from \"clsx\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport { useNavigate } from \"react-router-dom\";\nimport calculateNominalBPAndPulse from \"../../Utils/calculateNominalBPAndPulse\";\nimport getDaysInterval from \"../../Utils/getDaysInterval\";\nimport calculateIntervalSleeptHours from \"../../Utils/calculateIntervalSleeptHours\";\nimport {\n  addUpdateReport,\n  deleteRport,\n} from \"../../redux/private/operationsPrivate\";\nimport ReportModal from \"../../components/ReportModal/ReportModal\";\nimport generateReportPdf from \"../../assets/generateReportPdf\";\n\nexport default function ExportReportsPage() {\n  const navigate = useNavigate();\n\n  const { user, privateDispatch } = usePrivate();\n  console.log(\"user exports:\", user);\n\n  const name = user?.username || user?.name || \"User\";\n  const age = user?.age || 0;\n  const height = user?.height || 0;\n  const weight = user?.weight || 0;\n  const desiredWeight = user?.desiredWeight || 0;\n  const blood = user?.bloodType || 0;\n\n  // const bloodTypeOptions = [\n  //   { value: \"1\", label: \"A\" },\n  //   { value: \"2\", label: \"B\" },\n  //   { value: \"3\", label: \"AB\" },\n  //   { value: \"4\", label: \"O\" },\n  // ];\n\n  // const bloodType =\n  //   bloodTypeOptions.find((opt) => opt.value === String(blood))?.label || \"A\";\n\n  const usersCondition =\n    age > 0 || height > 0 || weight > 0 || desiredWeight > 0 || blood > 0;\n\n  // console.log(\"bloodType :\", bloodType);\n\n  const caloriesRecommended = user?.dietaryInfo?.dailyCalorieIntake;\n  const stepsRecommended = calculateDailySteps(\n    age,\n    weight,\n    desiredWeight,\n    height\n  );\n  const sleepRecommended = calculateSleepHours(age);\n  const heartsMetrix = calculateNominalBPAndPulse(age, weight);\n  const {\n    heartRate,\n    systolic,\n    diastolic,\n    heartRateMin,\n    heartRateMax,\n    systolicMin,\n    systolicMax,\n    diastolicMin,\n    diastolicMax,\n  } = heartsMetrix;\n  // console.log(\"pulseRecommended :\", heartRate);\n\n  // console.log(\"systolicRecommended :\", systolic);\n\n  // console.log(\"diastolicRecommended :\", diastolic);\n\n  const normalizedDay = (day) => new Date(day).toISOString().split(\"T\")[0];\n\n  const userReports = useMemo(() => user?.reports || [], [user?.reports]);\n\n  const [reports, setReports] = useState([]);\n\n  useEffect(() => {\n    const sortedReports = [...userReports].sort(\n      (a, b) => new Date(b.from) - new Date(a.from)\n    );\n\n    // console.log(\"sortedReports :\", sortedReports);\n\n    setReports([...sortedReports]);\n  }, [setReports, userReports]);\n\n  const now = new Date();\n  const today = normalizedDay(now);\n  const [startDate, setStartDate] = useState(today);\n  const [endDate, setEndDate] = useState(today);\n\n  const [report, setReport] = useState({\n    from: startDate,\n    till: endDate,\n    name: name,\n    age: age,\n    height: height,\n    weight: weight,\n    desiredWeight: desiredWeight,\n    bloodType: blood,\n    caloriesRecommended: caloriesRecommended,\n    stepsRecommended: stepsRecommended,\n    sleepRecommended: sleepRecommended,\n    systolicRecommended: systolic,\n    diastolicRecommended: diastolic,\n    pulseRecommended: heartRate,\n    heartRateMin: heartRateMin,\n    heartRateMax: heartRateMax,\n    systolicMin: systolicMin,\n    systolicMax: systolicMax,\n    diastolicMin: diastolicMin,\n    diastolicMax: diastolicMax,\n    dates: [],\n  });\n\n  useEffect(() => {\n    setReport((prev) => ({\n      ...prev,\n      from: startDate,\n      till: endDate,\n    }));\n  }, [startDate, endDate]);\n\n  // console.log(\"report :\", report);\n\n  const daysInterval = useMemo(\n    () => getDaysInterval(startDate, endDate),\n    [startDate, endDate]\n  );\n\n  // console.log(daysInterval);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const newDates = daysInterval.map((day) => {\n      const consumedProductsForDay = (user?.consumedProducts || []).filter(\n        (product) => normalizedDay(product?.date) === normalizedDay(day)\n      );\n\n      const totalCalories = consumedProductsForDay.reduce((acc, product) => {\n        if (consumedProductsForDay.length === 0) {\n          return 0;\n        } else {\n          acc = acc + product.calories;\n        }\n\n        return acc;\n      }, 0);\n\n      const stepsForDay = (user?.steps || []).find(\n        (step) => normalizedDay(step.date) === normalizedDay(day)\n      );\n      const totalSteps = stepsForDay\n        ? stepsForDay?.interval?.reduce((acc, int) => {\n            acc += int.steps;\n            return acc;\n          }, 0)\n        : 0;\n\n      const sleepForDay = (user?.sleep || []).find(\n        (sl) => normalizedDay(sl.date) === normalizedDay(day)\n      );\n      // console.log(\"sleepForDay :\", sleepForDay);\n\n      const totalSleptHours = sleepForDay\n        ? sleepForDay.interval?.reduce((acc, int) => {\n            acc =\n              acc +\n              calculateIntervalSleeptHours(\n                int.fromHour,\n                int.fromMinute,\n                int.fromAmPm,\n                int.tillHour,\n                int.tillMinute,\n                int.tillAmPm\n              );\n            // console.log(\"acc :\", acc);\n\n            return acc;\n          }, 0)\n        : 0;\n      // console.log(\"totalSlept :\", totalSleptHours, \"day :\", day);\n\n      const heartForDay = (user?.heart || []).find(\n        (hr) => normalizedDay(hr.date) === normalizedDay(day)\n      );\n\n      const userHeart = heartForDay\n        ? {\n            pulse: heartForDay?.pulse,\n            systolic: heartForDay?.systolic,\n            diastolic: heartForDay?.diastolic,\n          }\n        : 0;\n\n      const datesCopndition =\n        totalCalories > 0 ||\n        totalSteps > 0 ||\n        totalSleptHours > 0 ||\n        userHeart > 0;\n\n      return datesCopndition\n        ? {\n            date: day,\n            calories: totalCalories,\n            steps: totalSteps,\n            sleep: totalSleptHours,\n            systolic: userHeart.systolic || 0,\n            diastolic: userHeart.diastolic || 0,\n            pulse: userHeart.pulse || 0,\n          }\n        : null;\n    });\n\n    const filteredNewDates = newDates.filter((date) => date !== null);\n\n    setReport((prev) => ({\n      ...prev,\n      dates: filteredNewDates,\n    }));\n  }, [daysInterval, user]);\n\n  // console.log(\"daysInterval :\", daysInterval);\n\n  const styledReportDate = (date) => new Date(date).toDateString();\n\n  function handleGenerate() {\n    privateDispatch(addUpdateReport({ report: { ...report } }));\n    setStartDate(today);\n    setEndDate(today);\n  }\n\n  const handleDownload = (report) => {\n    const doc = generateReportPdf(report);\n\n    const fileName = `${report.name}_Health_Report-${styledReportDate(\n      report.from\n    )}${\n      report.from !== report.till ? \"-\" + styledReportDate(report.till) : \"\"\n    }.pdf`;\n\n    doc.save(fileName);\n  };\n\n  const [selectedReport, setSelectedReport] = useState(null);\n\n  const handleOpenReportModal = (report) => {\n    setSelectedReport(report);\n  };\n\n  const handleCloseReportModal = () => {\n    setSelectedReport(null);\n  };\n\n  function handleDeleteReport(id) {\n    privateDispatch(deleteRport({ id: id }));\n  }\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Exports & Reports</h1>\n        <div className={styles.datesCont}>\n          <div className={styles.dateCont}>\n            <p className={styles.dateTitle}>Start date</p>\n            <input\n              onChange={(e) => setStartDate(e.target.value)}\n              value={startDate}\n              className={styles.date}\n              max={today}\n              type=\"date\"\n            />\n          </div>\n          <div className={styles.dateCont}>\n            <p className={styles.dateTitle}>End date</p>\n            <input\n              onChange={(e) => setEndDate(e.target.value)}\n              value={endDate}\n              className={styles.date}\n              min={startDate}\n              max={today}\n              type=\"date\"\n            />\n          </div>\n        </div>\n        {usersCondition ? (\n          <button\n            onClick={handleGenerate}\n            className={styles.generateBtn}\n            type=\"button\"\n          >\n            Generate report\n          </button>\n        ) : (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              gap: \"5px\",\n              background: \"aliceblue\",\n              border: \"1px solid var(--Gray-5)\",\n              borderRadius: \"5px\",\n              padding: \"10px\",\n            }}\n          >\n            <p style={{ display: \"flex\", textAlign: \"center\", color: \"red\" }}>\n              It seems that you did not set up your personal info. Please Go:\n            </p>\n            <button\n              onClick={() => navigate(\"/\")}\n              className={styles.generateBtn}\n              type=\"button\"\n            >\n              Diet Calculator\n            </button>\n          </div>\n        )}\n      </div>\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Generated Reports...</h1>\n        <ul className={styles.rightSideContList}>\n          {reports.length > 0 ? (\n            reports.map((report) => {\n              return (\n                <li\n                  key={`report-${report._id}`}\n                  className={styles.rightSideContListItem}\n                >\n                  <div className={styles.rightSideContListItemLeftCont}>\n                    <div className={styles.btnsCont}>\n                      <button\n                        onClick={() => handleOpenReportModal(report)}\n                        type=\"button\"\n                        className={styles.openReportModalBtn}\n                      >\n                        PDF Report\n                      </button>\n\n                      <button\n                        onClick={() => handleDeleteReport(report._id)}\n                        type=\"button\"\n                        className={clsx(\n                          styles.openReportModalBtn,\n                          styles.deleteBtn\n                        )}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                    <div className={styles.rightSideContListItemDatesCont}>\n                      <span>{styledReportDate(report.from)}</span>\n                      {report.from !== report.till && (\n                        <span>-{styledReportDate(report.till)}</span>\n                      )}\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => handleDownload(report)}\n                    type=\"button\"\n                    className={styles.downloadBtn}\n                  >\n                    Download\n                  </button>\n                </li>\n              );\n            })\n          ) : (\n            <li className={clsx(styles.rightSideContListItem, styles.empty)}>\n              No Reports Yet\n            </li>\n          )}\n        </ul>\n\n        {selectedReport && (\n          <ReportModal\n            report={selectedReport}\n            onClose={handleCloseReportModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","export default function getDaysInterval(start, end) {\n  const daysDates = [];\n\n  const normalizedDay = (day) => new Date(day).toISOString().split(\"T\")[0];\n\n  const startInterval = new Date(start);\n  startInterval.setHours(0, 0, 0, 0);\n\n  const endInterval = new Date(end);\n  endInterval.setHours(0, 0, 0, 0);\n\n  const diffMilisecondsIntervals = endInterval - startInterval;\n  const numberOfDays = Math.ceil(\n    diffMilisecondsIntervals / (1000 * 60 * 60 * 24)\n  );\n\n  for (let index = 1; index <= numberOfDays + 1; index++) {\n    const currentDay = new Date(startInterval);\n    currentDay.setDate(startInterval.getDate() + index);\n    daysDates.push(normalizedDay(currentDay));\n  }\n\n  return daysDates;\n}\n"],"names":["calculateSleepHours","age","sleepRange","arguments","length","undefined","min","calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","calculateNominalBPAndPulse","weight","heartRate","Math","round","heartRateMin","heartRateMax","systolic","systolicMin","systolicMax","diastolic","hr","hrMin","hrMax","sys","sysMin","sysMax","dia","diaMin","diaMax","diastolicMin","diastolicMax","calculateDailySteps","currentWeight","desiredWeight","height","ageFactor","adjustment","baseSteps","weightDiff","abs","dailySteps","generateReportPdf","report","doc","jsPDF","setFontSize","text","concat","name","periodText","from","till","Date","toDateString","y","caloriesRecommended","stepsRecommended","sleepRecommended","pulseRecommended","systolicRecommended","diastolicRecommended","dates","setTextColor","tableRows","map","day","dateLabel","date","caloriesText","calories","stepsText","steps","sleepText","sleep","sleepValue","pulse","autoTable","head","body","startY","styles","fontSize","didParseCell","data","section","cell","includes","textColor","ReportModal","_ref","onClose","pdfUrl","setPdfUrl","useState","normalizedDay","useEffect","pdfBlob","output","url","URL","createObjectURL","_jsx","className","overlay","children","_jsxs","modal","src","title","width","style","border","buttons","onClick","handleDownload","fileName","save","downloadBtn","closeBtn","_user$dietaryInfo","navigate","useNavigate","user","privateDispatch","usePrivate","console","log","username","blood","bloodType","usersCondition","dietaryInfo","dailyCalorieIntake","heartsMetrix","toISOString","split","userReports","useMemo","reports","setReports","sortedReports","sort","a","b","now","today","startDate","setStartDate","endDate","setEndDate","setReport","prev","_objectSpread","daysInterval","start","end","daysDates","startInterval","setHours","endInterval","diffMilisecondsIntervals","numberOfDays","ceil","index","currentDay","setDate","getDate","push","getDaysInterval","filteredNewDates","_stepsForDay$interval","_sleepForDay$interval","consumedProductsForDay","consumedProducts","filter","product","totalCalories","reduce","acc","stepsForDay","find","step","totalSteps","interval","int","sleepForDay","sl","totalSleptHours","tillHour","tillMinute","tillAmPm","heartForDay","heart","userHeart","styledReportDate","selectedReport","setSelectedReport","cont","leftSideCont","datesCont","dateCont","dateTitle","onChange","e","target","value","max","type","addUpdateReport","generateBtn","display","flexDirection","alignItems","gap","background","borderRadius","padding","textAlign","color","rightSideCont","rightSideContList","rightSideContListItem","rightSideContListItemLeftCont","btnsCont","handleOpenReportModal","openReportModalBtn","handleDeleteReport","id","_id","deleteRport","clsx","deleteBtn","rightSideContListItemDatesCont","empty","handleCloseReportModal"],"sourceRoot":""}