{"version":3,"file":"static/js/292.51bfc7aa.chunk.js","mappings":"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","sources":["Utils/convertActivityToSteps.js","webpack://health-monitor/./src/pages/PsyhicalActivityPage/PsyhicalActivityPage.module.css?855d","webpack://health-monitor/./src/components/ActivitySelect/ActivitySelect.module.css?1197","components/ActivitySelect/ActivitySelect.jsx","components/ActivitySelect/index.js","pages/PsyhicalActivityPage/index.js","pages/PsyhicalActivityPage/PsyhicalActivityPage.jsx","Utils/calculateMinimumDailyActivity.js"],"sourcesContent":["// convertActivityToSteps.js\n\n/**\n * Converteste o activitate fizica in echivalent de pasi.\n *\n * @param {string} activity - tipul de activitate (ex: \"football\", \"tennis\", \"yoga\")\n * @param {number} minutes - durata in minute\n * @param {number} age - varsta utilizatorului\n * @param {number} weight - greutatea utilizatorului (kg)\n * @param {number} height - inaltimea utilizatorului (cm)\n * @param {\"min\"|\"max\"} [intensity] - nivelul de efort (\"min\" = moderat, \"max\" = intens)\n * @returns {number|string} pasi echivalenti sau mesaj de eroare\n */\nfunction convertActivityToSteps(\n  activity,\n  minutes,\n  age,\n  weight,\n  height,\n  intensity\n) {\n  if (!activity) {\n    return \"please input your exercise type\";\n  }\n\n  if (!age || !weight || !height) {\n    return 0;\n  }\n\n  // MET aproximativ pentru cateva activitati\n  const activityMET = {\n    football: 8,\n    tennis: 7.3,\n    basketball: 6.5,\n    gym: 5,\n    fitness: 6,\n    cycling: 6,\n    running: 9.8,\n    jogging: 7,\n    swimming: 8,\n    hockey: 7,\n    rugby: 8,\n    volley: 5,\n    yoga: 3,\n    walking: 3.5,\n    dancing: 5.5,\n    skiing: 7,\n    snowboarding: 6.8,\n    surfing: 5,\n    boxing: 7.8,\n    climbing: 8,\n  };\n\n  const met = activityMET[activity.toLowerCase()] || 4; // fallback MET pt sport necunoscut\n\n  // calorii arse/minut\n  let caloriesPerMin = 0.0175 * met * weight;\n\n  // aplicare intensitate\n  if (intensity === \"min\") {\n    caloriesPerMin *= 0.8; // moderat\n  } else if (intensity === \"max\") {\n    caloriesPerMin *= 1.2; // intens\n  }\n\n  // total calorii\n  const totalCalories = caloriesPerMin * minutes;\n\n  // ajustare in functie de varsta\n  const ageFactor = age < 30 ? 1.1 : age < 50 ? 1.0 : 0.9;\n\n  const adjustedCalories = totalCalories * ageFactor;\n\n  // conversie in pasi (1 pas â‰ˆ 0.04 kcal => ~25 pasi/kcal)\n  const steps = Math.round(adjustedCalories * 25);\n\n  return steps;\n}\n\nexport default convertActivityToSteps;\n\n// Exemple de utilizare\n// console.log(\n//   convertActivityToSteps(\"snowboarding\", 45, 30, 75, 180, \"max\"),\n//   \"pasi echivalenti (intens)\"\n// );\n// console.log(\n//   convertActivityToSteps(\"surfing\", 60, 28, 70, 175, \"min\"),\n//   \"pasi echivalenti (moderat)\"\n// );\n// console.log(convertActivityToSteps(\"\", 30, 25, 70, 175), \"=> missing activity\");\n// console.log(\n//   convertActivityToSteps(\"running\", 30, null, 70, 175),\n//   \"=> missing personal param\"\n// );\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"PsyhicalActivityPage_cont__ekuRl\",\"leftSideCont\":\"PsyhicalActivityPage_leftSideCont__jrCmT\",\"rightSideCont\":\"PsyhicalActivityPage_rightSideCont__8zjDj\",\"title\":\"PsyhicalActivityPage_title__4rJnJ\",\"graphCont\":\"PsyhicalActivityPage_graphCont__xeaV6\",\"rightSideContTitle\":\"PsyhicalActivityPage_rightSideContTitle__hIexH\",\"rightSideDate\":\"PsyhicalActivityPage_rightSideDate__DxwxO\",\"dateWrapper\":\"PsyhicalActivityPage_dateWrapper__G+IhJ\",\"paramInput\":\"PsyhicalActivityPage_paramInput__1LpJm\",\"fromToCont\":\"PsyhicalActivityPage_fromToCont__XYjNb\",\"fromToTitle\":\"PsyhicalActivityPage_fromToTitle__lQxpq\",\"fromExercise\":\"PsyhicalActivityPage_fromExercise__NMQmA\",\"from\":\"PsyhicalActivityPage_from__ngOis\",\"rem\":\"PsyhicalActivityPage_rem__prLsZ\",\"lineRowCont\":\"PsyhicalActivityPage_lineRowCont__AvVL4\",\"lineRow\":\"PsyhicalActivityPage_lineRow__xs+87\",\"activitySelect\":\"PsyhicalActivityPage_activitySelect__dy5Y+\",\"minutes\":\"PsyhicalActivityPage_minutes__BwmUC\",\"minMax\":\"PsyhicalActivityPage_minMax__g65Li\",\"timeInput\":\"PsyhicalActivityPage_timeInput__hrNzA\",\"removeBtn\":\"PsyhicalActivityPage_removeBtn__3kjpN\",\"dash\":\"PsyhicalActivityPage_dash__ZotMg\",\"twoDots\":\"PsyhicalActivityPage_twoDots__5hAHi\",\"ampmSelect\":\"PsyhicalActivityPage_ampmSelect__gdw+x\",\"addSleepCont\":\"PsyhicalActivityPage_addSleepCont__ADZwY\",\"addBtn\":\"PsyhicalActivityPage_addBtn__dPfpi\",\"adviceCont\":\"PsyhicalActivityPage_adviceCont__D7BTL\"};","// extracted by mini-css-extract-plugin\nexport default {\"selector\":\"ActivitySelect_selector__ZJWTA\",\"button\":\"ActivitySelect_button__GMBQU\",\"span\":\"ActivitySelect_span__kC5Bd\",\"spanDark\":\"ActivitySelect_spanDark__-UfcE\",\"svg\":\"ActivitySelect_svg__fg-DH\",\"svgDark\":\"ActivitySelect_svgDark__RiTlv\",\"options\":\"ActivitySelect_options__tQAam\",\"optionsDark\":\"ActivitySelect_optionsDark__zrVLA\",\"optionsViolet\":\"ActivitySelect_optionsViolet__3fpmK\",\"option\":\"ActivitySelect_option__fHjzJ\",\"optionDark\":\"ActivitySelect_optionDark__PpHpC\",\"activeOption\":\"ActivitySelect_activeOption__p+L7e\",\"activeOptionViolet\":\"ActivitySelect_activeOptionViolet__vg8ap\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { HiChevronDown, HiChevronUp } from \"react-icons/hi\";\nimport styles from \"./ActivitySelect.module.css\";\n\nconst activities = [\n  \"football\",\n  \"tennis\",\n  \"basketball\",\n  \"gym\",\n  \"fitness\",\n  \"cycling\",\n  \"running\",\n  \"jogging\",\n  \"swimming\",\n  \"hockey\",\n  \"rugby\",\n  \"volley\",\n  \"yoga\",\n  \"walking\",\n  \"dancing\",\n  \"skiing\",\n  \"snowboarding\",\n  \"surfing\",\n  \"boxing\",\n  \"climbing\",\n  \"other\",\n];\n\nexport default function ActivitySelect({ theme, value, onChange }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  const handleSelect = (selectedActivity) => {\n    onChange(selectedActivity);\n    setIsOpen(false);\n  };\n\n  // Ã®nchide dropdown dacÄƒ dai click Ã®n afarÄƒ\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className={styles.selector} ref={dropdownRef}>\n      <button className={styles.button} onClick={() => setIsOpen((p) => !p)}>\n        <span\n          className={clsx(\n            styles.span,\n            theme === \"dark\" || theme === \"violet\"\n              ? styles.spanDark\n              : styles.span\n          )}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </span>\n        {!isOpen ? (\n          <HiChevronDown\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        ) : (\n          <HiChevronUp\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        )}\n      </button>\n\n      {isOpen && (\n        <ul\n          className={clsx(\n            styles.options,\n            theme === \"dark\" ? styles.optionsDark : styles.options,\n            theme === \"violet\" ? styles.optionsViolet : styles.options\n          )}\n        >\n          {activities.map((option) => (\n            <li\n              key={option}\n              className={clsx(\n                styles.option,\n                theme === \"dark\" ? styles.optionDark : styles.option,\n                option === value &&\n                  (theme === \"violet\"\n                    ? styles.activeOptionViolet\n                    : styles.activeOption)\n              )}\n              onClick={() => handleSelect(option)}\n            >\n              {option.charAt(0).toUpperCase() + option.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nActivitySelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  theme: PropTypes.string,\n};\n","import ActivitySelect from \"./ActivitySelect\";\n\nexport default ActivitySelect;\n","import PsyhicalActivityPage from \"./PsyhicalActivityPage\";\n\nexport default PsyhicalActivityPage;\n","import React, { useState } from \"react\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\n\nimport convertActivityToSteps from \"../../Utils/convertActivityToSteps\";\nimport calculateMinimumDailyActivity from \"../../Utils/calculateMinimumDailyActivity\";\n\nimport styles from \"./PsyhicalActivityPage.module.css\";\nimport clsx from \"clsx\";\nimport ActivitySelect from \"../../components/ActivitySelect\";\n\nexport default function PsyhicalActivityPage() {\n  const { user } = usePrivate();\n  // console.log(\"user psyhical :\", user);\n\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n\n  const today = new Date().toISOString().split(\"T\")[0];\n\n  const [filterDate, setFilterDate] = useState(today);\n\n  // o linie iniÈ›ialÄƒ\n  const [lines, setLines] = useState([\n    {\n      exerciseType: \"walking\",\n      date: filterDate,\n      minutes: \"00\",\n      intensity: \"min\",\n      steps: 0,\n    },\n  ]);\n\n  const totalSteps = lines.map((line) => line.steps).reduce((a, b) => a + b, 0);\n  console.log(\"totalSteps :\", totalSteps);\n\n  const minDailyActivity = calculateMinimumDailyActivity(\n    age,\n    height,\n    weight,\n    desiredWeight\n  );\n\n  // funcÈ›ie pentru actualizarea unei valori Ã®ntr-o linie\n  const updateLine = (index, field, value) => {\n    const newLines = [...lines];\n\n    newLines[index][field] = value;\n    newLines[index].steps = convertActivityToSteps(\n      newLines[index].exerciseType,\n      newLines[index].minutes,\n      age,\n      weight,\n      height,\n      newLines[index].intensity\n    );\n\n    setLines(newLines);\n  };\n\n  // adaugÄƒ o linie nouÄƒ\n  const addLine = () => {\n    setLines([\n      ...lines,\n      {\n        exerciseType: \"walking\",\n        date: filterDate,\n        minutes: \"00\",\n        intensity: \"min\",\n        steps: 0,\n      },\n    ]);\n  };\n\n  // È™terge o linie dupÄƒ index\n  const removeLine = (index) => {\n    setLines(lines.filter((_, i) => i !== index));\n  };\n\n  const resetLines = () => {\n    setLines([\n      {\n        exerciseType: \"walking\",\n        date: filterDate,\n        minutes: \"00\",\n        intensity: \"min\",\n        steps: 0,\n      },\n    ]);\n  };\n\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Physical Activity</h1>\n        <div className={styles.graphCont}>Graphic container</div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Add exercise activities</h1>\n\n        {/* data */}\n        <div className={styles.rightSideDate}>\n          <div className={styles.dateWrapper}>\n            <input\n              max={today}\n              type=\"date\"\n              value={filterDate ?? today}\n              onChange={(e) => setFilterDate(e.target.value)}\n              className={styles.paramInput}\n            />\n          </div>\n          <p className={styles.rightSideDateP}>Choose date</p>\n        </div>\n\n        <div className={styles.fromToCont}>\n          <div className={styles.fromToTitle}>\n            <p className={styles.fromExercise}>Exercise Type</p>\n            <p className={styles.from}>Minutes</p>\n            <p className={styles.from}>Intensity</p>\n\n            <p className={styles.rem}>\n              {lines.length > 1 ? \"Delete\" : \"Reset\"}\n            </p>\n          </div>\n\n          <div className={styles.lineRowCont}>\n            {lines.map((line, idx) => (\n              <div key={`physical-${idx}`} className={styles.lineRow}>\n                {/* From */}\n                {/* <select\n                  className={clsx(styles.activitySelect)}\n                  id=\"activity-select\"\n                  value={line?.exerciseType}\n                  onChange={(e) =>\n                    updateLine(idx, \"exerciseType\", e.target.value)\n                  }\n                >\n                  {activities.map((act) => (\n                    <option key={act} value={act}>\n                      {act.charAt(0).toUpperCase() + act.slice(1)}\n                    </option>\n                  ))}\n                </select> */}\n                <ActivitySelect\n                  value={line.exerciseType}\n                  onChange={(val) => updateLine(idx, \"exerciseType\", val)}\n                  theme=\"light\"\n                />\n\n                <div className={styles.minutes}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"1\"\n                    value={formatNumber(line?.minutes)}\n                    onChange={(e) => updateLine(idx, \"minutes\", e.target.value)}\n                    className={clsx(styles.timeInput)}\n                  />\n                </div>\n                <div className={styles.minMax}>\n                  <select\n                    style={\n                      line?.intensity === \"min\"\n                        ? { color: \"green\", fontWeight: \"bold\" }\n                        : { color: \"var(--brand-color)\", fontWeight: \"bold\" }\n                    }\n                    value={line?.intensity}\n                    onChange={(e) =>\n                      updateLine(idx, \"intensity\", e.target.value)\n                    }\n                    className={styles.ampmSelect}\n                  >\n                    <option\n                      style={{ color: \"green\", fontWeight: \"bold\" }}\n                      value=\"min\"\n                    >\n                      Min\n                    </option>\n                    <option\n                      style={{\n                        color: \"var(--brand-color)\",\n                        fontWeight: \"bold\",\n                      }}\n                      value=\"max\"\n                    >\n                      Max\n                    </option>\n                  </select>\n                </div>\n                {/* buton remove */}\n                {lines.length > 1 ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => removeLine(idx)}\n                    className={styles.removeBtn}\n                  >\n                    âœ•\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={() => resetLines()}\n                    className={styles.removeBtn}\n                  >\n                    âœ•\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* add line */}\n        <div className={styles.addSleepCont}>\n          <p>Add exercise</p>\n          <button onClick={addLine} type=\"button\" className={styles.addBtn}>\n            Add +\n          </button>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {minDailyActivity !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {minDailyActivity} minutes of activity\n              everyday.\n            </p>\n          ) : (\n            <p\n              style={{ color: \"red\", lineHeight: \"inherit\" }}\n              className={styles.advicep}\n            >\n              It seems that you did not set up your personal info. Please check\n              Diet Calculator page to set things right !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * Calculeaza activitatea fizica minima zilnica in minute\n * pentru mentinerea sanatatii si atingerea obiectivului.\n *\n * @param {number} age - varsta utilizatorului (ani)\n * @param {number} height - inaltimea utilizatorului (cm)\n * @param {number} weight - greutatea actuala (kg)\n * @param {number} desiredWeight - greutatea dorita (kg)\n * @returns {number} activitate minima zilnica in minute\n */\nexport default function calculateMinimumDailyActivity(\n  age,\n  height,\n  weight,\n  desiredWeight\n) {\n  if (!age || !height || !weight || !desiredWeight) return 0;\n\n  const heightM = height / 100;\n  const bmiCurrent = weight / (heightM * heightM);\n  const bmiDesired = desiredWeight / (heightM * heightM);\n\n  // Activitate de baza pentru sanatate\n  let baseActivity = 30; // 30 min/zi minim\n\n  // Ajustare dupa varsta\n  if (age < 30) baseActivity *= 1;\n  else if (age < 50) baseActivity *= 1.1;\n  else baseActivity *= 1.2;\n\n  // Ajustare dupa obiectiv si diferenta BMI\n  const bmiDiff = bmiCurrent - bmiDesired;\n\n  let goalFactor = 1; // mentinere\n  if (bmiDiff > 0.5) {\n    // trebuie sa slabeasca\n    goalFactor = 1 + Math.min(bmiDiff / 5, 1); // creste activitatea pana la 100% in functie de diferenta\n  } else if (bmiDiff < -0.5) {\n    // trebuie sa se ingrase\n    goalFactor = 0.8; // mai putina activitate\n  }\n\n  const dailyActivityMinutes = baseActivity * goalFactor;\n\n  return Math.round(dailyActivityMinutes);\n}\n\n// Exemple\n// console.log(calculateMinimumDailyActivity(25, 175, 70, 65)); // slabire\n// console.log(calculateMinimumDailyActivity(35, 180, 80, 80)); // mentinere\n// console.log(calculateMinimumDailyActivity(50, 165, 60, 65)); // ingrasare\n// console.log(calculateMinimumDailyActivity(null, 165, 60, 65)); // lipseste age => 0\n"],"names":["activity","minutes","age","weight","height","intensity","caloriesPerMin","football","tennis","basketball","gym","fitness","cycling","running","jogging","swimming","hockey","rugby","volley","yoga","walking","dancing","skiing","snowboarding","surfing","boxing","climbing","toLowerCase","adjustedCalories","Math","round","activities","_ref","theme","value","onChange","isOpen","setIsOpen","useState","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","_jsxs","className","styles","ref","children","onClick","p","_jsx","clsx","charAt","toUpperCase","slice","HiChevronUp","HiChevronDown","map","option","_user$age","_user$height","_user$weight","_user$desiredWeight","user","usePrivate","desiredWeight","today","Date","toISOString","split","filterDate","setFilterDate","lines","setLines","exerciseType","date","steps","totalSteps","line","reduce","a","b","console","log","minDailyActivity","heightM","baseActivity","bmiDiff","goalFactor","min","dailyActivityMinutes","calculateMinimumDailyActivity","updateLine","index","field","newLines","convertActivityToSteps","cont","leftSideCont","title","graphCont","rightSideCont","rightSideDate","dateWrapper","max","type","e","paramInput","rightSideDateP","fromToCont","fromToTitle","fromExercise","from","rem","length","lineRowCont","idx","lineRow","ActivitySelect","val","step","num","String","padStart","timeInput","minMax","style","color","fontWeight","ampmSelect","removeLine","filter","_","i","removeBtn","concat","addSleepCont","addLine","addBtn","adviceCont","adviceTitle","advicep","lineHeight"],"sourceRoot":""}