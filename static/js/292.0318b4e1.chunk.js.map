{"version":3,"file":"static/js/292.0318b4e1.chunk.js","mappings":"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","sources":["Utils/calculateIntervalSleeptHours.js","Utils/getRegistrationsForAWeek.js","Utils/calculateDailySteps.js","Utils/formatDate.js","Utils/convertActivityToSteps.js","webpack://health-monitor/./src/components/ActivitySelect/ActivitySelect.module.css?1197","components/ActivitySelect/ActivitySelect.jsx","components/ActivitySelect/index.js","webpack://health-monitor/./src/pages/PsyhicalActivityPage/PsyhicalActivityPage.module.css?855d","pages/PsyhicalActivityPage/index.js","pages/PsyhicalActivityPage/PsyhicalActivityPage.jsx","Utils/calculateMinimumDailyActivity.js","webpack://health-monitor/./src/components/WeeklyChart/WeeklyChart.module.css?6b49","components/WeeklyChart/index.js","components/WeeklyChart/WeeklyChart.jsx"],"sourcesContent":["export default function calculateIntervalSleeptHours(\n  fromHour,\n  fromMinute,\n  fromAmPm,\n  toHour,\n  toMinute,\n  toAmPm\n) {\n  // normalize input (string -> number, trim)\n  const fH = Number(String(fromHour).trim());\n  //   console.log(\"fH :\", fH);\n\n  const fM = Number(String(fromMinute).trim());\n  const tH = Number(String(toHour).trim());\n  const tM = Number(String(toMinute).trim());\n  const fAP = String(fromAmPm || \"\")\n    .trim()\n    .toUpperCase();\n  //   console.log(\"fAP :\", fAP);\n\n  const tAP = String(toAmPm || \"\")\n    .trim()\n    .toUpperCase();\n\n  // validate\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\n\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\n  // 12 AM -> 0, 12 PM -> 12\n  let fromH24 = fH % 12;\n  if (fAP === \"PM\") fromH24 += 12;\n\n  let toH24 = tH % 12;\n  if (tAP === \"PM\") toH24 += 12;\n\n  const fromTotalMin = fromH24 * 60 + fM;\n  const toTotalMin = toH24 * 60 + tM;\n\n  let minutesSlept = toTotalMin - fromTotalMin;\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\n\n  const hours = minutesSlept / 60;\n  // return Number cu o zecimală\n  return parseFloat(hours.toFixed(1));\n}\n","import calculateIntervalSleeptHours from \"./calculateIntervalSleeptHours\";\n\nexport default function getRegistrationsForAWeek(userData, param) {\n  const date = new Date();\n  const day = date.getDay(); // 0 = Duminică, 1 = Luni, ..., 6 = Sâmbătă\n  const diffToMonday = day === 0 ? -6 : 1 - day;\n\n  const startOfTheWeek = new Date(date);\n  startOfTheWeek.setDate(date.getDate() + diffToMonday);\n  // console.log(\"date.getDate() :\", date.getDate());\n  // date.getDate() : 19\n\n  startOfTheWeek.setHours(0, 0, 0, 0);\n  // console.log(\"startOfTheWeek :\", startOfTheWeek);\n  // getRegistrationsForAWeek.js:13 startOfTheWeek : Mon Sep 15 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n  const weekTotal = [];\n\n  for (let index = 0; index < 7; index++) {\n    const currentDay = new Date(startOfTheWeek);\n    currentDay.setDate(startOfTheWeek.getDate() + index);\n\n    // console.log(\"currentDay:\", currentDay);\n    // getRegistrationsForAWeek.js:20 currentDay: Fri Sep 19 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\n\n    // console.log(\"startOfTheWeek.getDate() :\", startOfTheWeek.getDate());\n    // getRegistrationsForAWeek.js:21 startOfTheWeek.getDate() : 15\n\n    // console.log(\"currentDay.toDateString() :\", currentDay.toDateString());\n    // getRegistrationsForAWeek.js:22 currentDay.toDateString() : Thu Sep 18 2025\n\n    const dayData = userData.find(\n      (day) => new Date(day.date).toDateString() === currentDay.toDateString()\n    );\n\n    if (param === \"steps\") {\n      const totalSteps = dayData\n        ? dayData?.interval.reduce((acc, int) => acc + int.steps, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total steps\": totalSteps,\n      });\n    } else {\n      const totalSleptHours = dayData\n        ? dayData?.interval?.reduce((acc, int) => {\n            acc =\n              acc +\n              calculateIntervalSleeptHours(\n                int.fromHour,\n                int.fromMinute,\n                int.fromAmPm,\n                int.tillHour,\n                int.tillMinute,\n                int.tillAmPm\n              );\n            return acc;\n          }, 0)\n        : 0;\n      weekTotal.push({\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n        \"Total hours\": totalSleptHours,\n      });\n    }\n  }\n\n  return weekTotal;\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps =\n    age && currentWeight && desiredWeight & height\n      ? Math.round((baseSteps + adjustment) * ageFactor)\n      : 0;\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n","export default function formatDate(inputDate) {\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\n\n  const dateObj = new Date(year, month - 1, day);\n\n  const dayName = days[dateObj.getDay()];\n  const monthName = months[month - 1];\n\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\n}\n","export default function convertActivityToSteps(\n  activity,\n  minutes,\n  age,\n  weight,\n  height,\n  intensity\n) {\n  if (!activity) {\n    return \"please input your exercise type\";\n  }\n\n  if (!age || !weight || !height) {\n    return 0;\n  }\n\n  const minutesNum = Number(minutes) || 0;\n\n  const activityMET = {\n    football: 8,\n    tennis: 7.3,\n    basketball: 6.5,\n    gym: 5,\n    fitness: 6,\n    cycling: 6,\n    running: 9.8,\n    jogging: 7,\n    swimming: 8,\n    hockey: 7,\n    rugby: 8,\n    volley: 5,\n    yoga: 3,\n    walking: 3.5,\n    dancing: 5.5,\n    skiing: 7,\n    snowboarding: 6.8,\n    surfing: 5,\n    boxing: 7.8,\n    climbing: 8,\n  };\n\n  const met = activityMET[activity.toLowerCase()] || 4;\n\n  let caloriesPerMin = 0.0175 * met * weight;\n\n  if (intensity === \"min\") {\n    caloriesPerMin *= 0.8;\n  } else if (intensity === \"max\") {\n    caloriesPerMin *= 1.2;\n  }\n\n  const totalCalories = caloriesPerMin * minutesNum;\n\n  const ageFactor = age < 30 ? 1.1 : age < 50 ? 1.0 : 0.9;\n\n  const adjustedCalories = totalCalories * ageFactor;\n\n  const steps = Math.round(adjustedCalories * 25);\n\n  return steps;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"selector\":\"ActivitySelect_selector__ZJWTA\",\"button\":\"ActivitySelect_button__GMBQU\",\"span\":\"ActivitySelect_span__kC5Bd\",\"spanDark\":\"ActivitySelect_spanDark__-UfcE\",\"svg\":\"ActivitySelect_svg__fg-DH\",\"svgDark\":\"ActivitySelect_svgDark__RiTlv\",\"options\":\"ActivitySelect_options__tQAam\",\"optionsDark\":\"ActivitySelect_optionsDark__zrVLA\",\"optionsViolet\":\"ActivitySelect_optionsViolet__3fpmK\",\"option\":\"ActivitySelect_option__fHjzJ\",\"optionDark\":\"ActivitySelect_optionDark__PpHpC\",\"activeOption\":\"ActivitySelect_activeOption__p+L7e\",\"activeOptionViolet\":\"ActivitySelect_activeOptionViolet__vg8ap\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { HiChevronDown, HiChevronUp } from \"react-icons/hi\";\nimport styles from \"./ActivitySelect.module.css\";\n\nconst activities = [\n  \"football\",\n  \"tennis\",\n  \"basketball\",\n  \"gym\",\n  \"fitness\",\n  \"cycling\",\n  \"running\",\n  \"jogging\",\n  \"swimming\",\n  \"hockey\",\n  \"rugby\",\n  \"volley\",\n  \"yoga\",\n  \"walking\",\n  \"dancing\",\n  \"skiing\",\n  \"snowboarding\",\n  \"surfing\",\n  \"boxing\",\n  \"climbing\",\n  \"other\",\n];\n\nexport default function ActivitySelect({ theme, value, onChange }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  const handleSelect = (selectedActivity) => {\n    onChange(selectedActivity);\n    setIsOpen(false);\n  };\n\n  // închide dropdown dacă dai click în afară\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className={styles.selector} ref={dropdownRef}>\n      <button className={styles.button} onClick={() => setIsOpen((p) => !p)}>\n        <span\n          className={clsx(\n            styles.span,\n            theme === \"dark\" || theme === \"violet\"\n              ? styles.spanDark\n              : styles.span\n          )}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </span>\n        {!isOpen ? (\n          <HiChevronDown\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        ) : (\n          <HiChevronUp\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        )}\n      </button>\n\n      {isOpen && (\n        <ul\n          className={clsx(\n            styles.options,\n            theme === \"dark\" ? styles.optionsDark : styles.options,\n            theme === \"violet\" ? styles.optionsViolet : styles.options\n          )}\n        >\n          {activities.map((option) => (\n            <li\n              key={option}\n              className={clsx(\n                styles.option,\n                theme === \"dark\" ? styles.optionDark : styles.option,\n                option === value &&\n                  (theme === \"violet\"\n                    ? styles.activeOptionViolet\n                    : styles.activeOption)\n              )}\n              onClick={() => handleSelect(option)}\n            >\n              {option.charAt(0).toUpperCase() + option.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nActivitySelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  theme: PropTypes.string,\n};\n","import ActivitySelect from \"./ActivitySelect\";\n\nexport default ActivitySelect;\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"PsyhicalActivityPage_cont__ekuRl\",\"leftSideCont\":\"PsyhicalActivityPage_leftSideCont__jrCmT\",\"rightSideCont\":\"PsyhicalActivityPage_rightSideCont__8zjDj\",\"rightSideUpCont\":\"PsyhicalActivityPage_rightSideUpCont__rw3Zv\",\"title\":\"PsyhicalActivityPage_title__4rJnJ\",\"graphCont\":\"PsyhicalActivityPage_graphCont__xeaV6\",\"rightSideContTitle\":\"PsyhicalActivityPage_rightSideContTitle__hIexH\",\"rightSideDate\":\"PsyhicalActivityPage_rightSideDate__DxwxO\",\"dateWrapper\":\"PsyhicalActivityPage_dateWrapper__G+IhJ\",\"paramInput\":\"PsyhicalActivityPage_paramInput__1LpJm\",\"fromToCont\":\"PsyhicalActivityPage_fromToCont__XYjNb\",\"fromToTitle\":\"PsyhicalActivityPage_fromToTitle__lQxpq\",\"fromExercise\":\"PsyhicalActivityPage_fromExercise__NMQmA\",\"from\":\"PsyhicalActivityPage_from__ngOis\",\"rem\":\"PsyhicalActivityPage_rem__prLsZ\",\"lineRowCont\":\"PsyhicalActivityPage_lineRowCont__AvVL4\",\"lineRow\":\"PsyhicalActivityPage_lineRow__xs+87\",\"activitySelect\":\"PsyhicalActivityPage_activitySelect__dy5Y+\",\"minutes\":\"PsyhicalActivityPage_minutes__BwmUC\",\"minMax\":\"PsyhicalActivityPage_minMax__g65Li\",\"timeInput\":\"PsyhicalActivityPage_timeInput__hrNzA\",\"removeBtn\":\"PsyhicalActivityPage_removeBtn__3kjpN\",\"dash\":\"PsyhicalActivityPage_dash__ZotMg\",\"twoDots\":\"PsyhicalActivityPage_twoDots__5hAHi\",\"ampmSelect\":\"PsyhicalActivityPage_ampmSelect__gdw+x\",\"addSleepCont\":\"PsyhicalActivityPage_addSleepCont__ADZwY\",\"addBtn\":\"PsyhicalActivityPage_addBtn__dPfpi\",\"saveBtn\":\"PsyhicalActivityPage_saveBtn__u+nWb\",\"adviceCont\":\"PsyhicalActivityPage_adviceCont__D7BTL\",\"navBtn\":\"PsyhicalActivityPage_navBtn__hUp5q\"};","import PsyhicalActivityPage from \"./PsyhicalActivityPage\";\n\nexport default PsyhicalActivityPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { setTotalStepsForToday } from \"../../redux/private/privateSlice\";\nimport { setTotalSteps } from \"../../redux/private/operationsPrivate\";\n\nimport convertActivityToSteps from \"../../Utils/convertActivityToSteps\";\nimport calculateMinimumDailyActivity from \"../../Utils/calculateMinimumDailyActivity\";\nimport formatDate from \"../../Utils/formatDate\";\n\nimport clsx from \"clsx\";\n\nimport ActivitySelect from \"../../components/ActivitySelect\";\n\nimport styles from \"./PsyhicalActivityPage.module.css\";\nimport getRegistrationsForAWeek from \"../../Utils/getRegistrationsForAWeek\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport WeeklyChart from \"../../components/WeeklyChart\";\n\nexport default function PsyhicalActivityPage() {\n  const navigate = useNavigate();\n\n  const { user, privateDispatch } = usePrivate();\n  // console.log(\"user psyhical :\", user);\n\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n\n  const steps = useMemo(() => user?.steps || [], [user?.steps]);\n\n  const minDailyActivitySteps = calculateMinimumDailyActivity(\n    age,\n    height,\n    weight,\n    desiredWeight\n  );\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n  // console.log(\"filterDate :\", filterDate);\n\n  const now = useMemo(() => new Date(), []);\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\n\n  const isTodaycondition = filterDate === today;\n  // console.log(\"isTodaycondition :\", isTodaycondition);\n\n  const lines = useMemo(\n    () =>\n      steps.length > 0\n        ? [...steps]\n        : [\n            {\n              date: now,\n              interval: [\n                {\n                  exerciseType: \"walking\",\n                  minutes: \"00\",\n                  intensity: \"min\",\n                  steps: 0,\n                },\n              ],\n            },\n          ],\n    [steps, now]\n  );\n\n  const filteredSteps = steps.find(\n    (step) => new Date(step.date).toISOString().split(\"T\")[0] === filterDate\n  );\n\n  const [interval, setInterval] = useState([\n    {\n      date: now,\n      interval: [\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ],\n    },\n  ]);\n  // console.log(\"interval :\", interval);\n\n  useEffect(() => {\n    if (filteredSteps) {\n      const sortedIntervals = [...filteredSteps.interval];\n      setInterval(sortedIntervals);\n    }\n  }, [filteredSteps]);\n\n  useEffect(() => {\n    const dayExercises = lines.find(\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n    );\n\n    if (dayExercises) {\n      const sortedIntervals = [...dayExercises.interval];\n      setInterval(sortedIntervals);\n    } else {\n      setInterval([\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ]);\n    }\n  }, [filterDate, lines, now, steps]);\n\n  const totalSteps = interval.reduce((acc, int) => {\n    const stepsVal = Number(int.steps) || 0;\n    return acc + stepsVal;\n  }, 0);\n\n  // console.log(\"totalSteps :\", totalSteps);\n\n  useEffect(() => {\n    privateDispatch(setTotalStepsForToday(totalSteps));\n  }, [privateDispatch, totalSteps]);\n\n  const lastInterval = interval[interval.length - 1];\n\n  const emptyLineCondition = (line) =>\n    Number(String(line.minutes).trim()) === 0;\n\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\n\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\n    const newInterval = interval.map((int, idx) =>\n      idx === intervalIdx\n        ? {\n            ...int,\n            [field]: value,\n            steps: convertActivityToSteps(\n              field === \"exerciseType\" ? value : int.exerciseType,\n              field === \"minutes\"\n                ? Math.max(0, parseInt(value, 10) || 0)\n                : parseInt(int.minutes, 10) || 0,\n              age,\n              weight,\n              height,\n              field === \"intensity\" ? value : int.intensity\n            ),\n          }\n        : { ...int }\n    );\n\n    setInterval(newInterval);\n  };\n\n  const addFilteredLineNewInterval = () => {\n    const newInterval = [...interval] || [];\n    newInterval.push({\n      exerciseType: \"walking\",\n      minutes: \"00\",\n      intensity: \"min\",\n      steps: 0,\n    });\n    setInterval(newInterval);\n  };\n\n  const removeFilteredLineInterval = (index) => {\n    const newInterval = interval.filter((_, i) => i !== index);\n    setInterval(newInterval);\n  };\n\n  const resetFilteredLinesInterval = () => {\n    setInterval([\n      {\n        exerciseType: \"walking\",\n        date: filterDate,\n        minutes: \"00\",\n        intensity: \"min\",\n        steps: 0,\n      },\n    ]);\n  };\n\n  const formatNumber = (num) => String(num).replace(/^0+(?=\\d)/, \"\");\n\n  function handleSave() {\n    const lastIntervalIndex = interval.length - 1;\n    const intervalToSave = emptyLastIntervalLineCondition\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\n      : [...interval];\n\n    // console.log(\"intervalToSave :\", intervalToSave);\n\n    privateDispatch(\n      setTotalSteps({ date: filterDate, interval: intervalToSave })\n    );\n  }\n\n  const weeklySteps = getRegistrationsForAWeek(steps, \"steps\");\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Physical Activity</h1>\n          <div className={styles.graphCont}>\n            {\" \"}\n            <WeeklyChart\n              target={neededSteps}\n              weeklyData={weeklySteps}\n              type={\"steps\"}\n            />\n          </div>\n        </div>\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Steps Equivalent of Exercises </h2>\n          {totalSteps !== 0 ? (\n            <p\n              style={{\n                fontSize: \"clamp(11px, 1.5vw, 12px)\",\n                color: totalSteps < totalSteps * 0.6 ? \"red\" : undefined,\n              }}\n              className={styles.advicep}\n            >\n              <span style={{ marginRight: \"2px\" }}>\n                Total Steps for{\" \"}\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}:{\" \"}\n              </span>{\" \"}\n              <span>{totalSteps} steps</span>\n            </p>\n          ) : (\n            <p style={{ color: \"red\" }} className={styles.advicep}>\n              No Physical Activities records for{\" \"}\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Add exercise activities</h1>\n          {/* data */}\n          <div className={styles.rightSideDate}>\n            <div className={styles.dateWrapper}>\n              <input\n                max={today}\n                type=\"date\"\n                value={filterDate ?? today}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className={styles.paramInput}\n              />\n            </div>\n            <p className={styles.rightSideDateP}>Choose date</p>\n          </div>\n          <div className={styles.fromToCont}>\n            <div className={styles.fromToTitle}>\n              <p className={styles.fromExercise}>Exercise Type</p>\n              <p className={styles.from}>Minutes</p>\n              <p className={styles.from}>Intensity</p>\n              <p className={styles.rem}>\n                {interval.length > 1 ? \"Delete\" : \"Reset\"}\n              </p>\n            </div>\n            <div className={styles.lineRowCont}>\n              {interval.map((line, idx) => (\n                <div key={`physical-${idx}`} className={styles.lineRow}>\n                  <ActivitySelect\n                    value={line?.exerciseType ?? \"walking\"}\n                    onChange={(val) =>\n                      updateFilteredLineInterval(idx, \"exerciseType\", val)\n                    }\n                    theme=\"light\"\n                  />\n                  <div className={styles.minutes}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"1\"\n                      value={formatNumber(line?.minutes)}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"minutes\",\n                          e.target.value.replace(/^0+(?=\\d)/, \"\") || \"0\" // eliminăm 0 la început\n                        )\n                      }\n                      className={clsx(styles.timeInput)}\n                    />\n                  </div>\n                  <div className={styles.minMax}>\n                    <select\n                      style={\n                        line?.intensity === \"min\"\n                          ? { color: \"green\", fontWeight: \"bold\" }\n                          : { color: \"var(--brand-color)\", fontWeight: \"bold\" }\n                      }\n                      value={line?.intensity}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"intensity\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option\n                        style={{ color: \"green\", fontWeight: \"bold\" }}\n                        value=\"min\"\n                      >\n                        Min\n                      </option>\n                      <option\n                        style={{\n                          color: \"var(--brand-color)\",\n                          fontWeight: \"bold\",\n                        }}\n                        value=\"max\"\n                      >\n                        Max\n                      </option>\n                    </select>\n                  </div>\n                  {/* buton remove */}\n                  {interval.length > 1 ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFilteredLineInterval(idx)}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={() => resetFilteredLinesInterval()}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* add line */}\n          <div className={styles.addSleepCont}>\n            <p>Add exercise</p>\n            <button\n              onClick={() => {\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\n              }}\n              type=\"button\"\n              className={styles.addBtn}\n            >\n              Add +\n            </button>\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\n              interval.length > 1) && (\n              <button\n                onClick={handleSave}\n                type=\"button\"\n                className={styles.saveBtn}\n              >\n                Save\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {minDailyActivitySteps !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {minDailyActivitySteps} minutes of activity\n              everyday.\n            </p>\n          ) : (\n            <p\n              style={{\n                color: \"red\",\n                background: \"var(--Gray5)\",\n                textAlign: \"left\",\n                flexWrap: \"wrap\",\n                gap: \"3px\",\n                justifyContent: \"flex-start\",\n                height: \"fit-content\",\n              }}\n              className={styles.advicep}\n            >\n              Personal info missing. Please click\n              <button\n                className={styles.navBtn}\n                onClick={() => navigate(\"/\")}\n                type=\"button\"\n              >\n                Diet Calculator\n              </button>{\" \"}\n              to update !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * Calculeaza activitatea fizica minima zilnica in minute\n * pentru mentinerea sanatatii si atingerea obiectivului.\n *\n * @param {number} age - varsta utilizatorului (ani)\n * @param {number} height - inaltimea utilizatorului (cm)\n * @param {number} weight - greutatea actuala (kg)\n * @param {number} desiredWeight - greutatea dorita (kg)\n * @returns {number} activitate minima zilnica in minute\n */\nexport default function calculateMinimumDailyActivity(\n  age,\n  height,\n  weight,\n  desiredWeight\n) {\n  if (!age || !height || !weight || !desiredWeight) return 0;\n\n  const heightM = height / 100;\n  const bmiCurrent = weight / (heightM * heightM);\n  const bmiDesired = desiredWeight / (heightM * heightM);\n\n  // Activitate de baza pentru sanatate\n  let baseActivity = 30; // 30 min/zi minim\n\n  // Ajustare dupa varsta\n  if (age < 30) baseActivity *= 1;\n  else if (age < 50) baseActivity *= 1.1;\n  else baseActivity *= 1.2;\n\n  // Ajustare dupa obiectiv si diferenta BMI\n  const bmiDiff = bmiCurrent - bmiDesired;\n\n  let goalFactor = 1; // mentinere\n  if (bmiDiff > 0.5) {\n    // trebuie sa slabeasca\n    goalFactor = 1 + Math.min(bmiDiff / 5, 1); // creste activitatea pana la 100% in functie de diferenta\n  } else if (bmiDiff < -0.5) {\n    // trebuie sa se ingrase\n    goalFactor = 0.8; // mai putina activitate\n  }\n\n  const dailyActivityMinutes = baseActivity * goalFactor;\n\n  return Math.round(dailyActivityMinutes);\n}\n\n// Exemple\n// console.log(calculateMinimumDailyActivity(25, 175, 70, 65)); // slabire\n// console.log(calculateMinimumDailyActivity(35, 180, 80, 80)); // mentinere\n// console.log(calculateMinimumDailyActivity(50, 165, 60, 65)); // ingrasare\n// console.log(calculateMinimumDailyActivity(null, 165, 60, 65)); // lipseste age => 0\n","// extracted by mini-css-extract-plugin\nexport default {\"barChart\":\"WeeklyChart_barChart__AHVA8\"};","import WeeklyChart from \"./WeeklyChart\";\n\nexport default WeeklyChart;\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Cell,\n} from \"recharts\";\n\nimport styles from \"./WeeklyChart.module.css\";\n\nexport default function WeeklyChart({ weeklyData, type, target }) {\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <ResponsiveContainer width=\"100%\">\n        <BarChart\n          data={weeklyData}\n          margin={{\n            top: 15,\n            right: 15,\n            left: type === \"steps\" ? -10 : -25,\n            bottom: 5,\n          }}\n          className={styles.barChart}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"day\" />\n          <YAxis />\n          <Tooltip\n            contentStyle={{ color: \"var(--brand-color)\", fontWeight: \"700\" }}\n          />\n          <Bar\n            dataKey={type === \"sleep\" ? \"Total hours\" : \"Total steps\"}\n            radius={[6, 6, 0, 0]}\n          >\n            {weeklyData.map((entry, index) => {\n              const value =\n                type === \"sleep\" ? entry[\"Total hours\"] : entry[\"Total steps\"];\n\n              const fillColor =\n                (type === \"sleep\" &&\n                  (value < target * 0.6 || value > target + 1)) ||\n                (type === \"steps\" && value < target * 0.6)\n                  ? \"red\"\n                  : type === \"steps\" &&\n                    value >= target * 0.6 &&\n                    value <= target * 0.8\n                  ? \"var(--brand-color)\"\n                  : \"#4cafef\";\n              return <Cell key={`cell-${index}`} fill={fillColor} />;\n            })}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n"],"names":["calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","getRegistrationsForAWeek","userData","param","date","Date","day","getDay","diffToMonday","startOfTheWeek","setDate","getDate","setHours","weekTotal","index","currentDay","dayData","find","toDateString","totalSteps","interval","reduce","acc","int","steps","push","toLocaleDateString","weekday","_dayData$interval","totalSleptHours","tillHour","tillMinute","tillAmPm","calculateDailySteps","age","currentWeight","desiredWeight","height","ageFactor","adjustment","baseSteps","weightDiff","Math","abs","dailySteps","round","formatDate","inputDate","year","month","split","map","dayName","monthName","concat","padStart","convertActivityToSteps","activity","minutes","weight","intensity","minutesNum","caloriesPerMin","football","tennis","basketball","gym","fitness","cycling","running","jogging","swimming","hockey","rugby","volley","yoga","walking","dancing","skiing","snowboarding","surfing","boxing","climbing","toLowerCase","adjustedCalories","activities","_ref","theme","value","onChange","isOpen","setIsOpen","useState","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","_jsxs","className","styles","ref","children","onClick","p","_jsx","clsx","charAt","slice","HiChevronUp","HiChevronDown","option","_user$age","_user$height","_user$weight","_user$desiredWeight","navigate","useNavigate","user","privateDispatch","usePrivate","useMemo","minDailyActivitySteps","heightM","baseActivity","bmiDiff","goalFactor","min","dailyActivityMinutes","calculateMinimumDailyActivity","filterDate","setFilterDate","toISOString","now","today","getFullYear","getMonth","isTodaycondition","lines","length","exerciseType","filteredSteps","step","setInterval","sortedIntervals","dayExercises","line","setTotalStepsForToday","lastInterval","emptyLastIntervalLineCondition","updateFilteredLineInterval","intervalIdx","field","newInterval","idx","_objectSpread","max","parseInt","weeklySteps","neededSteps","cont","leftSideCont","rightSideUpCont","title","graphCont","WeeklyChart","weeklyData","type","adviceCont","adviceTitle","style","fontSize","color","undefined","advicep","marginRight","rightSideCont","rightSideDate","dateWrapper","e","paramInput","rightSideDateP","fromToCont","fromToTitle","fromExercise","from","rem","lineRowCont","_line$exerciseType","num","lineRow","ActivitySelect","val","replace","timeInput","minMax","fontWeight","ampmSelect","filter","_","i","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","addBtn","lastIntervalIndex","intervalToSave","setTotalSteps","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","width","ResponsiveContainer","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","contentStyle","Bar","radius","entry","fillColor","Cell","fill"],"sourceRoot":""}