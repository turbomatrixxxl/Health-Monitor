{"version":3,"file":"static/js/791.ad2898f3.chunk.js","mappings":"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","sources":["Utils/getFormattedDate.js","Utils/calculateNominalBPAndPulse.js","webpack://health-monitor/./src/pages/DailyProgressPage/DailyProgressPage.module.css?310a","pages/DailyProgressPage/index.js","pages/DailyProgressPage/DailyProgressPage.jsx","Utils/calculateDailySteps.js","Utils/calculateSleepHours.js"],"sourcesContent":["export default function getFormattedDate() {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Add leading zero if needed\n  const day = String(today.getDate()).padStart(2, \"0\"); // Add leading zero if needed\n  return `${year}-${month}-${day}`; // Return in YYYY-MM-DD format\n}\n","/**\n * Calculate nominal heart rate and blood pressure with age- and weight-adjusted limits\n * @param {number} age - age in years\n * @param {number} weight - weight in kg\n * @returns {object} - { heartRate, heartRateMin, heartRateMax, systolic, systolicMin, systolicMax, diastolic, diastolicMin, diastolicMax }\n */\nexport default function calculateBPAndPulse(age, weight) {\n  if (!age) {\n    return 0;\n  }\n\n  // Puls nominal: 70 ± 10, ajustat cu varsta\n  const heartRate = Math.round(70 + (age - 30) * 0.3);\n  const heartRateMin = Math.round(heartRate - 10);\n  const heartRateMax = Math.round(heartRate + 10);\n\n  // Tensiune arterială nominală: sistolic 110 ± 10, diastolic 70 ± 5, ajustate cu vârsta\n  const systolic = Math.round(110 + age * 0.5);\n  const systolicMin = Math.round(systolic - 10);\n  const systolicMax = Math.round(systolic + 10);\n\n  const diastolic = Math.round(70 + age * 0.2);\n  const diastolicMin = Math.round(diastolic - 5);\n  const diastolicMax = Math.round(diastolic + 5);\n\n  // Ajustare ușoară în funcție de greutate\n  let hr = heartRate,\n    hrMin = heartRateMin,\n    hrMax = heartRateMax;\n  let sys = systolic,\n    sysMin = systolicMin,\n    sysMax = systolicMax;\n  let dia = diastolic,\n    diaMin = diastolicMin,\n    diaMax = diastolicMax;\n\n  if (weight) {\n    if (weight > 80) {\n      hr += 2;\n      hrMin += 2;\n      hrMax += 2;\n      sys += 3;\n      sysMin += 3;\n      sysMax += 3;\n      dia += 2;\n      diaMin += 2;\n      diaMax += 2;\n    } else if (weight < 60) {\n      hr -= 2;\n      hrMin -= 2;\n      hrMax -= 2;\n      sys -= 3;\n      sysMin -= 3;\n      sysMax -= 3;\n      dia -= 2;\n      diaMin -= 2;\n      diaMax -= 2;\n    }\n  }\n\n  return {\n    heartRate: hr,\n    heartRateMin: hrMin,\n    heartRateMax: hrMax,\n    systolic: sys,\n    systolicMin: sysMin,\n    systolicMax: sysMax,\n    diastolic: dia,\n    diastolicMin: diaMin,\n    diastolicMax: diaMax,\n  };\n}\n\nconst noAge = calculateBPAndPulse();\nconsole.log(\"noAge :\", noAge);\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"DailyProgressPage_cont__qU3n8\",\"leftSideCont\":\"DailyProgressPage_leftSideCont__9j7vU\",\"rightSideCont\":\"DailyProgressPage_rightSideCont__JQ0AJ\",\"title\":\"DailyProgressPage_title__hqKcS\",\"graphCont\":\"DailyProgressPage_graphCont__kRD30\",\"graphicResult\":\"DailyProgressPage_graphicResult__GRR6B\",\"needed\":\"DailyProgressPage_needed__g38cj\",\"badResult\":\"DailyProgressPage_badResult__qJTQr\",\"mediumResult\":\"DailyProgressPage_mediumResult__J-76v\",\"goodResult\":\"DailyProgressPage_goodResult__rzxYK\",\"metrixCont\":\"DailyProgressPage_metrixCont__liScv\",\"metrixTitle\":\"DailyProgressPage_metrixTitle__yNyIH\"};","import DailyProgressPage from \"./DailyProgressPage\";\n\nexport default DailyProgressPage;\n","import React, { useEffect } from \"react\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { useAuth } from \"../../hooks/useAuth\";\n\nimport { fetchConsumedProductsForSpecificDay } from \"../../redux/private/operationsPrivate\";\n\nimport getFormattedDate from \"../../Utils/getFormattedDate\";\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\nimport calculateNominalBPAndPulse from \"../../Utils/calculateNominalBPAndPulse\";\n\nimport clsx from \"clsx\";\n\nimport styles from \"./DailyProgressPage.module.css\";\n\nexport default function DailyProgressPage() {\n  const { dailyCalorieSummary, privateDispatch } = usePrivate();\n  //   console.log(\"dailyCalorieSummary :\", dailyCalorieSummary);\n\n  const { user } = useAuth();\n  console.log(\"user :\", user);\n\n  const name = user?.username ?? \"User\";\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\n  const neededSleep = calculateSleepHours(age);\n  const heartsMetrics = calculateNominalBPAndPulse(age, weight);\n  const {\n    heartRate,\n    heartRateMin,\n    heartRateMax,\n    systolic,\n    systolicMin,\n    systolicMax,\n    diastolic,\n    diastolicMin,\n    diastolicMax,\n  } = heartsMetrics;\n\n  useEffect(() => {\n    const today = getFormattedDate(); // Ensure the correct format YYYY-MM-DD\n    // console.log(\"Fetching data for date:\", today);\n\n    privateDispatch(fetchConsumedProductsForSpecificDay({ date: today })); // Pass as an object\n  }, [privateDispatch]);\n\n  function formatNumber(num) {\n    return num.toLocaleString(\"en-US\");\n  }\n\n  const condition = age && height && weight && desiredWeight;\n\n  const totalCalories = condition ? dailyCalorieSummary?.dailyCalorieIntake : 0;\n  const caloriesPer = condition\n    ? dailyCalorieSummary?.percentageCaloriesConsumed\n    : 0;\n  const caloriesLeft = condition ? dailyCalorieSummary?.remainingCalories : 0;\n\n  const steps = 20000;\n  const stepsPer = condition ? Math.round((100 * steps) / neededSteps) : 0;\n  const stepsLeft = condition ? neededSteps - steps : 0;\n  //   console.log(\"stepsLeft :\", stepsLeft);\n\n  const sleep = 10;\n  const sleepPer = condition ? Math.round((100 * sleep) / neededSleep) : 0;\n  const sleepLeft = condition ? neededSleep - sleep : 0;\n  //   console.log(\"over :\", sleepPer > 100);\n\n  const systolicR = 130;\n  const diastolicR = 60;\n  const pulse = 100;\n\n  function totalGoalsPercentage(cal, st, sl) {\n    let calories = cal ?? 0;\n    let steps = st ?? 0;\n    let sleep = sl ?? 0;\n\n    if (cal > 100) calories = 100;\n    if (sl > 100) sleep = 100;\n\n    const goalsPercentage = (calories + steps + sleep) / 3;\n\n    return Math.floor(goalsPercentage);\n  }\n\n  const globalPercentage = totalGoalsPercentage(\n    caloriesPer,\n    stepsPer,\n    sleepPer\n  );\n\n  //   console.log(\"globalPercentage :\", globalPercentage);\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <h1 className={styles.title}>Daily Progress</h1>\n        <div className={styles.graphCont}>\n          <div>Graphic container</div>\n          <p\n            className={clsx(\n              styles.graphicResult,\n              globalPercentage <= 50 && styles.badResult,\n              globalPercentage > 50 &&\n                globalPercentage < 80 &&\n                styles.mediumResult,\n              globalPercentage >= 80 && styles.goodResult\n            )}\n          >\n            You have reached {globalPercentage}% of your goals today\n          </p>\n        </div>\n        <div className={clsx(styles.metrixCont, styles.alerts)}>\n          <h3 className={styles.title}>Dayly Reminders</h3>\n        </div>\n      </div>\n      <div className={styles.rightSideCont}>\n        <h1 className={styles.title}>Daily Records</h1>\n        {condition ? (\n          <>\n            <div className={styles.metrixCont}>\n              {totalCalories ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Calories to consume :\n                  </span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(totalCalories)} calories\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Calories consumed :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (caloriesPer === 0 ||\n                      caloriesPer > 100 ||\n                      caloriesPer <= 50) &&\n                      styles.badResult,\n                    caloriesPer < 80 &&\n                      caloriesLeft > 50 &&\n                      styles.mediumResult,\n                    caloriesPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {caloriesPer}%\n                </span>\n              </p>\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Remaining calories :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (caloriesPer === 0 ||\n                      caloriesPer > 100 ||\n                      caloriesPer <= 50) &&\n                      styles.badResult,\n                    caloriesPer < 80 &&\n                      caloriesLeft > 50 &&\n                      styles.mediumResult,\n                    caloriesPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {formatNumber(caloriesLeft)} calories\n                </span>\n              </p>\n            </div>\n            <div className={styles.metrixCont}>\n              {neededSteps !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Steps to do :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {formatNumber(neededSteps)} steps\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Steps taken :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                    stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                    stepsPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {stepsPer}%\n                </span>\n              </p>\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>\n                  Remaining steps to do :\n                </span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (stepsPer === 0 || stepsPer <= 50) && styles.badResult,\n                    stepsPer < 80 && stepsPer > 50 && styles.mediumResult,\n                    stepsPer >= 80 && styles.goodResult\n                  )}\n                >\n                  {formatNumber(stepsLeft)} steps\n                </span>\n              </p>\n            </div>\n            <div className={styles.metrixCont}>\n              {neededSleep !== 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>Hours to sleep :</span>\n                  <span className={clsx(styles.metrixQuantity, styles.needed)}>\n                    {neededSleep.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              <p className={styles.metrixTitle}>\n                <span className={styles.metrixName}>Hours slept :</span>\n                <span\n                  className={clsx(\n                    styles.metrixQuantity,\n                    (sleepPer === 0 || sleepPer <= 50 || sleepPer > 100) &&\n                      styles.badResult,\n                    sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                    sleepPer >= 80 && sleepPer < 100 && styles.goodResult\n                  )}\n                >\n                  {sleepPer}%\n                </span>\n              </p>\n              {sleepLeft > 0 ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>\n                    Remaining steps to do :\n                  </span>\n                  <span\n                    className={clsx(\n                      styles.metrixQuantity,\n                      (sleepPer === 0 || sleepPer <= 50) && styles.badResult,\n                      sleepPer < 80 && sleepPer > 50 && styles.mediumResult,\n                      sleepPer >= 80 && styles.goodResult\n                    )}\n                  >\n                    {sleepLeft.toFixed(1)} hr\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems overslept {Math.abs(sleepLeft)} hr. Please sleep less\n                  !\n                </p>\n              )}\n            </div>\n            <div className={styles.metrixCont}>\n              {heartsMetrics !== 0 ? (\n                <>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal BP :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {systolic}/{diastolic} mm/Hg\n                    </span>\n                  </p>\n                  <p className={styles.metrixTitle}>\n                    <span className={styles.metrixName}>Normal Pulse :</span>\n                    <span\n                      className={clsx(styles.metrixQuantity, styles.needed)}\n                    >\n                      {heartRate} bpm\n                    </span>\n                  </p>\n                </>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that you did not set up your personal info. Please\n                  check Diet Calculator page to set things right !\n                </p>\n              )}\n              {systolicR >= systolicMin &&\n              systolicR <= systolicMax &&\n              diastolicR >= heartRateMin &&\n              diastolicR <= heartRateMax ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>{name} BP :</span>\n                  <span\n                    className={clsx(styles.metrixQuantity, styles.goodResult)}\n                  >\n                    {systolicR}/{diastolicR} mm/Hg\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that your blood pressure is too{\" \"}\n                  {diastolicR < diastolicMin || systolicR < systolicMin\n                    ? \"low\"\n                    : diastolicR > diastolicMax || systolicR > systolicMax\n                    ? \"high\"\n                    : \"\"}\n                  ! Please consult doctor !\n                </p>\n              )}\n              {pulse >= heartRateMin && pulse <= heartRateMax ? (\n                <p className={styles.metrixTitle}>\n                  <span className={styles.metrixName}>{name} BP :</span>\n                  <span\n                    className={clsx(styles.metrixQuantity, styles.goodResult)}\n                  >\n                    {pulse} bpm\n                  </span>\n                </p>\n              ) : (\n                <p\n                  style={{\n                    color: \"red\",\n                    background: \"var(--Gray5)\",\n                    textAlign: \"left\",\n                  }}\n                  className={styles.metrixTitle}\n                >\n                  It seems that your pulse is too{\" \"}\n                  {pulse < heartRateMin\n                    ? \"low\"\n                    : pulse > heartRateMax\n                    ? \"high\"\n                    : \"\"}\n                  ! Please consult doctor !\n                </p>\n              )}\n            </div>\n          </>\n        ) : (\n          <p\n            style={{\n              color: \"red\",\n              background: \"var(--Gray5)\",\n              textAlign: \"left\",\n            }}\n            className={styles.metrixTitle}\n          >\n            It seems that you did not set up your personal info. Please check\n            Diet Calculator page to set things right !\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","export default function calculateDailySteps(\n  age,\n  currentWeight,\n  desiredWeight,\n  height\n) {\n  // Basal metabolic factor depending on age (younger -> higher activity need)\n  let ageFactor;\n  if (age < 30) ageFactor = 1.2;\n  else if (age < 50) ageFactor = 1.1;\n  else ageFactor = 1.0;\n\n  // Maintenance steps baseline (based on height and weight balance)\n  let baseSteps = 6000 + (height - 150) * 20;\n\n  // Difference between current and desired weight\n  let weightDiff = desiredWeight - currentWeight;\n\n  let adjustment;\n  if (weightDiff === 0) {\n    // Maintain weight\n    adjustment = 0;\n  } else if (weightDiff < 0) {\n    // Lose weight → increase steps\n    adjustment = Math.abs(weightDiff) * 200;\n  } else {\n    // Gain weight → fewer steps needed\n    adjustment = -weightDiff * 150;\n  }\n\n  // Final calculation with age factor\n  let dailySteps = Math.round((baseSteps + adjustment) * ageFactor);\n\n  // Ensure a healthy minimum and maximum\n  if (dailySteps < 4000) dailySteps = 4000;\n  if (dailySteps > 15000) dailySteps = 15000;\n\n  return dailySteps;\n}\n","export default function calculateSleepHours(age, activityLevel = \"moderate\") {\n  let sleepRange;\n\n  if (age < 14) {\n    sleepRange = [9, 11]; // children\n  } else if (age <= 17) {\n    sleepRange = [8, 10]; // teens\n  } else if (age <= 64) {\n    sleepRange = [7, 9]; // adults\n  } else {\n    sleepRange = [7, 8]; // seniors\n  }\n\n  // adjust if activity level is high\n  if (activityLevel === \"high\") {\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\n  }\n\n  const min = sleepRange[0];\n  const max = sleepRange[1];\n\n  const medium = (max + min) / 2;\n\n  return medium;\n}\n"],"names":["getFormattedDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","calculateBPAndPulse","age","weight","heartRate","Math","round","heartRateMin","heartRateMax","systolic","systolicMin","systolicMax","diastolic","hr","hrMin","hrMax","sys","sysMin","sysMax","dia","diaMin","diaMax","diastolicMin","diastolicMax","noAge","console","log","_user$username","_user$age","_user$height","_user$weight","_user$desiredWeight","dailyCalorieSummary","privateDispatch","usePrivate","user","useAuth","name","username","height","desiredWeight","neededSteps","currentWeight","ageFactor","adjustment","baseSteps","weightDiff","abs","dailySteps","calculateDailySteps","neededSleep","sleepRange","arguments","length","undefined","min","calculateSleepHours","heartsMetrics","calculateNominalBPAndPulse","formatNumber","num","toLocaleString","useEffect","fetchConsumedProductsForSpecificDay","date","condition","totalCalories","dailyCalorieIntake","caloriesPer","percentageCaloriesConsumed","caloriesLeft","remainingCalories","stepsPer","stepsLeft","sleepPer","sleepLeft","systolicR","pulse","globalPercentage","cal","st","sl","calories","sleep","goalsPercentage","floor","totalGoalsPercentage","_jsxs","className","styles","cont","children","leftSideCont","_jsx","title","graphCont","clsx","graphicResult","badResult","mediumResult","goodResult","metrixCont","alerts","rightSideCont","_Fragment","metrixTitle","metrixName","metrixQuantity","needed","style","color","background","textAlign","toFixed"],"sourceRoot":""}