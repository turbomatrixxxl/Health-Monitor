{"version":3,"file":"static/js/292.1d2a6b17.chunk.js","mappings":"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","sources":["Utils/convertActivityToSteps.js","webpack://health-monitor/./src/components/ActivitySelect/ActivitySelect.module.css?1197","components/ActivitySelect/ActivitySelect.jsx","components/ActivitySelect/index.js","webpack://health-monitor/./src/pages/PsyhicalActivityPage/PsyhicalActivityPage.module.css?855d","pages/PsyhicalActivityPage/index.js","pages/PsyhicalActivityPage/PsyhicalActivityPage.jsx","Utils/calculateMinimumDailyActivity.js","Utils/formatDate.js"],"sourcesContent":["export default function convertActivityToSteps(\n  activity,\n  minutes,\n  age,\n  weight,\n  height,\n  intensity\n) {\n  if (!activity) {\n    return \"please input your exercise type\";\n  }\n\n  if (!age || !weight || !height) {\n    return 0;\n  }\n\n  const minutesNum = Number(minutes) || 0;\n\n  const activityMET = {\n    football: 8,\n    tennis: 7.3,\n    basketball: 6.5,\n    gym: 5,\n    fitness: 6,\n    cycling: 6,\n    running: 9.8,\n    jogging: 7,\n    swimming: 8,\n    hockey: 7,\n    rugby: 8,\n    volley: 5,\n    yoga: 3,\n    walking: 3.5,\n    dancing: 5.5,\n    skiing: 7,\n    snowboarding: 6.8,\n    surfing: 5,\n    boxing: 7.8,\n    climbing: 8,\n  };\n\n  const met = activityMET[activity.toLowerCase()] || 4;\n\n  let caloriesPerMin = 0.0175 * met * weight;\n\n  if (intensity === \"min\") {\n    caloriesPerMin *= 0.8;\n  } else if (intensity === \"max\") {\n    caloriesPerMin *= 1.2;\n  }\n\n  const totalCalories = caloriesPerMin * minutesNum;\n\n  const ageFactor = age < 30 ? 1.1 : age < 50 ? 1.0 : 0.9;\n\n  const adjustedCalories = totalCalories * ageFactor;\n\n  const steps = Math.round(adjustedCalories * 25);\n\n  return steps;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"selector\":\"ActivitySelect_selector__ZJWTA\",\"button\":\"ActivitySelect_button__GMBQU\",\"span\":\"ActivitySelect_span__kC5Bd\",\"spanDark\":\"ActivitySelect_spanDark__-UfcE\",\"svg\":\"ActivitySelect_svg__fg-DH\",\"svgDark\":\"ActivitySelect_svgDark__RiTlv\",\"options\":\"ActivitySelect_options__tQAam\",\"optionsDark\":\"ActivitySelect_optionsDark__zrVLA\",\"optionsViolet\":\"ActivitySelect_optionsViolet__3fpmK\",\"option\":\"ActivitySelect_option__fHjzJ\",\"optionDark\":\"ActivitySelect_optionDark__PpHpC\",\"activeOption\":\"ActivitySelect_activeOption__p+L7e\",\"activeOptionViolet\":\"ActivitySelect_activeOptionViolet__vg8ap\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { HiChevronDown, HiChevronUp } from \"react-icons/hi\";\nimport styles from \"./ActivitySelect.module.css\";\n\nconst activities = [\n  \"football\",\n  \"tennis\",\n  \"basketball\",\n  \"gym\",\n  \"fitness\",\n  \"cycling\",\n  \"running\",\n  \"jogging\",\n  \"swimming\",\n  \"hockey\",\n  \"rugby\",\n  \"volley\",\n  \"yoga\",\n  \"walking\",\n  \"dancing\",\n  \"skiing\",\n  \"snowboarding\",\n  \"surfing\",\n  \"boxing\",\n  \"climbing\",\n  \"other\",\n];\n\nexport default function ActivitySelect({ theme, value, onChange }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  const handleSelect = (selectedActivity) => {\n    onChange(selectedActivity);\n    setIsOpen(false);\n  };\n\n  // închide dropdown dacă dai click în afară\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className={styles.selector} ref={dropdownRef}>\n      <button className={styles.button} onClick={() => setIsOpen((p) => !p)}>\n        <span\n          className={clsx(\n            styles.span,\n            theme === \"dark\" || theme === \"violet\"\n              ? styles.spanDark\n              : styles.span\n          )}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </span>\n        {!isOpen ? (\n          <HiChevronDown\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        ) : (\n          <HiChevronUp\n            className={clsx(\n              styles.svg,\n              theme === \"dark\" || theme === \"violet\"\n                ? styles.svgDark\n                : styles.svg\n            )}\n          />\n        )}\n      </button>\n\n      {isOpen && (\n        <ul\n          className={clsx(\n            styles.options,\n            theme === \"dark\" ? styles.optionsDark : styles.options,\n            theme === \"violet\" ? styles.optionsViolet : styles.options\n          )}\n        >\n          {activities.map((option) => (\n            <li\n              key={option}\n              className={clsx(\n                styles.option,\n                theme === \"dark\" ? styles.optionDark : styles.option,\n                option === value &&\n                  (theme === \"violet\"\n                    ? styles.activeOptionViolet\n                    : styles.activeOption)\n              )}\n              onClick={() => handleSelect(option)}\n            >\n              {option.charAt(0).toUpperCase() + option.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nActivitySelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  theme: PropTypes.string,\n};\n","import ActivitySelect from \"./ActivitySelect\";\n\nexport default ActivitySelect;\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"PsyhicalActivityPage_cont__ekuRl\",\"leftSideCont\":\"PsyhicalActivityPage_leftSideCont__jrCmT\",\"rightSideCont\":\"PsyhicalActivityPage_rightSideCont__8zjDj\",\"rightSideUpCont\":\"PsyhicalActivityPage_rightSideUpCont__rw3Zv\",\"title\":\"PsyhicalActivityPage_title__4rJnJ\",\"graphCont\":\"PsyhicalActivityPage_graphCont__xeaV6\",\"rightSideContTitle\":\"PsyhicalActivityPage_rightSideContTitle__hIexH\",\"rightSideDate\":\"PsyhicalActivityPage_rightSideDate__DxwxO\",\"dateWrapper\":\"PsyhicalActivityPage_dateWrapper__G+IhJ\",\"paramInput\":\"PsyhicalActivityPage_paramInput__1LpJm\",\"fromToCont\":\"PsyhicalActivityPage_fromToCont__XYjNb\",\"fromToTitle\":\"PsyhicalActivityPage_fromToTitle__lQxpq\",\"fromExercise\":\"PsyhicalActivityPage_fromExercise__NMQmA\",\"from\":\"PsyhicalActivityPage_from__ngOis\",\"rem\":\"PsyhicalActivityPage_rem__prLsZ\",\"lineRowCont\":\"PsyhicalActivityPage_lineRowCont__AvVL4\",\"lineRow\":\"PsyhicalActivityPage_lineRow__xs+87\",\"activitySelect\":\"PsyhicalActivityPage_activitySelect__dy5Y+\",\"minutes\":\"PsyhicalActivityPage_minutes__BwmUC\",\"minMax\":\"PsyhicalActivityPage_minMax__g65Li\",\"timeInput\":\"PsyhicalActivityPage_timeInput__hrNzA\",\"removeBtn\":\"PsyhicalActivityPage_removeBtn__3kjpN\",\"dash\":\"PsyhicalActivityPage_dash__ZotMg\",\"twoDots\":\"PsyhicalActivityPage_twoDots__5hAHi\",\"ampmSelect\":\"PsyhicalActivityPage_ampmSelect__gdw+x\",\"addSleepCont\":\"PsyhicalActivityPage_addSleepCont__ADZwY\",\"addBtn\":\"PsyhicalActivityPage_addBtn__dPfpi\",\"saveBtn\":\"PsyhicalActivityPage_saveBtn__u+nWb\",\"adviceCont\":\"PsyhicalActivityPage_adviceCont__D7BTL\",\"navBtn\":\"PsyhicalActivityPage_navBtn__hUp5q\"};","import PsyhicalActivityPage from \"./PsyhicalActivityPage\";\n\nexport default PsyhicalActivityPage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { usePrivate } from \"../../hooks/usePrivate\";\nimport { setTotalStepsForToday } from \"../../redux/private/privateSlice\";\nimport { setTotalSteps } from \"../../redux/private/operationsPrivate\";\n\nimport convertActivityToSteps from \"../../Utils/convertActivityToSteps\";\nimport calculateMinimumDailyActivity from \"../../Utils/calculateMinimumDailyActivity\";\nimport formatDate from \"../../Utils/formatDate\";\n\nimport clsx from \"clsx\";\n\nimport ActivitySelect from \"../../components/ActivitySelect\";\n\nimport styles from \"./PsyhicalActivityPage.module.css\";\n\nexport default function PsyhicalActivityPage() {\n  const navigate = useNavigate();\n\n  const { user, privateDispatch } = usePrivate();\n  // console.log(\"user psyhical :\", user);\n\n  const age = user?.age ?? 0;\n  const height = user?.height ?? 0;\n  const weight = user?.weight ?? 0;\n  const desiredWeight = user?.desiredWeight ?? 0;\n\n  const steps = useMemo(() => user?.steps || [], [user?.steps]);\n\n  const minDailyActivitySteps = calculateMinimumDailyActivity(\n    age,\n    height,\n    weight,\n    desiredWeight\n  );\n\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n  // console.log(\"filterDate :\", filterDate);\n\n  const now = useMemo(() => new Date(), []);\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\n\n  const isTodaycondition = filterDate === today;\n  // console.log(\"isTodaycondition :\", isTodaycondition);\n\n  const lines = useMemo(\n    () =>\n      steps.length > 0\n        ? [...steps]\n        : [\n            {\n              date: now,\n              interval: [\n                {\n                  exerciseType: \"walking\",\n                  minutes: \"00\",\n                  intensity: \"min\",\n                  steps: 0,\n                },\n              ],\n            },\n          ],\n    [steps, now]\n  );\n\n  const filteredSteps = steps.find(\n    (step) => new Date(step.date).toISOString().split(\"T\")[0] === filterDate\n  );\n\n  const [interval, setInterval] = useState([\n    {\n      date: now,\n      interval: [\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ],\n    },\n  ]);\n  // console.log(\"interval :\", interval);\n\n  useEffect(() => {\n    if (filteredSteps) {\n      const sortedIntervals = [...filteredSteps.interval];\n      setInterval(sortedIntervals);\n    }\n  }, [filteredSteps]);\n\n  useEffect(() => {\n    const dayExercises = lines.find(\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\n    );\n\n    if (dayExercises) {\n      const sortedIntervals = [...dayExercises.interval];\n      setInterval(sortedIntervals);\n    } else {\n      setInterval([\n        {\n          exerciseType: \"walking\",\n          minutes: \"00\",\n          intensity: \"min\",\n          steps: 0,\n        },\n      ]);\n    }\n  }, [filterDate, lines, now, steps]);\n\n  const totalSteps = interval.reduce((acc, int) => {\n    const stepsVal = Number(int.steps) || 0;\n    return acc + stepsVal;\n  }, 0);\n\n  // console.log(\"totalSteps :\", totalSteps);\n\n  useEffect(() => {\n    privateDispatch(setTotalStepsForToday(totalSteps));\n  }, [privateDispatch, totalSteps]);\n\n  const lastInterval = interval[interval.length - 1];\n\n  const emptyLineCondition = (line) =>\n    Number(String(line.minutes).trim()) === 0;\n\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\n\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\n    const newInterval = interval.map((int, idx) =>\n      idx === intervalIdx\n        ? {\n            ...int,\n            [field]: value,\n            steps: convertActivityToSteps(\n              field === \"exerciseType\" ? value : int.exerciseType,\n              field === \"minutes\"\n                ? Math.max(0, parseInt(value, 10) || 0)\n                : parseInt(int.minutes, 10) || 0,\n              age,\n              weight,\n              height,\n              field === \"intensity\" ? value : int.intensity\n            ),\n          }\n        : { ...int }\n    );\n\n    setInterval(newInterval);\n  };\n\n  const addFilteredLineNewInterval = () => {\n    const newInterval = [...interval] || [];\n    newInterval.push({\n      exerciseType: \"walking\",\n      minutes: \"00\",\n      intensity: \"min\",\n      steps: 0,\n    });\n    setInterval(newInterval);\n  };\n\n  const removeFilteredLineInterval = (index) => {\n    const newInterval = interval.filter((_, i) => i !== index);\n    setInterval(newInterval);\n  };\n\n  const resetFilteredLinesInterval = () => {\n    setInterval([\n      {\n        exerciseType: \"walking\",\n        date: filterDate,\n        minutes: \"00\",\n        intensity: \"min\",\n        steps: 0,\n      },\n    ]);\n  };\n\n  const formatNumber = (num) => String(num).replace(/^0+(?=\\d)/, \"\");\n\n  function handleSave() {\n    const lastIntervalIndex = interval.length - 1;\n    const intervalToSave = emptyLastIntervalLineCondition\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\n      : [...interval];\n\n    // console.log(\"intervalToSave :\", intervalToSave);\n\n    privateDispatch(\n      setTotalSteps({ date: filterDate, interval: intervalToSave })\n    );\n  }\n\n  return (\n    <div className={styles.cont}>\n      <div className={styles.leftSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Physical Activity</h1>\n          <div className={styles.graphCont}>Graphic container</div>\n        </div>\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Total sleep hours</h2>\n          {totalSteps !== 0 ? (\n            <p\n              style={{\n                fontSize: \"clamp(11px, 1.5vw, 12px)\",\n                color: totalSteps < totalSteps * 0.6 ? \"red\" : undefined,\n              }}\n              className={styles.advicep}\n            >\n              <span style={{ marginRight: \"2px\" }}>\n                Converted Activities in {totalSteps} steps for{\" \"}\n              </span>{\" \"}\n              <span>{isTodaycondition ? \"today\" : formatDate(filterDate)}</span>\n            </p>\n          ) : (\n            <p style={{ color: \"red\" }} className={styles.advicep}>\n              No Physical Activities records for{\" \"}\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.rightSideCont}>\n        <div className={styles.rightSideUpCont}>\n          <h1 className={styles.title}>Add exercise activities</h1>\n          {/* data */}\n          <div className={styles.rightSideDate}>\n            <div className={styles.dateWrapper}>\n              <input\n                max={today}\n                type=\"date\"\n                value={filterDate ?? today}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className={styles.paramInput}\n              />\n            </div>\n            <p className={styles.rightSideDateP}>Choose date</p>\n          </div>\n          <div className={styles.fromToCont}>\n            <div className={styles.fromToTitle}>\n              <p className={styles.fromExercise}>Exercise Type</p>\n              <p className={styles.from}>Minutes</p>\n              <p className={styles.from}>Intensity</p>\n              <p className={styles.rem}>\n                {interval.length > 1 ? \"Delete\" : \"Reset\"}\n              </p>\n            </div>\n            <div className={styles.lineRowCont}>\n              {interval.map((line, idx) => (\n                <div key={`physical-${idx}`} className={styles.lineRow}>\n                  <ActivitySelect\n                    value={line?.exerciseType ?? \"walking\"}\n                    onChange={(val) =>\n                      updateFilteredLineInterval(idx, \"exerciseType\", val)\n                    }\n                    theme=\"light\"\n                  />\n                  <div className={styles.minutes}>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"1\"\n                      value={formatNumber(line?.minutes)}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"minutes\",\n                          e.target.value.replace(/^0+(?=\\d)/, \"\") || \"0\" // eliminăm 0 la început\n                        )\n                      }\n                      className={clsx(styles.timeInput)}\n                    />\n                  </div>\n                  <div className={styles.minMax}>\n                    <select\n                      style={\n                        line?.intensity === \"min\"\n                          ? { color: \"green\", fontWeight: \"bold\" }\n                          : { color: \"var(--brand-color)\", fontWeight: \"bold\" }\n                      }\n                      value={line?.intensity}\n                      onChange={(e) =>\n                        updateFilteredLineInterval(\n                          idx,\n                          \"intensity\",\n                          e.target.value\n                        )\n                      }\n                      className={styles.ampmSelect}\n                    >\n                      <option\n                        style={{ color: \"green\", fontWeight: \"bold\" }}\n                        value=\"min\"\n                      >\n                        Min\n                      </option>\n                      <option\n                        style={{\n                          color: \"var(--brand-color)\",\n                          fontWeight: \"bold\",\n                        }}\n                        value=\"max\"\n                      >\n                        Max\n                      </option>\n                    </select>\n                  </div>\n                  {/* buton remove */}\n                  {interval.length > 1 ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFilteredLineInterval(idx)}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={() => resetFilteredLinesInterval()}\n                      className={styles.removeBtn}\n                    >\n                      ✕\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* add line */}\n          <div className={styles.addSleepCont}>\n            <p>Add exercise</p>\n            <button\n              onClick={() => {\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\n              }}\n              type=\"button\"\n              className={styles.addBtn}\n            >\n              Add +\n            </button>\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\n              interval.length > 1) && (\n              <button\n                onClick={handleSave}\n                type=\"button\"\n                className={styles.saveBtn}\n              >\n                Save\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.adviceCont}>\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\n          {minDailyActivitySteps !== 0 ? (\n            <p className={styles.advicep}>\n              Try to get at least {minDailyActivitySteps} minutes of activity\n              everyday.\n            </p>\n          ) : (\n            <p\n              style={{\n                color: \"red\",\n                background: \"var(--Gray5)\",\n                textAlign: \"left\",\n                flexWrap: \"wrap\",\n                gap: \"3px\",\n                justifyContent: \"flex-start\",\n                height: \"fit-content\",\n              }}\n              className={styles.advicep}\n            >\n              Personal info missing. Please click\n              <button\n                className={styles.navBtn}\n                onClick={() => navigate(\"/\")}\n                type=\"button\"\n              >\n                Diet Calculator\n              </button>{\" \"}\n              to update !\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * Calculeaza activitatea fizica minima zilnica in minute\n * pentru mentinerea sanatatii si atingerea obiectivului.\n *\n * @param {number} age - varsta utilizatorului (ani)\n * @param {number} height - inaltimea utilizatorului (cm)\n * @param {number} weight - greutatea actuala (kg)\n * @param {number} desiredWeight - greutatea dorita (kg)\n * @returns {number} activitate minima zilnica in minute\n */\nexport default function calculateMinimumDailyActivity(\n  age,\n  height,\n  weight,\n  desiredWeight\n) {\n  if (!age || !height || !weight || !desiredWeight) return 0;\n\n  const heightM = height / 100;\n  const bmiCurrent = weight / (heightM * heightM);\n  const bmiDesired = desiredWeight / (heightM * heightM);\n\n  // Activitate de baza pentru sanatate\n  let baseActivity = 30; // 30 min/zi minim\n\n  // Ajustare dupa varsta\n  if (age < 30) baseActivity *= 1;\n  else if (age < 50) baseActivity *= 1.1;\n  else baseActivity *= 1.2;\n\n  // Ajustare dupa obiectiv si diferenta BMI\n  const bmiDiff = bmiCurrent - bmiDesired;\n\n  let goalFactor = 1; // mentinere\n  if (bmiDiff > 0.5) {\n    // trebuie sa slabeasca\n    goalFactor = 1 + Math.min(bmiDiff / 5, 1); // creste activitatea pana la 100% in functie de diferenta\n  } else if (bmiDiff < -0.5) {\n    // trebuie sa se ingrase\n    goalFactor = 0.8; // mai putina activitate\n  }\n\n  const dailyActivityMinutes = baseActivity * goalFactor;\n\n  return Math.round(dailyActivityMinutes);\n}\n\n// Exemple\n// console.log(calculateMinimumDailyActivity(25, 175, 70, 65)); // slabire\n// console.log(calculateMinimumDailyActivity(35, 180, 80, 80)); // mentinere\n// console.log(calculateMinimumDailyActivity(50, 165, 60, 65)); // ingrasare\n// console.log(calculateMinimumDailyActivity(null, 165, 60, 65)); // lipseste age => 0\n","export default function formatDate(inputDate) {\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\n\n  const dateObj = new Date(year, month - 1, day);\n\n  const dayName = days[dateObj.getDay()];\n  const monthName = months[month - 1];\n\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\n}\n"],"names":["convertActivityToSteps","activity","minutes","age","weight","height","intensity","minutesNum","Number","caloriesPerMin","football","tennis","basketball","gym","fitness","cycling","running","jogging","swimming","hockey","rugby","volley","yoga","walking","dancing","skiing","snowboarding","surfing","boxing","climbing","toLowerCase","adjustedCalories","Math","round","activities","_ref","theme","value","onChange","isOpen","setIsOpen","useState","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","_jsxs","className","styles","ref","children","onClick","p","_jsx","clsx","charAt","toUpperCase","slice","HiChevronUp","HiChevronDown","map","option","_user$age","_user$height","_user$weight","_user$desiredWeight","navigate","useNavigate","user","privateDispatch","usePrivate","desiredWeight","steps","useMemo","minDailyActivitySteps","heightM","baseActivity","bmiDiff","goalFactor","min","dailyActivityMinutes","calculateMinimumDailyActivity","filterDate","setFilterDate","Date","toISOString","split","now","today","concat","getFullYear","String","getMonth","padStart","getDate","isTodaycondition","lines","length","date","interval","exerciseType","filteredSteps","find","step","setInterval","sortedIntervals","dayExercises","line","totalSteps","reduce","acc","int","setTotalStepsForToday","lastInterval","emptyLastIntervalLineCondition","trim","updateFilteredLineInterval","intervalIdx","field","newInterval","idx","_objectSpread","max","parseInt","cont","leftSideCont","rightSideUpCont","title","graphCont","adviceCont","adviceTitle","style","fontSize","color","undefined","advicep","marginRight","formatDate","rightSideCont","rightSideDate","dateWrapper","type","e","paramInput","rightSideDateP","fromToCont","fromToTitle","fromExercise","from","rem","lineRowCont","_line$exerciseType","num","lineRow","ActivitySelect","val","replace","timeInput","minMax","fontWeight","ampmSelect","index","filter","_","i","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","push","addBtn","lastIntervalIndex","intervalToSave","setTotalSteps","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","inputDate","year","month","day","dayName","getDay","monthName"],"sourceRoot":""}